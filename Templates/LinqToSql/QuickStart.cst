<%--
Name: Quick Start
Author: Reggie Bradshaw & Tom DuPont
Description: Used to Quick Start Visual Studio Projects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="True" Description="Template description here." CompilerVersion="v3.5" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="QuickStartUtils" Path="Common"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.Engine" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="QuickStartUtils" %>
<%@ Register Name="QuickStartSolution" Template="Common\QuickStartSolution.cst" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema"
    Default="" Optional="False" Category="1.Database"
    Description="Source Database"
    OnChanged="OnSourceDatabaseChanged" %>
<%@ Property Name="Location" Type="System.String"
    Default="" Optional="False" Category="2.Solution"
    Description="This is the path to the Solution location."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="SolutionName" Type="System.String"
    Default="" Optional="False" Category="2.Solution"
    Description="Name of the project to be generated." %>
<%@ Property Name="Language" Type="LanguageEnum"
    Default="CSharp" Optional="False" Category="2.Solution"
    Description="Language the project will be in" %>
<%@ Property Name="Framework" Type="FrameworkVersion"
    Default="v40" Optional="False" Category="2.Solution"
    Description="The .net Framework version." %>
<%@ Property Name="LaunchVisualStudio" Type="System.Boolean"
    Default="True" Optional="False" Category="2.Solution"
    Description="Launch Visual Studio after generation." %>
<%@ Property Name="DataProjectName" Type="System.String"
    Default="" Optional="False" Category="3.Data Project"
    Description="Name Space for the Data Project." %>
<%@ Property Name="DataContextName" Type="System.String"
    Default="" Optional="True" Category="3.Data Project"
    Description="Name Space for the Data Project." %>
<%@ Property Name="CopyTemplatesToFolder" Type="System.Boolean"
    Default="False" Optional="False" Category="3.Data Project"
    Description="Include a copy of the LinqToSql Templates in the project directory" %>
<%@ Property Name="QueryPattern" Type="QueryPatternEnum"
    Default="QueryExtensions" Optional="False" Category="3.Data Project"
    Description="The type of pattern to use for automatically generated queries." %>
<%@ Property Name="ProjectType" Type="ProjectTypeEnum"
    Default="DynamicDataWebApp" Optional="False" Category="4.Web Project"
    Description="Type of Project to be created" %>
<%@ Property Name="IncludeDataServices" Type="System.Boolean"
    Default="True" Optional="False" Category="4.Web Project"
    Description="Include DataServices in Web Project" %>
<%@ Property Name="InterfaceProjectName" Type="System.String"
    Default="" Optional="False" Category="4.Web Project"
    Description="Name Space for the Web Project." %>
<%@ Property Name="TestProjectName" Type="System.String"
    Default="" Optional="False" Category="5.Test Project"
    Description="Name Space for the Test Project." %>
<%@ Property Name="IncludeTestProject" Type="System.Boolean"
    Default="False" Optional="False" Category="5.Test Project"
    Description="Name Space for the Test Project." %>

<% CreateQuickStart(); %>
The <%= SolutionName %> Solution has been created at <%= Location %>.

<script runat="template">

    public void CreateQuickStart()
    {
        // Make sure Location is FullPath
        Location = Path.GetFullPath(Location);

        // Check For Existing Project
        if(DirectoriesAlreadyExists)
            throw new System.ApplicationException(AlreadyExistsMessage);

        // Prep Directories
        if(!Directory.Exists(Location))
            Directory.CreateDirectory(Location);

        // Copy Plinqo Templates
        if(CopyTemplatesToFolder)
            QuickStartUtils.CopyDirectory(CodeTemplateInfo.DirectoryName, Path.Combine(Location, @"Templates\LinqToSql"));

        List<SolutionItem> solutionItems = new List<SolutionItem>();
        ProjectBuilderSettings pbs = CreateProjectBuilderSettings();

        // Create Data Project
        DataProjectCreator dataProjectCreator = new DataProjectCreator(pbs);
        dataProjectCreator.CreateProject(this.DataProjectName);
        solutionItems.Add(dataProjectCreator.SolutionItem);

        // Create UI Project
        if(ProjectType == ProjectTypeEnum.DynamicDataWebApp)
        {
            WebApplicationCreator webAppCreator = new WebApplicationCreator(pbs);
            webAppCreator.CreateProject(this.InterfaceProjectName, dataProjectCreator.SolutionItem);
            solutionItems.Add(webAppCreator.SolutionItem);
        }
        else if(ProjectType == ProjectTypeEnum.DynamicDataWebSite)
        {
            WebSiteCreator websiteCreator = new WebSiteCreator(pbs);
            websiteCreator.CreateProject(this.InterfaceProjectName, dataProjectCreator.SolutionItem);
            solutionItems.Add(websiteCreator.SolutionItem);
        }

        // Create UnitTests Project
        if(IncludeTestProject)
        {
            TestProjectCreator testProjectCreator = new TestProjectCreator (pbs);
            testProjectCreator.CreateProject(this.TestProjectName, dataProjectCreator.SolutionItem);
            solutionItems.Add(testProjectCreator.SolutionItem);
        }

        // Create Solution
        string solutionPath = CreateSolution(solutionItems);

        // Launch Visual Studio
        if(LaunchVisualStudio)
            LaunchVisualStudioWithSolution(solutionPath);
    }

    private bool DirectoriesAlreadyExists
    {
        get
        {
            return (Directory.Exists(Path.Combine(Location, this.DataProjectName))
            || Directory.Exists(Path.Combine(Location, this.InterfaceProjectName))
            || Directory.Exists(Path.Combine(Location, this.TestProjectName))
            || File.Exists(Path.Combine(Location, String.Concat(this.SolutionName, ".sln"))));
        }
    }
    private string AlreadyExistsMessage
    {
        get
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.AppendLine("It seems that a quick start already exists in specified directory:");
            sb.AppendLine(Location);
            sb.AppendLine("Please delete existing data or selected a different directory.");
            return sb.ToString();
        }
    }

    private ProjectBuilderSettings CreateProjectBuilderSettings()
    {
        return new ProjectBuilderSettings()
        {
            SourceDatabase = this.SourceDatabase,
            FrameworkVersion = this.Framework,
            Language = this.Language,
            Location = this.Location,
            SolutionName = this.SolutionName,
            DataContextName = this.DataContextName,
            DataProjectName = this.DataProjectName,
            QueryPattern = this.QueryPattern,
            CopyTemplatesToFolder = this.CopyTemplatesToFolder,
            IncludeDataServices = this.IncludeDataServices,
            InterfaceProjectName = this.InterfaceProjectName,
            IncludeTestProject = this.IncludeTestProject,
            ProjectType = this.ProjectType,
            TestProjectName = this.TestProjectName,
            WorkingDirectory = this.CopyTemplatesToFolder
                ? Path.Combine(Location, @"Templates\LinqToSql")
                : this.CodeTemplateInfo.DirectoryName
        };
    }
    private string CreateSolution(List<SolutionItem> solutionItems)
    {
        QuickStartSolution quickStartSolution = this.Create<QuickStartSolution>();
        quickStartSolution.SolutionItems = solutionItems;
        quickStartSolution.Framework = this.Framework;
        quickStartSolution.Location = this.Location;

        string filePathAboslute = Path.Combine(Location, String.Concat(SolutionName, ".sln"));
        quickStartSolution.RenderToFile(filePathAboslute, true);

        return filePathAboslute;
    }
    private void LaunchVisualStudioWithSolution(string solutionLink)
    {
        string args = "/build debug";
        using (Process p = Process.Start(solutionLink, args)) { }
    }

    private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;

        string name = StringUtil.ToPascalCase(SourceDatabase.Database.Name);

        if(string.IsNullOrEmpty(SolutionName))
            SolutionName = name;

        if (string.IsNullOrEmpty(DataProjectName))
            DataProjectName = name + ".Data";

        if (string.IsNullOrEmpty(DataContextName))
            DataContextName = name + "DataContext";

        if (string.IsNullOrEmpty(InterfaceProjectName))
            InterfaceProjectName = name + ".Web";

        if (string.IsNullOrEmpty(TestProjectName))
            TestProjectName = name + ".Test";

        if (string.IsNullOrEmpty(Location))
            Location = Path.Combine(
                CodeSmith.Engine.Configuration.Instance.CodeSmithTemplatesDirectory,
                Path.Combine("PLINQO", name));
    }
</script>