<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Class." CompilerVersion="v3.5" %>

<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database"
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False"
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type"
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False"
    Description="The Type instance for this entity. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="TableName"
    Type="System.String" Default="" Optional="True"
    Description="The name of the table this class is mapped to." %>

<%@ Property Category="2.Class" Name="InterfaceNamespace" 
    Type="System.String" Default="" Optional="True" 
    Description="The namespace for the interfaces.  Leave blank to not generate them." %>

<%@ Property Category="2.Class" Name="EntityBase"
    Type="System.String" Default="LinqEntityBase" Optional="True"
    Description="The base class for the entity." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="LinqToSqlShared.Generator.FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Which version of the .Net Framework is being generated for." %>

<%@ Property Category="2.Class" Name="IncludeDataContract"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include WCF DataContract attributes." %>

<%@ Property Category="2.Class" Name="IncludeDataServices"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include ADO.Net DataServices attributes." %>

<%@ Property Category="2.Class" Name="IncludeDataRules"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include CodeSmith.Data rules." %>

<%@ Property Category="2.Class" Name="IncludeXmlSerialization"
    Type="System.Boolean" Default="false" Optional="False"
    Description="Include Xml serialization support." %>

<%@ Property Category="2.Class" Name="IncludeManyToMany"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Generate ManyToMany Associations." %>

<%@ Property Name="AssociationNamingSuffix"
    Type="AssociationNamingEnum" Default="ListSuffix" Optional="False"
    Description="Suffix for Many To Many Associations" %>

<%@ Property Name="EnumDatabase"
    Type="LinqToSqlShared.Generator.DbmlEnum.Database" Optional="True"
    Description="Enum Collection for Database." %>

<%@ Map Name="VBKeywordEscape"
    Src="VBKeywordEscape.csmap" Reverse="False"
    Description="Mapping to escape vb keywords" %>

<%@ Map Name="VBAlias"
    Src="System-VBAlias.csmap" Reverse="False"
    Description="Convert system data types to vb alias" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Linq

Namespace <%= Database.EntityNamespace %>
    ''' <summary>
<% If Not String.IsNullOrEmpty(TableName) Then %>
    ''' The class representing the <%= TableName %> table.
<%  Else  %>
    ''' Class representing data for the <%= Database.Name %> database.
<% End If %>
    ''' </summary>
<% If (IncludeXmlSerialization) Then%>
    <System.Serializable()> _
<% End If %>
    <%= GetClassAttributes() %>
<% If (IncludeDataContract) Then%>
    <System.Runtime.Serialization.DataContract(IsReference:=True)> _
<% End If %>
    <System.ComponentModel.DataAnnotations.ScaffoldTable(True)> _
    <System.ComponentModel.DataAnnotations.MetadataType(GetType(<%= Database.EntityNamespace %>.<%= VBKeywordEscape(Type.Name) %>.Metadata))> _
   <% If (IncludeDataServices) Then %>
   <% Dim dataServiceKey As New System.Text.StringBuilder()
   For Each column as Column in Type.PrimaryKeyColumns
      If (dataServiceKey.Length > 0) Then
         dataServiceKey.Append(", ")
      End If
      dataServiceKey.AppendFormat("""{0}""", column.Member)
   Next %>
<%If dataServiceKey.Length > 0 Then  %>
    <System.Data.Services.Common.DataServiceKey(<%= dataServiceKey.ToString() %>)> _
<% End If %>
   <% End If %>
<%
    Dim sb As StringBuilder = new StringBuilder()
    For Each [column] As Column In Type.PrimaryKeyColumns

        If(sb.Length > 0) Then
            sb.Append(", ")
        End If

        sb.Append([column].Member)
        sb.Append(": {")
        sb.Append([column].Member)
        sb.Append("}")
    Next
%>
<% If (sb.Length > 0) Then %>
    <System.Diagnostics.DebuggerDisplay("<%= sb.ToString() %>")> _
<% End If %>
    Partial <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> Class <%= VBKeywordEscape(Type.Name) %>
<% If Not (String.IsNullOrEmpty(EntityBase)) Then %>
        Inherits <%= EntityBase %>
    <% If IncludeDataContract Then %>
        Implements ICloneable
    <% End If %>
    <% if(String.IsNullOrEmpty(Me.InterfaceNamespace) = False) Then %>
    	Implements <%= Me.InterfaceNamespace %>.I<%=Type.Name%> 
    <% End If%>
<% End If %>

<% If (IncludeDataRules) Then %>
#Region "Static Constructor"
        ''' <summary>
        ''' Initializes the <see cref="<%= VBKeywordEscape(Type.Name) %>"/> class.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Shared Sub New()
            AddSharedRules()
        End Sub
#End Region
<% End If ' IncludeDataRules %>

#Region "Default Constructor"
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= VBKeywordEscape(Type.Name) %>"/> class.
        ''' </summary>
        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        Public Sub New()
    <% If (IncludeDataContract) Then%>
            Initialize()
        End Sub

        <%= GeneratedCodeAttribute %>
        Private Sub Initialize()
    <%  End If
    For Each a As Association in Type.EntityRefAssociations %>
            <%= a.Storage %> = Nothing
<% Next ' foreach Association%>
<% For Each a As Association In Type.EntitySetAssociations %>
            <%= a.Storage %> = New System.Data.Linq.EntitySet(Of <%= VBKeywordEscape(a.Type) %>)( _
                New System.Action(Of <%= VBKeywordEscape(a.Type) %>)(AddressOf Me.On<%= a.Member %>Add), _
                New System.Action(Of <%= VBKeywordEscape(a.Type) %>)(AddressOf Me.On<%= a.Member %>Remove))
<% Next ' foreach Association%>
<% For Each c As Column In Type.Columns %>
<% If c.IsDelayLoaded.Value Then %>
            <%= c.Storage %> = Nothing
<% End If ' IsDelayLoaded%>
<% Next ' foreach Column%>
            OnCreated()
        End Sub
#End Region

#Region "Column Mapped Properties"
<% DataMemberCount  = 0
For Each c As Column in Type.Columns
    Dim dataType As String = c.Type
    Dim fieldType As String = c.Type
    Dim storageGet As String = c.Storage
    Dim storageSet As String = c.Storage
    Dim valueConvert As String = "value"
    Dim isVersion As Boolean = c.IsVersion.Value = True AndAlso dataType.Equals("System.Data.Linq.Binary")
    Dim useByteArray As Boolean = IncludeXmlSerialization AndAlso dataType.Equals("System.Data.Linq.Binary")

    If useByteArray Then
        dataType = "Byte()"
    End If

    Dim enumType As LinqToSqlShared.Generator.DbmlEnum.Enum = Nothing

    If EnumDatabase IsNot Nothing Then
        enumType = EnumDatabase.Enums.FirstOrDefault(Function(e) e.Name = c.Type)
    End If

    Dim isNullable As Boolean = c.CanBeNull.Value = True AndAlso (CommonUtility.IsNullableType(dataType) OrElse enumType IsNot Nothing)

    If c.IsDelayLoaded.Value = True AndAlso c.IsPrimaryKey.Value = False Then
        dataType = VBAlias(dataType)
        fieldType = String.Format("System.Data.Linq.Link(Of {0})", dataType)
        storageGet = storageGet + ".Value"
        storageSet = storageGet

    Else If isNullable Then
        dataType = String.Format("Nullable(Of {0})", VBAlias(dataType))
        fieldType = dataType

    Else
        dataType = VBAlias(dataType)
        fieldType = dataType
    End If

    Dim a As Association = Type.GetForeignKeyAssociation(c)
%>

<% If (c.IsDbGenerated.Value = True) Then %>
        <%= GeneratedCodeAttribute %>
        Private <%= c.Storage %> As <%= fieldType %> = Nothing
<% Else %>
        <%= GeneratedCodeAttribute %>
        Private <%= c.Storage %> As <%= fieldType %>
<% End If %>

        ''' <summary>
<% If Not c.IsDbGenerated.value = True AndAlso c.IsReadOnly.value = False Then %>
        ''' Gets or sets the <%= c.Name %> column value.
<% Else %>
        ''' Gets the <%= c.Name %> column value.
<% End If %>
        ''' </summary>
<% If isVersion Then %>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
<% End If %>
<% If (c.IsDelayLoaded = True) Then %>
        <System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)> _
<% End If %>
<% If (enumType IsNot Nothing) Then %>
        <System.ComponentModel.DataAnnotations.UIHint("Enumeration")> _
<% End If %>
        <%= CreateAttributes(c) %>
<% If IncludeDataContract Then
    DataMemberCount += 1%>
        <System.Runtime.Serialization.DataMember(Order:=<%= DataMemberCount %>)> _
<% End If %>
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(c.AccessModifier, c.Modifier)) %> Property <%=VBKeywordEscape(c.Member) %>() As <%= dataType %>
            Get
                Return <%= storageGet %>
            End Get
<% If Not c.IsReadOnly.Value = True Then %>
            Set(ByVal value As <%= dataType %>)
                If <%= GetValueCompare(c, storageSet, valueConvert, isNullable) %> Then
<% If a IsNot Nothing Then %>
                    If (<%= a.Storage %>.HasLoadedOrAssignedValue) Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
<% End If %>
                    On<%= c.Member %>Changing(<%= valueConvert %>)
<% If Not String.IsNullOrEmpty(EntityBase) Then %>
                    SendPropertyChanging("<%= c.Member %>")
<% End If %>
                    <%= storageSet %> = <%= valueConvert %>
<% If Not String.IsNullOrEmpty(EntityBase) Then %>
                    SendPropertyChanged("<%= c.Member %>")
<% End If %>
                    On<%= c.Member %>Changed()
                End If
            End Set
<% End If ' if IsReadOnly %>
        End Property
<% Next ' foreach column%>
#End Region

#Region "Association Mapped Properties"

<% For Each a As Association In Type.EntityRefAssociations
    Dim info As AssociationInfo = GetAssociationInfo(a)
%>
        <%= GeneratedCodeAttribute %>
        Private  <%= a.Storage %> As System.Data.Linq.EntityRef(Of <%= VBKeywordEscape(a.Type) %>)

        ''' <summary>
        ''' Gets or sets the <see cref="<%= VBKeywordEscape(a.Type) %>"/> association.
        ''' </summary>
        <%= CreateAttribute(a) %>
<% If (IncludeDataContract) Then
    DataMemberCount += 1 %>
        <System.Runtime.Serialization.DataMember(Order:=<%=DataMemberCount%>, EmitDefaultValue:=False)> _
<% End If %>
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(a.AccessModifier, a.Modifier)) %> Property <%= VBKeywordEscape(a.Member) %>() As <%= VBKeywordEscape(a.Type) %>
            Get
<% If (IncludeDataContract) Then %>
                If (serializing AndAlso Not <%=a.Storage%>.HasLoadedOrAssignedValue) Then
                    Return Nothing
                Else
                    Return <%= a.Storage %>.Entity
                End If
<%Else%>
                Return <%= a.Storage %>.Entity
<%End If %>
            End Get
            Set(ByVal value As <%= VBKeywordEscape(a.Type) %>)
<% If info.HasOtherAssociation Then %>
                Dim previousValue As <%= VBKeywordEscape(a.Type) %> = <%= a.Storage %>.Entity
                If ((Object.Equals(previousValue, value) = False) OrElse (Me.<%= a.Storage %>.HasLoadedOrAssignedValue = False)) Then
                    On<%= a.Member %>Changing(value)
                    SendPropertyChanging("<%= a.Member %>")
                    If ((previousValue Is Nothing) = False) Then
                        <%= a.Storage %>.Entity = Nothing
                        previousValue.<%= info.OtherAssociation.Member %><%= info.RemoveSyntax %>
                    End If
                    <%= a.Storage %>.Entity = value
                    If ((value Is Nothing) = False) Then
                        value.<%= info.OtherAssociation.Member %><%= info.AddSyntax %>
<% If a.IsForeignKey = True Then %>
<% Dim i As Integer %>
<% For  i = 0 To info.AssignColumns.Count - 1 %>
<% If (info.AssignColumns(i).CanBeNull = false AndAlso info.OtherColumns(i).CanBeNull AndAlso CommonUtility.IsNullableType(info.OtherColumns(i).Type)) Then %>
                        If(value.<%= info.OtherColumns(i).Member %>.HasValue) Then
				<%= info.AssignColumns(i).Storage %> = value.<%= info.OtherColumns(i).Member %>.Value
			End If
<% Else %>
                        <%= info.AssignColumns(i).Storage %> = value.<%= info.OtherColumns(i).Member %>
<% End If
Next %>
                    Else
<% For i = 0 To info.AssignColumns.Count - 1%>
                        <%= info.AssignColumns(i).Storage %> = Nothing
<% Next %>
<% End If 'IsForeignKey %>
                    End If
                    SendPropertyChanged("<%= a.Member %>")
                    On<%= a.Member %>Changed()
                End If
<% Else %>
                If Not <%= a.Storage %>.Entity = value Then
                    SendPropertyChanging("<%= a.Member %>")
                    <%= a.Storage %>.Entity = value
                    SendPropertyChanged("<%= a.Member %>")
                End If
<% End If ' HasOtherAssociation %>
            End Set
        End Property

        <% If Not(String.IsNullOrEmpty(Me.InterfaceNamespace)) Then %>
 	Private Property <%= a.Member %>() As <%= Me.InterfaceNamespace %>.I<%= a.Type %> Implements <%= Me.InterfaceNamespace %>.<%= Me.Type.Name %>.<%= a.Member %>
	    Get
		Return Me.<%= a.Member %>
	    End Get
	    Set
		Me.<%= a.Member %> = TryCast(value, <%= Database.EntityNamespace %>.<%= a.Type %>)
	    End Set
	End Property
        <% End If %>

<% If IncludeXmlSerialization Then %>

        ''' <summary>
        ''' Used by the <see cref="System.Xml.Serialization.XmlSerializer"/> to determine if <see cref="<%= VBKeywordEscape(a.Member) %>"/> should be serialized.
        ''' </summary>
        ''' <returns><c>true</c> if <see cref="<%= VBKeywordEscape(a.Member) %>"/> should be serialized; otherwise, <c>false</c>.</returns>
        <%= GeneratedCodeAttribute %>
        Public Function ShouldSerialize<%= a.Member %>() As Boolean
            Return <%= a.Storage %>.HasLoadedOrAssignedValue
        End Function
<% End If 'IncludeXmlSerialization %>
<% Next %>
<% For Each a As Association in Type.EntitySetAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>

        <%= GeneratedCodeAttribute %>
        Private <%= a.Storage %> As System.Data.Linq.EntitySet(Of <%= VBKeywordEscape(a.Type) %>)

        ''' <summary>
        ''' Gets or sets the <see cref="<%= VBKeywordEscape(a.Type) %>"/> association.
        ''' </summary>
        <%= CreateAttribute(a) %>
<% If (IncludeDataContract) Then
    DataMemberCount += 1%>
        <System.Runtime.Serialization.DataMember(Order:=<%= DataMemberCount %>, EmitDefaultValue:=False)> _
<% End If %>
        <%= GeneratedCodeAttribute %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> Property <%= VBKeywordEscape(a.Member) %>() As System.Data.Linq.EntitySet(Of <%= VBKeywordEscape(a.Type) %>)
            Get
<%If IncludeDataContract Then%>
                If (serializing AndAlso Not <%=a.Storage%>.HasLoadedOrAssignedValues) Then
                    Return Nothing
                Else
                    Return <%= a.Storage %>
                End If
<%Else%>
                Return <%= a.Storage %>
<%End If%>
            End Get
            Set(ByVal value As System.Data.Linq.EntitySet(Of <%= VBKeywordEscape(a.Type) %>))
                <%= a.Storage %>.Assign(value)
            End Set
        End Property

        <% If Not(String.IsNullOrEmpty(Me.InterfaceNamespace)) Then %>
	Private Property <%= a.Member %>() As System.Collections.Generic.IEnumerable(Of <%= Me.InterfaceNamespace %>.I<%= a.Type %>) Implements <%= Me.InterfaceNamespace %>.I<%= Me.Type.Name %>.<%= a.Member %>
	    Get
		Return Me.<%= a.Member %>.Cast(Of <%= Me.InterfaceNamespace %>.I<%= a.Type %>)()
	    End Get
	    Set
		If value Is Nothing Then
			Me.<%= a.Member %>.Clear()
		Else
			Me.<%= a.Member %>.SetSource(value.Cast(Of EntityNamespace.<%= a.Type %>)())
		End If
	    End Set
	End Property
        <% End If %>

<% If IncludeXmlSerialization Then %>

        ''' <summary>
        ''' Used by the <see cref="System.Xml.Serialization.XmlSerializer"/> to determine if <see cref="<%= VBKeywordEscape(a.Member) %>"/> should be serialized.
        ''' </summary>
        ''' <returns><c>true</c> if <see cref="<%= VBKeywordEscape(a.Member) %>"/> should be serialized; otherwise, <c>false</c>.</returns>
        <%= GeneratedCodeAttribute %>
        Public Function ShouldSerialize<%= a.Member %>() As Boolean
            Return <%= a.Storage %>.HasLoadedOrAssignedValues
        End Function
<% End If 'IncludeXmlSerialization %>

        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        Private Sub On<%= a.Member %>Add(ByVal entity As <%= VBKeywordEscape(a.Type) %>)
            SendPropertyChanging(Nothing)
            entity.<%= info.OtherAssociation.Member %> = Me
            SendPropertyChanged(Nothing)
        End Sub

        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        Private Sub On<%= a.Member %>Remove(ByVal entity As <%= VBKeywordEscape(a.Type) %>)
            SendPropertyChanging(Nothing)
            entity.<%= info.OtherAssociation.Member %> = Nothing
            SendPropertyChanged(Nothing)
        End Sub

<% If IncludeManyToMany AndAlso info.OtherType.IsManyToMany() Then

        Dim manyMany As ManyToManyInfo = GetManyToManyInfo(info.OtherType)
        If manyMany.Skip OrElse manyMany.RightType Is Nothing OrElse manyMany.LeftType Is Nothing Then
            Continue For
        End If

        Dim memberName As String = StringUtil.ToCamelCase(manyMany.PropertyName)
%>

        <%= GeneratedCodeAttribute %>
        Private _<%=memberName%> As System.Data.Linq.EntitySet(Of <%=VBKeywordEscape(manyMany.RightType.Name)%>)

        ''' <summary>
        ''' Gets or sets the Many To Many <%=manyMany.PropertyName%> list.
        ''' </summary>
        ''' <value>The <%=manyMany.PropertyName%> list.</value>
        <%= GeneratedCodeAttribute %>
        Public Property <%=manyMany.PropertyName%>() As System.Data.Linq.EntitySet(Of <%=VBKeywordEscape(manyMany.RightType.Name)%>)

            Get
<% If IncludeDataContract Then %>
                If (serializing) Then
                    Return Nothing
                End If
<% End If %>

                If (_<%=memberName%> Is Nothing) Then

                    _<%=memberName%> = New System.Data.Linq.EntitySet(Of <%=VBKeywordEscape(manyMany.RightType.Name)%>)(AddressOf On<%=manyMany.PropertyName%>Add, AddressOf On<%=manyMany.PropertyName%>Remove)
                    _<%=memberName%>.SetSource(<%=a.Member %>.Select(Function(c) c.<%=manyMany.JoinRightAssociation.Member%>))
                End If
                Return _<%=memberName%>
            End Get
            Set(ByVal value As System.Data.Linq.EntitySet(Of <%=VBKeywordEscape(manyMany.RightType.Name)%>))

                _<%=memberName%>.Assign(value)
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        Private Sub On<%=manyMany.PropertyName%>Add(ByVal entity As <%=VBKeywordEscape(manyMany.RightType.Name)%>)

            SendPropertyChanging(Nothing)
            <%= a.Member %>.Add(New <%=manyMany.JoinType.Name%> With {.<%=manyMany.JoinLeftAssociation.Member%> = Me, .<%=manyMany.JoinRightAssociation.Member%> = entity})
            SendPropertyChanged(Nothing)
        End Sub

        <System.Diagnostics.DebuggerNonUserCode()> _
        Private Sub On<%=manyMany.PropertyName%>Remove(ByVal entity As <%=VBKeywordEscape(manyMany.RightType.Name)%>)

            SendPropertyChanging(Nothing)
            Dim <%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%> = <%= a.Member %>.FirstOrDefault(<%= BuildManyToManyRemoveLamba(manyMany) %>)
            <%= a.Member %>.Remove(<%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%>)
            SendPropertyChanged(Nothing)
        End Sub

<% End If ' many to many%>
<% Next ' foreach Association%>
#End Region

#Region "Extensibility Method Definitions"

        ''' <summary>Called by the Shared constructor to add shared rules.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Shared Sub AddSharedRules()
        End Sub
        ''' <summary>Called when this instance is loaded.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub OnLoaded()
        End Sub
        ''' <summary>Called when this instance is being saved.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        ''' <summary>Called when this instance is created.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub OnCreated()
        End Sub
<% For Each c As Column in Type.Columns
    Dim dataType As String = VBAlias(c.Type)
    Dim enumType As LinqToSqlShared.Generator.DbmlEnum.Enum = Nothing

    If EnumDatabase IsNot Nothing Then
        enumType = EnumDatabase.Enums.FirstOrDefault(Function(e) e.Name = c.Type)
    End If

    Dim isNullable As Boolean = c.CanBeNull.HasValue AndAlso c.CanBeNull.Value AndAlso (CommonUtility.IsNullableType(c.Type) OrElse enumType IsNot Nothing)

    If (isNullable) Then
        dataType = String.Format("Nullable(Of {0})", dataType)
    End If
%>
        ''' <summary>Called when <see cref="<%= VBKeywordEscape(c.Member) %>"/> is changing.</summary>
        ''' <param name="value">The new value.</param>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub On<%= c.Member %>Changing(ByVal value As <%= dataType %>)
        End Sub
        ''' <summary>Called after <see cref="<%= VBKeywordEscape(c.Member) %>"/> has Changed.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub On<%= c.Member %>Changed()
        End Sub
<% Next ' foreach %>
<% For Each a As Association in Type.EntityRefAssociations %>
        ''' <summary>Called when <see cref="<%= VBKeywordEscape(a.Member) %>"/> is changing.</summary>
        ''' <param name="value">The new value.</param>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub On<%= a.Member %>Changing(ByVal value As <%= a.Type %>)
        End Sub
        ''' <summary>Called after <see cref="<%= VBKeywordEscape(a.Member) %>"/> has Changed.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub On<%= a.Member %>Changed()
        End Sub
<% Next ' foreach Association%>

#End Region

<%If IncludeDataContract Then%>
#Region "Serialization"

        <%= GeneratedCodeAttribute %>
        Private serializing As Boolean

        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        <%= GeneratedCodeAttribute %>
        Public Sub OnSerializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = True
        End Sub

        ''' <summary>
        ''' Called when serialized.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerialized(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        <%= GeneratedCodeAttribute %>
        Public Sub OnSerialized(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = False
        End Sub

        ''' <summary>
        ''' Called when deserializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnDeserializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        <%= GeneratedCodeAttribute %>
        Public Sub OnDeserializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            Initialize()
        End Sub

        ''' <summary>
        ''' Deserializes an instance of <see cref="<%= VBKeywordEscape(Type.Name) %>"/> from XML.
        ''' </summary>
        ''' <param name="xml">The XML string representing a <see cref="<%= VBKeywordEscape(Type.Name) %>"/> instance.</param>
        ''' <returns>An instance of <see cref="<%= VBKeywordEscape(Type.Name) %>"/> that is deserialized from the XML string.</returns>
        <%= GeneratedCodeAttribute %>
        Public Shared Function FromXml(ByVal xml As String) As <%= VBKeywordEscape(Type.Name) %>
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(<%= VBKeywordEscape(Type.Name) %>))

            Using sr = New System.IO.StringReader(xml)
                Using reader = System.Xml.XmlReader.Create(sr)
                    Return TryCast(deserializer.ReadObject(reader), <%= VBKeywordEscape(Type.Name) %>)
                End Using
            End Using
        End Function

        ''' <summary>
        ''' Deserializes an instance of <see cref="<%= VBKeywordEscape(Type.Name) %>"/>.
        ''' </summary>
        ''' <param name="buffer">The byte array representing a <see cref="<%= VBKeywordEscape(Type.Name) %>"/> instance.</param>
        ''' <returns>An instance of <see cref="<%= VBKeywordEscape(Type.Name) %>"/> that is deserialized from the byte array.</returns>
        <%= GeneratedCodeAttribute %>
        Public Shared Function FromBinary(ByVal buffer As Byte()) As <%= VBKeywordEscape(Type.Name) %>
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(<%= VBKeywordEscape(Type.Name) %>))

            Using ms = New System.IO.MemoryStream(buffer)
                Using reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max)
                    Return TryCast(deserializer.ReadObject(reader), <%= VBKeywordEscape(Type.Name) %>)
                End Using
            End Using
        End Function
#End Region
<% If Not (String.IsNullOrEmpty(EntityBase)) Then %>

#Region "Clone"
        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        <%= GeneratedCodeAttribute %>
        Private Function ICloneable_Clone() As Object Implements ICloneable.Clone
            Dim serializer As New System.Runtime.Serialization.DataContractSerializer([GetType]())
            Using ms As New System.IO.MemoryStream()
                serializer.WriteObject(ms, Me)
                ms.Position = 0
                Return serializer.ReadObject(ms)
            End Using
        End Function

        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        ''' <remarks>
        ''' Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        ''' </remarks>
        <%= GeneratedCodeAttribute %>
        Public Function Clone() As <%= VBKeywordEscape(Type.Name) %>
            Return DirectCast(DirectCast(Me, ICloneable).Clone(), <%= VBKeywordEscape(Type.Name) %>)
        End Function
#End Region
<% End If 'EntityBase %>
<% End If 'IncludeDataContract %>
<% If Not (String.IsNullOrEmpty(EntityBase)) Then %>

#Region "Detach Methods"
        ''' <summary>
        ''' Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        ''' </remarks>
        <%= GeneratedCodeAttribute %>
        Public Overrides Sub Detach()

            If (Not IsAttached()) Then
                Return
            End If

            MyBase.Detach()
<%  For Each a As Association In Type.EntityRefAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>
            <%=a.Storage%> = Detach(<%=a.Storage%>)
<%  Next
    For Each a As Association In Type.EntitySetAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>
            <%=a.Storage%> = Detach(<%=a.Storage%>, AddressOf On<%=a.Member%>Add, AddressOf On<%=a.Member%>Remove)
<%  Next %>
<% For Each c As Column In Type.Columns %>
<% If c.IsDelayLoaded.Value = true Then %>
            <%= c.Storage %> = Detach(<%=c.Storage%>)
<% End If ' IsDelayLoaded%>
<% Next ' For Each Column%>
        End Sub
#End Region
  <% End If %>
    End Class
End Namespace
<script runat="template">
Private selfAssociated As Boolean = False
Private DataMemberCount As Integer = 0
Private manyToManyNames As New List(Of String)()

Public Function BuildManyToManyRemoveLamba(ByVal info As ManyToManyInfo) As String
    Dim sb As New StringBuilder()
    sb.Append("Function(c) ")

    Dim leftThisKey As String() = info.JoinLeftAssociation.GetThisKey()
    Dim leftKey As String() = Dbml.ParseKeyField(info.LeftKey)

    For i As Integer = 0 To leftThisKey.Length - 1
        If i > 0 Then
            sb.Append(" AndAlso ")
        End If

        sb.AppendFormat("c.{0} = {1}", leftThisKey(i), leftKey(i))
    Next

    Dim rightThisKey As String() = info.JoinRightAssociation.GetThisKey()
    Dim rightKey As String() = Dbml.ParseKeyField(info.RightKey)

    For i As Integer = 0 To rightThisKey.Length - 1
        sb.Append(" AndAlso ")
        sb.AppendFormat("c.{0} = entity.{1}", rightThisKey(i), rightKey(i))
    Next

    Return sb.ToString()
End Function

Public  Function ApplyAssociationSuffix(associationName As String) As String
    If AssociationNamingSuffix = AssociationNamingEnum.ListSuffix Then
        Return associationName + "List"
    Else
        Return StringUtil.ToPlural(associationName)
    End If
End Function

Private Shared ReadOnly _sizeRegex As New Regex("(?<Size>\d+)", RegexOptions.Compiled)

Public Function GetSize(s As String) As Integer
	Dim size As Integer = 0

	Dim m As Match = _sizeRegex.Match(s)
	If Not m.Success Then
		Return size
	End If

	Dim temp As String = m.Groups("Size").Value
	Integer.TryParse(temp, size)
	Return size
End Function
Public Function GetColumnType(ByVal column As Column) As String
    Dim dataType As String = column.Type

    If column.CanBeNull.value = True AndAlso CommonUtility.IsNullableType(dataType) Then
        dataType = String.Format("Nullable(Of {0})", VBAlias(dataType))
    Else
        dataType = VBAlias(dataType)
    End If

    Return dataType
End Function

Public Function GetClassAttributes() As String

    Dim s As New StringBuilder()
    If Not String.IsNullOrEmpty(TableName) Then
        s.AppendFormat("<System.Data.Linq.Mapping.Table(Name:=""{0}"")> _", TableName)
        AppendInheritanceAttribute(Me.Type, s)
    End If

    Return s.ToString()
End Function

Private Sub AppendInheritanceAttribute(ByVal t As LinqToSqlShared.DbmlObjectModel.Type, ByVal s As StringBuilder)
    If Not String.IsNullOrEmpty(t.InheritanceCode) Then
        s.AppendLine()
        If t.IsInheritanceDefault Then
            s.AppendFormat("    <System.Data.Linq.Mapping.InheritanceMapping(Code:=""{0}"", Type:=GetType({1}), IsDefault:=True)> _", t.InheritanceCode, t.Name)

        Else
            s.AppendFormat("    <System.Data.Linq.Mapping.InheritanceMapping(Code:=""{0}"", Type:=GetType({1}))> _", t.InheritanceCode, t.Name)
        End If
    End If

    For Each d As LinqToSqlShared.DbmlObjectModel.Type In t.SubTypes
        AppendInheritanceAttribute(d, s)
    Next
End Sub

Public Function GetAssociationInfo(ByVal a As Association) As AssociationInfo
    Dim info As New AssociationInfo()
    info.OtherType = Database.GetTypeByName(a.Type)
    If info.OtherType Is Nothing Then
        Throw New Exception("Invaild Type for Association: " + a.Name)
    End If

    info.HasOtherAssociation = info.OtherType.Associations.Contains(a.ToOtherKey())
    If info.HasOtherAssociation Then
        info.OtherAssociation = info.OtherType.Associations(a.ToOtherKey())
    Else
        Return info
    End If
    ' no more work needed
    If String.IsNullOrEmpty(a.OtherKey) Then
        info.OtherColumns = New List(Of Column)(info.OtherType.PrimaryKeyColumns)
    Else
        Dim members As String() = a.OtherKey.Split(New Char() {","C})
        info.OtherColumns = info.OtherType.GetColumnsByMembers(members)
    End If

    If info.OtherColumns Is Nothing OrElse info.OtherColumns.Count = 0 Then
        Throw New Exception("Invaild OtherKey for Association: " + a.Name)
    End If

    If String.IsNullOrEmpty(a.ThisKey) Then
        info.AssignColumns = New List(Of Column)(Type.PrimaryKeyColumns)
    Else
        Dim members As String() = a.ThisKey.Split(New Char() {","C})
        info.AssignColumns = Type.GetColumnsByMembers(members)
    End If

    If info.AssignColumns Is Nothing OrElse info.AssignColumns.Count = 0 Then
        Throw New Exception("Invaild ThisKey for Association: " + a.Name)
    End If

    info.IsOneToOne = (a.IsForeignKey.value = True AndAlso a.Cardinality.value = Cardinality.One AndAlso info.OtherAssociation.IsForeignKey.value = False AndAlso info.OtherAssociation.Cardinality.value = Cardinality.One) OrElse (a.IsForeignKey.Value = False AndAlso a.Cardinality.value = Cardinality.One AndAlso info.OtherAssociation.IsForeignKey.value = True AndAlso info.OtherAssociation.Cardinality.value = Cardinality.One)

    If info.IsOneToOne Then
        info.AddSyntax = " = Me"
        info.RemoveSyntax = " = Nothing"
    Else
        info.AddSyntax = ".Add(Me)"
        info.RemoveSyntax = ".Remove(Me)"
    End If

    Return info
End Function

Public Function CreateAttributes(ByVal c As Column) As String
    Dim s As New StringBuilder()
    s.Append("<System.Data.Linq.Mapping.Column(")
    s.AppendFormat("Name:=""{0}""", c.Name)
    s.AppendFormat(", Storage:=""{0}""", c.Storage)
    s.AppendFormat(", DbType:=""{0}""", c.DbType)
    If c.IsPrimaryKey Then
        s.Append(", IsPrimaryKey:=True")
    End If
    If c.IsDbGenerated Then
        s.Append(", IsDbGenerated:=True")
    End If
    If c.IsVersion Then
        s.Append(", IsVersion:=True")
    End If
    If c.IsDiscriminator Then
        s.Append(", IsDiscriminator:=True")
    End If
    If c.CanBeNull.Value = False Then
        s.Append(", CanBeNull:=False")
    End If
    If c.UpdateCheck.Value <> UpdateCheck.Always Then
        s.AppendFormat(", UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.{0}", c.UpdateCheck.ToString())
    End If
    If Not String.IsNullOrEmpty(c.Expression) Then
        s.AppendFormat(", Expression:=""{0}""", c.Expression)
    End If
    s.Append(")> _")

   Dim prefix As String = [String].Concat(Environment.NewLine, "        ")

   If c.Type.Contains("String") Then
      Dim size As Integer = LinqToSqlShared.Generator.CommonUtility.GetColumnSize(c.DbType)
      If 0 < size AndAlso size < 8000 Then
         s.AppendFormat("{0}<System.ComponentModel.DataAnnotations.StringLength({1})> _", prefix, size)
      End If
   End If

    Return s.ToString()
End Function

Public Function CreateAttribute(ByVal a As Association) As String
    Dim s As New StringBuilder()
    s.Append("<System.Data.Linq.Mapping.Association(")
    s.AppendFormat("Name:=""{0}""", a.Name)
    s.AppendFormat(", Storage:=""{0}""", a.Storage)
    If Not String.IsNullOrEmpty(a.ThisKey) Then
        s.AppendFormat(", ThisKey:=""{0}""", a.ThisKey)
    End If
    If Not String.IsNullOrEmpty(a.OtherKey) Then
        s.AppendFormat(", OtherKey:=""{0}""", a.OtherKey)
    End If
    If a.Cardinality.Value = Cardinality.One AndAlso a.IsForeignKey <> True Then
        s.Append(", IsUnique:=true")
    End If
    If a.IsForeignKey Then
        s.Append(", IsForeignKey:=true")
    End If
    If a.DeleteOnNull Then
        s.Append(", DeleteOnNull:=true")
    End If
    If Not String.IsNullOrEmpty(a.DeleteRule) Then
        s.AppendFormat(", DeleteRule:=""{0}""", a.DeleteRule)
    End If

    s.Append(")> _")

    Return s.ToString()
End Function

Public Function GetValueCompare(ByVal c as Column, ByVal storage as String, ByVal valueConvert as String, ByVal isNullable as Boolean) As String
    Dim s As New StringBuilder()
    If c.Type = "System.String" Then
        s.AppendFormat("(String.Equals(Me.{0}, {1}) = False)", storage, valueConvert)
    Else If isNullable Then
        s.AppendFormat("(Me.{0}.Equals({1}) = False)", storage, valueConvert)
    Else If CommonUtility.IsNullableType(c.Type) Then
        s.AppendFormat("((Me.{0} = {1}) = False)", storage, valueConvert)
    Else
        s.AppendFormat("(Object.Equals(Me.{0}, {1}) = False)", storage, valueConvert)
    End If

    Return s.ToString()
End Function

Public Structure AssociationInfo

    Public HasOtherAssociation As Boolean
    Public OtherAssociation As Association

    Public OtherType As LinqToSqlShared.DbmlObjectModel.Type

    Public OtherColumns As List(Of Column)
    Public AssignColumns As List(Of Column)

    Public IsOneToOne As Boolean
    Public AddSyntax As String
    Public RemoveSyntax As String
End Structure

Public Function GetManyToManyInfo(ByVal modelType As LinqToSqlShared.DbmlObjectModel.Type) As ManyToManyInfo

    Dim leftKeyPicked As Boolean = False

    Dim manyMany As New ManyToManyInfo()
    manyMany.LeftType = Type
    manyMany.JoinType = modelType
    manyMany.LeftKey = Dbml.BuildKeyField(manyMany.LeftType.PrimaryKeyColumns)

    For Each association As Association In modelType.EntityRefAssociations
        If association.Type <> Type.Name OrElse leftKeyPicked Then
            manyMany.RightType = Database.GetTypeByName(association.Type)
            manyMany.JoinRightAssociation = association
            manyMany.RightKey = Dbml.BuildKeyField(manyMany.RightType.PrimaryKeyColumns)
        Else
            manyMany.JoinLeftAssociation = association
            leftKeyPicked = True
        End If
    Next

    'For those who think a Self-Associating Many To Many Table is a good idea
    If manyMany.LeftType Is manyMany.RightType Then

        If selfAssociated Then
            manyMany.Skip = True
            Return manyMany
        End If

        manyMany.PropertyName = manyMany.RightType.Name + "By" + manyMany.JoinRightAssociation.ThisKey
        selfAssociated = True
    Else
        manyMany.PropertyName = manyMany.RightType.Name
    End If

    manyMany.PropertyName = ApplyAssociationSuffix(manyMany.PropertyName)

    Dim original As String = manyMany.PropertyName
    Dim count As Integer = 0

    While Me.Type.IsUniqueMember(manyMany.PropertyName) = False OrElse manyToManyNames.Contains(manyMany.PropertyName)
        count += 1
        manyMany.PropertyName = original + count.ToString()
    End While

    manyToManyNames.Add(manyMany.PropertyName)
    Return manyMany
End Function

Public Structure ManyToManyInfo
    Public LeftType As LinqToSqlShared.DbmlObjectModel.Type
    Public RightType As LinqToSqlShared.DbmlObjectModel.Type
    Public JoinType As LinqToSqlShared.DbmlObjectModel.Type
    Public RightKey As String
    Public LeftKey As String
    Public JoinRightAssociation As Association
    Public JoinLeftAssociation As Association
    Public PropertyName As String
    Public Skip As Boolean
End Structure

Private Shared ReadOnly GeneratedCodeAttribute As String = String.Format("<System.CodeDom.Compiler.GeneratedCode(""CodeSmith"", ""{0}"")> _", GetType(CodeTemplate).Assembly.GetName().Version.ToString())
</script>