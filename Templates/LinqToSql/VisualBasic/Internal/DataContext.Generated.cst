<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="False" Encoding="UTF-8"
    Description="Linq to Sql DataContext Class." CompilerVersion="v3.5" %>

<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database"
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False"
    Description="Database schema instance. Must be set by parent template" %>

<%@ Property Category="2.Class" Name="Framework"
    Type="LinqToSqlShared.Generator.FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Which version of the .Net Framework is being generated for." %>

<%@ Property Category="2.Class" Name="IncludeDataServices"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include ADO.Net DataServices attributes and impliment IUpdatable on DataContext." %>

<%@ Property Category="2.Class" Name="IncludeDataRules"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include CodeSmith.Data rules." %>

<%@ Property Category="2.Class" Name="DefaultConnectionString"
    Type="System.String" Optional="True"
    Description="Default Connection String Name for DatabaseContext." %>

<%@ Property Category="2.Class" Name="AuditingEnabled"
    Type="System.Boolean" Default="False" Optional="True"
    Description="Flag indicating if the default state of the AuditingEnabled property." %>

<%@ Map Name="VBKeywordEscape"
    Src="VBKeywordEscape.csmap" Reverse="False"
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="VBAlias"
    Src="System-VBAlias.csmap" Reverse="False"
    Description="Convert system data types to c# alias" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System

Namespace <%= Database.ContextNamespace %>
    ''' <summary>
    ''' The <see cref="System.Data.Linq.DataContext"/>  class for the <%= Database.Name %> database.
    ''' </summary>
    Partial <%= StringUtil.ToPascalCase(Naming.GetModifier(Database.AccessModifier)) %> Class <%= Database.Class %>
        Inherits CodeSmith.Data.Linq.DataContextBase
<% If (IncludeIUpdatable) Then %>
        Implements System.Data.Services.IUpdatable
<% End If %>

        <%= GeneratedCodeAttribute %>
        Public Shared ReadOnly MappingCache As System.Data.Linq.Mapping.MappingSource = New System.Data.Linq.Mapping.AttributeMappingSource()

        #Region "ConnectionString"
        <%= GeneratedCodeAttribute %>
        Private Const CONNECTION_NAME As String = "<%= IIF(DefaultConnectionString IS NOTHING, Database.Connection.SettingsPropertyName, DefaultConnectionString) %>"
        <%= GeneratedCodeAttribute %>
        Private Shared _connectionString As String
        <%= GeneratedCodeAttribute %>
        Private Shared _connectionLock As New Object()

        ''' <summary>The application connection string read from web.config or app.config</summary>
        ''' <example>
        ''' Add the following key to the "connectionStrings" section of your config:
        ''' <code><![CDATA[
        ''' <configuration>
        '''     <connectionStrings>
        '''         <add name="<%= Database.Connection.SettingsPropertyName %>"
        '''             connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
        '''             providerName="System.Data.SqlClient" />
        '''     </connectionStrings>
        ''' </configuration>
        ''' ]]></code>
        ''' </example>
        <%= GeneratedCodeAttribute %>
        Public Shared ReadOnly Property ConnectionString() As String

            Get
                If _connectionString Is Nothing Then
                    SyncLock _connectionLock
                    If _connectionString Is Nothing Then
                        _connectionString = GetDefaultConnectionString()
                    End If
                    End SyncLock
                End If
                Return _connectionString
            End Get
        End Property

        <%= GeneratedCodeAttribute %>
        Private Shared Function GetDefaultConnectionString() As String
            Dim settings As System.Configuration.ConnectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings(CONNECTION_NAME)
            If settings Is Nothing Then
                Dim message As String = String.Format("Could not find the connection string '{0}' in the configuration file.  " + "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME)
                Throw New System.Configuration.ConfigurationErrorsException(message)
            End If
            Return settings.ConnectionString
        End Function
        #End Region

        #Region "Constructors"

        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(Database.AccessModifier)) %> Sub New()
            MyBase.New(ConnectionString, MappingCache)
            OnCreated()
        End Sub


        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The connection string.</param>
        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(Database.AccessModifier)) %> Sub New(ByVal connection As String)
            MyBase.New(connection, MappingCache)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The database connection.</param>
        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(Database.AccessModifier)) %> Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, MappingCache)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The connection string.</param>
        ''' <param name="mappingSource">The mapping source.</param>
        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(Database.AccessModifier)) %> Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The database connection.</param>
        ''' <param name="mappingSource">The mapping source.</param>
        <System.Diagnostics.DebuggerNonUserCode()> _
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(Database.AccessModifier)) %> Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub
        #End Region

        #Region "Tables"
<% For Each table As Table In Database.Tables  %>
        ''' <summary>Represents the <%= table.Name %> table in the underlying database.</summary>
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(table.AccessModifier, table.Modifier)) %> ReadOnly Property <%= VBKeywordEscape(GetName(table)) %> As System.Data.Linq.Table(Of <%= Database.EntityNamespace %>.<%= table.Type.Name %>)
            Get
                Return GetTable(Of <%= Database.EntityNamespace %>.<%= table.Type.Name %>)()
            End Get
        End Property

<% Next %>
        #End Region

        #region "Functions"
<% For Each f As [Function] in Database.Functions %>
        ''' <summary>Method that is mapped to the <%= f.Name %> database procedure.</summary>
        ''' <returns></returns>
        <%= CreateAttribute(f) %>
        <%= GeneratedCodeAttribute %>
        <%= StringUtil.ToPascalCase(Naming.GetModifier(f.AccessModifier, f.Modifier)) %> Function <%= f.Method %>(<%= GetArguments(f) %>) As <%= GetReturnType(f, True) %>
            Dim methodInfo = DirectCast(System.Reflection.MethodInfo.GetCurrentMethod(), System.Reflection.MethodInfo)
<% If (IsTableFunction(f)) Then %>
            Dim result = Me.CreateMethodCallQuery(Of <%= GetResultName(f) %>)(Me, methodInfo<%= GetArgumentNames(f) %>)
<% Else %>
            Dim result As System.Data.Linq.IExecuteResult = Me.ExecuteMethodCall(Me, methodInfo<%= GetArgumentNames(f) %>)
<% End If %>
<%
Dim x As Integer
For x = 0 TO f.Parameters.Count - 1
    Dim p As Parameter = f.Parameters(x)


    If (p.Direction.Value = LinqToSqlShared.DbmlObjectModel.ParameterDirection.In) Then
        Continue For
    End If

    'set out params
    Response.WriteLine("            {0} = (DirectCast(result.GetParameterValue({2}),{1}))", VBKeywordEscape(p.ParameterName), GetParameterType(p), x)
Next
%>
<% If (IsTableFunction(f)) Then %>
            Return result
<% Else %>
            Return (DirectCast((result.ReturnValue),<%= GetReturnType(f) %>))
<% End If %>
        End Function

<% Next %>
        #End Region

        #Region "Extensibility Method Definitions"
        ''' <summary>Called after this instance is created.</summary>
        Partial Private Sub OnCreated()
        End Sub

<% For Each table As Table in Database.Tables %>
        ''' <summary>Called before a <%= table.Type.Name %> is inserted.</summary>
        ''' <param name="instance">The instance.</param>
        <%= GeneratedCodeAttribute %>
<% If (table.InsertFunction IsNot Nothing) Then %>
        Private Sub Insert<%= table.Type.Name %>(ByVal instance As <%= Database.EntityNamespace %>.<%= table.Type.Name %>)
<% If (table.InsertFunction.Arguments.Any(Function(a) a.Version = LinqToSqlShared.DbmlObjectModel.Version.Original)) %>
            Dim original As <%= Database.EntityNamespace %>.<%= table.Type.Name %> = <%= table.Member %>.GetOriginalEntityState(instance)
<% End If %>
<%= GetTableFunctionCall(table.InsertFunction) %>
        End Sub
<% Else %>
        Partial Private Sub Insert<%= table.Type.Name %>(ByVal instance As <%= Database.EntityNamespace %>.<%= table.Type.Name %>)
        End Sub
<% End If %>

        ''' <summary>Called before a <see cref="<%= table.Type.Name %>"/> is updated.</summary>
        ''' <param name="instance">The instance.</param>
        <%= GeneratedCodeAttribute %>
<% If (table.UpdateFunction IsNot Nothing) Then %>
        Private Sub Update<%= table.Type.Name %>(ByVal instance As <%= Database.EntityNamespace %>.<%= table.Type.Name %>)
<% If (table.UpdateFunction.Arguments.Any(Function(a) a.Version = LinqToSqlShared.DbmlObjectModel.Version.Original)) %>
            Dim original As <%= Database.EntityNamespace %>.<%= table.Type.Name %> = <%= table.Member %>.GetOriginalEntityState(instance)
<% End If %>
<%= GetTableFunctionCall(table.UpdateFunction) %>
        End Sub
<% Else %>
        Partial Private Sub Update<%= table.Type.Name %>(ByVal instance As <%= Database.EntityNamespace %>.<%= table.Type.Name %>)
        End Sub
<% End If %>

        ''' <summary>Called before a <see cref="<%= table.Type.Name %>"/> is deleted.</summary>
        ''' <param name="instance">The instance.</param>
        <%= GeneratedCodeAttribute %>
<% If (table.DeleteFunction IsNot Nothing) Then %>
        Private Sub Delete<%= table.Type.Name %>(ByVal instance As <%= Database.EntityNamespace %>.<%= table.Type.Name %>)
<% If (table.DeleteFunction.Arguments.Any(Function(a) a.Version = LinqToSqlShared.DbmlObjectModel.Version.Original)) %>
            Dim original As <%= Database.EntityNamespace %>.<%= table.Type.Name %> = <%= table.Member %>.GetOriginalEntityState(instance)
<% End If %>
<%= GetTableFunctionCall(table.DeleteFunction) %>
        End Sub
<% Else %>
        Partial Private Sub Delete<%= table.Type.Name %>(ByVal instance As <%= Database.EntityNamespace %>.<%= table.Type.Name %>)
        End Sub
<% End If %>
<% Next %>
        #End Region

<% If (IncludeIUpdatable) Then %>
        #Region "IUpdatable Members"
        ''' <summary>
        ''' Adds the specified value to the collection.
        ''' </summary>
        ''' <param name="targetResource">Target object that defines the property.</param>
        ''' <param name="propertyName">The name of the collection property to which the resource should be added..</param>
        ''' <param name="resourceToBeAdded">The opaque object representing the resource to be added.</param>
        <%= GeneratedCodeAttribute %>
        Private Sub AddReferenceToCollection(ByVal targetResource As Object, ByVal propertyName As String, ByVal resourceToBeAdded As Object) Implements System.Data.Services.IUpdatable.AddReferenceToCollection
            Dim t = targetResource.[GetType]()

            Dim collectionProperty = GetPropertyInfoForType(t, propertyName, False)
            Dim collection = TryCast(collectionProperty.GetValue(targetResource, Nothing), System.Collections.IList)
            If collection Is Nothing Then
                Exit Sub
            End If

            collection.Add(resourceToBeAdded)
        End Sub

        ''' <summary>
        ''' Cancels a change to the data.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Private Sub ClearChanges() Implements System.Data.Services.IUpdatable.ClearChanges
            Dim mi = [GetType]().GetMethod("ClearCache", System.Reflection.BindingFlags.Instance Or System.Reflection.BindingFlags.NonPublic Or System.Reflection.BindingFlags.InvokeMethod)

            If mi IsNot Nothing Then
                mi.Invoke(Me, Nothing)
            End If
        End Sub

        ''' <summary>
        ''' Creates the resource of the specified type and that belongs to the specified container.
        ''' </summary>
        ''' <param name="containerName">The name of the entity set to which the resource belongs.</param>
        ''' <param name="fullTypeName">The full namespace-qualified type name of the resource.</param>
        ''' <returns>
        ''' The object representing a resource of specified type and belonging to the specified container.
        ''' </returns>
        <%= GeneratedCodeAttribute %>
        Private Function CreateResource(ByVal containerName As String, ByVal fullTypeName As String) As Object Implements System.Data.Services.IUpdatable.CreateResource
            Dim t = Type.[GetType](fullTypeName)
            Dim table = GetTableForType(t)

            Dim value As Object = Construct(t)
            table.InsertOnSubmit(value)

            Return (value)
        End Function

        ''' <summary>
        ''' Deletes the specified resource.
        ''' </summary>
        ''' <param name="targetResource">The resource to be deleted.</param>
        <%= GeneratedCodeAttribute %>
        Private Sub DeleteResource(ByVal targetResource As Object) Implements System.Data.Services.IUpdatable.DeleteResource
            Dim t = targetResource.[GetType]()
            Dim table = GetTableForType(t)
            table.DeleteOnSubmit(targetResource)
        End Sub

        ''' <summary>
        ''' Gets the resource of the specified type identified by a query and type name.
        ''' </summary>
        ''' <param name="query">Language integratee query(LINQ) pointing to a particular resource.</param>
        ''' <param name="fullTypeName">The fully qualified type name of resource.</param>
        ''' <returns>
        ''' An opaque object representing a resource of the specified type, referenced by the specified query.
        ''' </returns>
        <%= GeneratedCodeAttribute %>
        Private Function GetResource(ByVal query As System.Linq.IQueryable, ByVal fullTypeName As String) As Object Implements System.Data.Services.IUpdatable.GetResource
            Dim result As Object = Nothing

            For Each item As Object In query
                If result IsNot Nothing Then
                    Throw New System.Data.Services.DataServiceException("A single resource is expected")
                End If
                result = item
            Next

            If result Is Nothing Then
                Throw New System.Data.Services.DataServiceException(404, "Resource not found")
            End If

            If fullTypeName IsNot Nothing AndAlso result.[GetType]().FullName <> fullTypeName Then
                Throw New System.Data.Services.DataServiceException("Resource type mismatch")
            End If

            Return result
        End Function

        ''' <summary>
        ''' Gets the value of the specified property on the target object.
        ''' </summary>
        ''' <param name="targetResource">An opaque object that represents a resource.</param>
        ''' <param name="propertyName">The name of the property whose value needs to be retrieved.</param>
        ''' <returns></returns>
        <%= GeneratedCodeAttribute %>
        Private Function GetValue(ByVal targetResource As Object, ByVal propertyName As String) As Object Implements System.Data.Services.IUpdatable.GetValue
            Dim t = targetResource.[GetType]()
            Dim pi = GetPropertyInfoForType(t, propertyName, False)

            Dim value As Object

            Try
                value = pi.GetValue(targetResource, Nothing)
            Catch ex As Exception
                Throw New System.Data.Services.DataServiceException(String.Format("Failed getting property {0} value", propertyName), ex)
            End Try
            Return value
        End Function

        ''' <summary>
        ''' Removes the specified value from the collection.
        ''' </summary>
        ''' <param name="targetResource">The target object that defines the property.</param>
        ''' <param name="propertyName">The name of the property whose value needs to be updated.</param>
        ''' <param name="resourceToBeRemoved">The property value that needs to be removed.</param>
        <%= GeneratedCodeAttribute %>
        Private Sub RemoveReferenceFromCollection(ByVal targetResource As Object, ByVal propertyName As String, ByVal resourceToBeRemoved As Object) Implements System.Data.Services.IUpdatable.RemoveReferenceFromCollection
            Dim t = targetResource.[GetType]()

            Dim collectionProperty = GetPropertyInfoForType(t, propertyName, False)
            Dim collection = TryCast(collectionProperty.GetValue(targetResource, Nothing), System.Collections.IList)
            If collection Is Nothing Then
                Exit Sub
            End If
            ' throw error
            collection.Remove(resourceToBeRemoved)
        End Sub

        ''' <summary>
        ''' Returns the instance of the resource represented by the specified resource object.
        ''' </summary>
        ''' <param name="resource">The object representing the resource whose instance needs to be retrieved.</param>
        ''' <returns>
        ''' Returns the instance of the resource represented by the specified resource object.
        ''' </returns>
        <%= GeneratedCodeAttribute %>
        Private Function ResolveResource(ByVal resource As Object) As Object Implements System.Data.Services.IUpdatable.ResolveResource
            Return resource
        End Function

        ''' <summary>
        ''' Saves all the changes that have been made by using the <see cref="T:System.Data.Services.IUpdatable"/> APIs.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Private Sub SaveChanges() Implements System.Data.Services.IUpdatable.SaveChanges
            Try
                SubmitChanges()
            Catch ex As Exception
                Throw New System.Data.Services.DataServiceException("Error Saving Context. " & ex.GetBaseException().Message, ex)
            End Try
        End Sub

        ''' <summary>
        ''' Sets the value of the specified reference property on the target object.
        ''' </summary>
        ''' <param name="targetResource">The target object that defines the property.</param>
        ''' <param name="propertyName">The name of the property whose value needs to be updated.</param>
        ''' <param name="propertyValue">The property value to be updated.</param>
        <%= GeneratedCodeAttribute %>
        Private Sub SetReference(ByVal targetResource As Object, ByVal propertyName As String, ByVal propertyValue As Object) Implements System.Data.Services.IUpdatable.SetReference
            DirectCast(Me, System.Data.Services.IUpdatable).SetValue(targetResource, propertyName, propertyValue)
        End Sub

        ''' <summary>
        ''' Sets the value of the property with the specified name on the target resource to the specified property value.
        ''' </summary>
        ''' <param name="targetResource">The target object that defines the property.</param>
        ''' <param name="propertyName">The name of the property whose value needs to be updated.</param>
        ''' <param name="propertyValue">The property value for update.</param>
        <%= GeneratedCodeAttribute %>
        Private Sub SetValue(ByVal targetResource As Object, ByVal propertyName As String, ByVal propertyValue As Object) Implements System.Data.Services.IUpdatable.SetValue
            Dim t = targetResource.[GetType]()
            Dim pi = GetPropertyInfoForType(t, propertyName, True)

            Try
                pi.SetValue(targetResource, propertyValue, Nothing)
            Catch ex As Exception
                Throw New System.Data.Services.DataServiceException(String.Format("Error setting property {0} to {1}", propertyName, propertyValue), ex)
            End Try
        End Sub

        ''' <summary>
        ''' Updates the resource identified by the parameter <paramref name="resource"/>.
        ''' </summary>
        ''' <param name="resource">The resource to be updated.</param>
        ''' <returns></returns>
        <%= GeneratedCodeAttribute %>
        Private Function ResetResource(ByVal resource As Object) As Object Implements System.Data.Services.IUpdatable.ResetResource
            Dim t = resource.[GetType]()
            Dim table = GetTableForType(t)
            Return table.GetOriginalEntityState(resource)
        End Function

        <%= GeneratedCodeAttribute %>
        Private Function GetPropertyInfoForType(ByVal t As Type, ByVal propertyName As String, ByVal setter As Boolean) As System.Reflection.PropertyInfo
            Dim pi As System.Reflection.PropertyInfo

            Try
                Dim flags As System.Reflection.BindingFlags = System.Reflection.BindingFlags.[Public] Or System.Reflection.BindingFlags.Instance
                flags = flags Or If(setter, System.Reflection.BindingFlags.SetProperty, System.Reflection.BindingFlags.GetProperty)

                pi = t.GetProperty(propertyName, flags)

                If pi Is Nothing Then
                    Throw New System.Data.Services.DataServiceException(String.Format("Failed to find property {0} on type {1}", propertyName, t.Name))
                End If
            Catch exception As Exception
                Throw New System.Data.Services.DataServiceException(String.Format("Error finding property {0}", propertyName), exception)
            End Try

            Return (pi)
        End Function

        <%= GeneratedCodeAttribute %>
        Private Function GetTableForType(ByVal t As Type) As System.Data.Linq.ITable
            Dim table = GetTable(t)
            If table Is Nothing Then
                Throw New System.Data.Services.DataServiceException(String.Format("No table found for type {0}", t.Name))
            End If

            Return (table)
        End Function

        <%= GeneratedCodeAttribute %>
        Private Shared Function Construct(ByVal t As Type) As Object
            Dim ci = t.GetConstructor(Type.EmptyTypes)

            If ci Is Nothing Then
                Throw New System.Data.Services.DataServiceException(String.Format("No default ctor found for type {0}", t.Name))
            End If

            Return (ci.Invoke(Nothing))
        End Function

        #End Region
<% End If %>
<% If (IncludeDataRules) Then %>

        #Region "RuleManager"
        <%= GeneratedCodeAttribute %>
        Private ReadOnly _ruleManager As New CodeSmith.Data.Rules.RuleManager()

        ''' <summary>
        ''' Gets the current <see cref="CodeSmith.Data.Rules.RuleManager"/> for the <see cref="System.Data.Linq.DataContext"/>.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Public ReadOnly Property RuleManager() As CodeSmith.Data.Rules.RuleManager
            Get
                Return _ruleManager
            End Get
        End Property

        ''' <summary>
        ''' Sends changes made to retrieved objects to the underlying database.
        ''' </summary>
        ''' <param name="failureMode">How concurrency conflicts should be reported.</param>
        <%= GeneratedCodeAttribute %>
        Public Overloads Overrides Sub SubmitChanges(ByVal failureMode As System.Data.Linq.ConflictMode)
            Dim isValid As Boolean = RuleManager.Run(Me)

            If Not isValid Then
                Throw New CodeSmith.Data.Rules.BrokenRuleException(RuleManager.BrokenRules)
            End If

            PopulateLastAudit()
            BeforeSubmitChanges()
            MyBase.SubmitChanges(failureMode)
            RefreshLastAudit()
            AfterSubmitChanges()
        End Sub
        #End Region

        #Region "Auditing"
        ''' <summary>Called before the underlying DataContext.SubmitChanges is called.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub BeforeSubmitChanges()
        End Sub
        
	''' <summary>Called after the underlying DataContext.SubmitChanges is called.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub AfterSubmitChanges()
        End Sub

        <%= GeneratedCodeAttribute %>
        Private _auditingEnabled As Boolean = <%= AuditingEnabled.ToString() %>

        ''' <summary>
        ''' Gets or sets a value indicating whether auditing is enabled.
        ''' </summary>
        ''' <value><c>true</c> if auditing is enabled; otherwise, <c>false</c>.</value>
        <%= GeneratedCodeAttribute %>
        Public Property AuditingEnabled() As Boolean
            Get
                Return _auditingEnabled
            End Get
            Set(ByVal value As Boolean)
                _auditingEnabled = value
            End Set
        End Property

        <%= GeneratedCodeAttribute %>
        Private _lastAudit As CodeSmith.Data.Audit.AuditLog

        ''' <summary>
        ''' Gets the last <see cref="CodeSmith.Data.Audit.AuditLog"/>.
        ''' </summary>
        ''' <value>The last <see cref="CodeSmith.Data.Audit.AuditLog"/>.</value>
        ''' <remarks>
        ''' <see cref="AuditingEnabled"/> must be <c>true</c> for <see cref="LastAudit"/> to be populated.
        ''' </remarks>
        <%= GeneratedCodeAttribute %>
        Public ReadOnly Property LastAudit() As CodeSmith.Data.Audit.AuditLog
            Get
                Return _lastAudit
            End Get
        End Property

        ''' <summary>
        ''' Populates the <see cref="LastAudit"/> property with the <see cref="CodeSmith.Data.Audit.AuditLog"/>
        ''' of changes in this <see cref="System.Data.Linq.DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' <see cref="AuditingEnabled"/> must be <c>true</c> for <see cref="LastAudit"/> to be populated.
        ''' </remarks>
        <%= GeneratedCodeAttribute %>
        Public Sub PopulateLastAudit()
            If Not AuditingEnabled Then
                Exit Sub
            End If

            _lastAudit = CodeSmith.Data.Audit.AuditManager.CreateAuditLog(Me)
        End Sub
	
	''' <summary>
	''' Refresh the <see cref="AuditLog"/> values stored in the <see cref="LastAudit"/> after SubmitChanges call.
	''' </summary>
        <%= GeneratedCodeAttribute %>
	Protected Overridable Sub RefreshLastAudit()
		If _lastAudit IsNot Nothing Then
			CodeSmith.Data.Audit.AuditManager.Refresh(_lastAudit)
		End If
	End Sub
        #End Region
<% End If %>

        ''' <summary>
        ''' Sends changes made to retrieved objects to the underlying database.
        ''' </summary>
        ''' <param name="refreshMode">Defines how to handle optimistic concurrency conflicts.</param>
        <%= GeneratedCodeAttribute %>
        Public Overloads Sub SubmitChanges(ByVal refreshMode As System.Data.Linq.RefreshMode)
            Try
                SubmitChanges(System.Data.Linq.ConflictMode.ContinueOnConflict)
            Catch generatedExceptionName As System.Data.Linq.ChangeConflictException
                For Each occ In ChangeConflicts
                    occ.Resolve(refreshMode)
                Next

                SubmitChanges()
            End Try
        End Sub

    End Class
End Namespace
<script runat="template">
Public ReadOnly Property IncludeIUpdatable() As Boolean
    Get
        Return (Me.IncludeDataServices)
    End Get
End Property

Public Function IsTableFunction(ByVal f As [Function]) As Boolean
    Return f.IsComposable = True AndAlso f.Types.Count > 0
End Function

Public Function CreateAttribute(ByVal f As [Function]) As String
    Dim s As New StringBuilder()
    s.Append("<System.Data.Linq.Mapping.Function(")
    s.AppendFormat("Name:=""{0}""", f.Name)
    If f.IsComposable.Value = True Then
        s.Append(", IsComposable:=true")
    End If
    s.Append(")> _")

    If f.HasMultipleResults = True Then
	For Each t As LinqToSqlShared.DbmlObjectModel.Type In f.Types
            s.AppendFormat(vbCr & vbLf & "        <System.Data.Linq.Mapping.ResultType(GetType({0}.{1}))> _", Database.EntityNamespace, t.Name)
        Next
    End If

    Return s.ToString()
End Function
Public Function GetName(ByVal table As Table) As String
    Dim name As String = IIf(String.IsNullOrEmpty(table.Member),table.Type.Name,table.Member)
    Return name
End Function

Public Function GetReturnType(ByVal f As [Function]) As String
    Return GetReturnType(f, False)
End Function

Public Function GetReturnType(ByVal f As [Function], ByVal includeAttributes As Boolean) As String
    Dim s As New StringBuilder()

    If includeAttributes AndAlso f.Types.Count = 0 AndAlso f.[Return] IsNot Nothing Then
	    s.AppendFormat("<System.Data.Linq.Mapping.Parameter(DbType := ""{0}"")> ", f.[Return].DbType)
    End If

    If IsTableFunction(f) Then
        s.AppendFormat("System.Linq.IQueryable(Of {0})", GetResultName(f))
    ElseIf f.Types.Count = 0 Then
        s.Append(VBAlias(f.[Return].Type))
    ElseIf f.HasMultipleResults.Value = True Then
        s.Append("System.Data.Linq.IMultipleResults")
    Else
        s.AppendFormat("System.Data.Linq.ISingleResult(Of {0})", GetResultName(f))
    End If

    Return s.ToString()
End Function

Public Function GetResultName(ByVal f As [Function]) As String
    If f.Types.Count = 0 Then
        Return String.Empty
    End If

    Dim resultType As LinqToSqlShared.DbmlObjectModel.Type = f.Types(0)
    Return Database.EntityNamespace + "." + f.Types(0).Name
End Function

Public Function GetArguments(ByVal f As [Function]) As String
    Dim s As New StringBuilder()
    For x As Integer = 0 To f.Parameters.Count - 1
        Dim p As Parameter = f.Parameters(x)
        s.AppendLine(" _")
        s.AppendFormat("            <System.Data.Linq.Mapping.Parameter(Name:=""{0}"", DbType:=""{1}"")> ", p.Name, p.DbType)

        If p.Direction <> LinqToSqlShared.DbmlObjectModel.ParameterDirection.In then
            s.Append("ByRef")
        Else
            s.Append("ByVal")
        End If

        s.AppendFormat(" {1} As {0}", GetParameterType(p), VBKeywordEscape(p.ParameterName))

        If x < f.Parameters.Count - 1 Then
            s.Append(", ")
        End If
    Next

    Return s.ToString()
End Function


Public Function GetParameterType(ByVal p As Parameter) As String
    If CommonUtility.IsNullableType(p.Type) Then
        Return VBAlias(p.Type) + "?"
    Else
        Return VBAlias(p.Type)
    End If
End Function

Public Function GetArgumentNames(ByVal f As [Function]) As String
    Dim s As New StringBuilder()
    For x As Integer = 0 To f.Parameters.Count - 1

        If x < f.Parameters.Count Then
            s.Append(", ")
        End If

        Dim p As Parameter = f.Parameters(x)
        s.Append(VBKeywordEscape(p.ParameterName))
    Next

    Return s.ToString()
End Function

Public Function GetTableFunctionCall(tableFunction As TableFunction) As String
    Dim s1 As New StringBuilder()
    Dim s2 As New StringBuilder()
    Dim s3 As New StringBuilder()

    Dim f As [Function] = tableFunction.MappedFunction

    s2.AppendFormat("            {0}( _", f.Method)
    s2.AppendLine()
    For i As Integer = 0 To tableFunction.Arguments.Count - 1
        Dim a As TableFunctionParameter = tableFunction.Arguments(i)
        Dim p As Parameter = f.Parameters.First(Function(n) n.ParameterName = a.ParameterName)
        Dim t As String = GetParameterType(p)
        Dim isOut As Boolean = p.Direction <> LinqToSqlShared.DbmlObjectModel.ParameterDirection.In
        Dim isOriginal As Boolean = a.Version = LinqToSqlShared.DbmlObjectModel.Version.Original
        Dim version As String = If(isOriginal, "original", "instance")

        ' copy object to params
        If isOut Then
            s1.AppendFormat("            Dim p{1} As {0} = {2}.{3}", t, i, version, a.Member)
            s1.AppendLine()

            s2.AppendFormat("               ByRef p{0}", i)
        Else
            s2.AppendFormat("                {0}.{1}", version, a.Member)
        End If

        If i < tableFunction.Arguments.Count - 1 Then
            s2.Append(", _")
            s2.AppendLine()
        End If

        ' update object with out params
        If isOut Then
            If s3.Length = 0 Then
                s3.AppendLine()
            End If

            s3.AppendFormat("            instance.{0} = p{1}", a.Member, i)
            If CommonUtility.IsNullableType(p.Type) Then
                s3.Append(".GetValueOrDefault()")
            End If
            s3.AppendLine()
        End If
    Next
    
    s2.AppendLine(")")
    s1.AppendLine()
    
    Return s1.ToString() + s2.ToString() + s3.ToString()
End Function

Private Shared ReadOnly GeneratedCodeAttribute As String = String.Format("<System.CodeDom.Compiler.GeneratedCode(""CodeSmith"", ""{0}"")> _", GetType(CodeTemplate).Assembly.GetName().Version.ToString())

</script>
