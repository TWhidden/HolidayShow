<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Manager Class." CompilerVersion="v3.5" %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.vb" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>
    
<%@ Property Category="3.Manager" Name="ManagerNamespace" 
    Type="System.String" Default="" Optional="True" 
    Description="The namespace to use for the generated manager class files."%>

<%@ Property Category="3.Manager" Name="DataManager" 
    Type="Manager.DataManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="3.Manager" Name="MethodPrefix" 
    Type="System.String" Default="GetBy" Optional="True" 
    Description="The prefix of query method names." %>

<%@ Property Category="3.Manager" Name="MethodKeySuffix" 
    Type="System.String" Default="Key" Optional="False" 
    Description="The suffix of the primary key query method names." %>

<%@ Property Category="3.Manager" Name="EntityManager" 
    Type="Manager.EntityManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="4.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="4.Mapping" Name="Table" 
    Type="LinqToSqlShared.DbmlObjectModel.Table" Optional="False" 
    Description="Must be set by parent template" %>
    
<%@ Property Name="EnumDatabase"
    Type="LinqToSqlShared.Generator.DbmlEnum.Database" Optional="True"
    Description="Enum Collection for Database." %>

<%@ Map Name="VBKeywordEscape"
    Src="VBKeywordEscape.csmap" Reverse="False"
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="VBAlias"
    Src="System-VBAlias.csmap" Reverse="False"
    Description="Convert system data types to vb alias" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
<%
Dim safeName as String = Database.EntityNamespace + "." + EntityManager.EntityName
%>

Imports System
Imports System.Collections.Generic
Imports System.Data.Linq
Imports System.Linq
Imports System.Text
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace <%= ManagerNamespace %>
    ''' <summary>
    ''' The manager class for <%= EntityManager.EntityName %>.
    ''' </summary>
    Partial <%= StringUtil.ToPascalCase(Naming.GetModifier(Table.Type.AccessModifier, Table.Type.Modifier)) %> Class <%= EntityManager.ManagerName %>
        Inherits CodeSmith.Data.EntityManagerBase(Of <%= DataManager.DataManagerName %>, <%= safeName %>)

        ''' <summary>
        ''' Initializes the <see cref="<%= EntityManager.ManagerName %>"/> class.
        ''' </summary>
        ''' <param name="manager">The current manager.</param>
        <%= GeneratedCodeAttribute %>
        Public Sub New(ByVal manager As <%= DataManager.DataManagerName %>)
            MyBase.New(manager)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Gets the current context.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Protected ReadOnly Property Context() As <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>
            Get
                return Manager.Context
            End Get
        End Property

        ''' <summary>
        ''' Gets the entity for this manager.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Protected ReadOnly Property Entity() As System.Data.Linq.Table(Of <%= safeName %>)
            Get
                return Manager.Context.<%= EntityManager.PropertyName %>
            End Get
        End Property

<% For Each method As ManagerMethod In EntityManager.Methods
         Dim parameters As String = GetParameters(method)
         Dim paramNames As String = GetParametersNames(method)
         Dim paramTypes As String = GetParametersTypes(method)
	 Dim suffix As String = method.NameSuffix
	 If suffix = MethodKeySuffix Then
		suffix += "Member"
	 End If
%>
<% If method.IsKey Then %>
<% If method.Columns.Count < 5 Then %>

        ''' <summary>
        ''' Creates the key for this entity.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Public Shared Function CreateKey(<%= parameters %>) As CodeSmith.Data.IEntityKey(Of <%= paramTypes %>)
            Return New CodeSmith.Data.EntityKey(Of <%= paramTypes %>)(<%= paramNames %>)
        End Function

        ''' <summary>
        ''' Gets an entity by the primary key.
        ''' </summary>
        ''' <param name="key">The key for the entity.</param>
        ''' <returns>
        ''' An instance of the entity or null if not found.
        ''' </returns>
        ''' <remarks>
        ''' This method is expecting key to be of type IEntityKey(Of <%= paramTypes %>).
        ''' </remarks>
        ''' <exception cref="ArgumentException">Thrown when key is not of type IEntityKey(Of <%= paramTypes %>).</exception>
        <%= GeneratedCodeAttribute %>
        Public Overrides Function GetByKey(ByVal key As CodeSmith.Data.IEntityKey) As <%= safeName %>
            If (key Is GetType(CodeSmith.Data.IEntityKey(Of <%= paramTypes %>))) Then
                Dim entityKey As CodeSmith.Data.IEntityKey(Of <%= paramTypes %>) = DirectCast(key, CodeSmith.Data.IEntityKey(Of <%= paramTypes %>))
<% If (method.Columns.Count = 1) Then %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key)
<% Else If (method.Columns.Count = 2) Then %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key, entityKey.Key1)
<% Else If (method.Columns.Count = 3) Then %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key, entityKey.Key1, entityKey.Key2)
<% Else If (method.Columns.Count = 4) Then %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key, entityKey.Key1, entityKey.Key2, entityKey.Key3)
<% End If %>
            Else
                Throw New ArgumentException("Invalid key, expected key to be of type IEntityKey(Of <%= paramTypes %>)")
            End If
        End Function

<% End If ' columns less then 5 %>
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        <%= GeneratedCodeAttribute %>
        Public Overloads Function <%= MethodPrefix %><%= MethodKeySuffix %>(<%= parameters %>) As <%= safeName %>
<% If (method.Columns.Count < 4) Then %>
            If (Context.LoadOptions Is Nothing) Then
                Return Query.<%= MethodPrefix %><%= MethodKeySuffix %>.Invoke(Context, <%= paramNames %>)
            Else
<% End If ' column count%>
                Return Entity.FirstOrDefault(<%= GetLamba(method, 5) %>)
<% If (method.Columns.Count < 4) Then %>
            End If
<% End If %>
        End Function

        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <returns>The number of rows deleted from the database.</returns>
        <%= GeneratedCodeAttribute %>
        Public Function Delete(<%= parameters %>) As Integer
            return Entity.Delete(<%= GetLamba(method, 5) %>)
        End Function
<%  Else If (method.IsUnique) Then %>

        ''' <summary>
        ''' Gets an instance by using a unique index.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        <%= GeneratedCodeAttribute %>
        Public Overloads Function <%= MethodPrefix %><%= suffix %>(<%= parameters %>) As <%= safeName %>
<% If (method.Columns.Count < 4) Then %>
            If (Context.LoadOptions Is Nothing) Then
                return Query.<%= MethodPrefix %><%= method.NameSuffix %>.Invoke(Context, <%= paramNames %>)
            Else
<% End If ' column count%>
                Return Entity.FirstOrDefault(<%= GetLamba(method, 5) %>)
<% If (method.Columns.Count < 4) Then %>
            End If
<% End If %>
        END Function
<% Else  %>

        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        Public Overloads Function <%= MethodPrefix %><%= suffix %>(<%= parameters %>) As IQueryable(Of <%= safeName %>)
<% If (method.Columns.Count < 4) Then %>
            If Context.LoadOptions Is Nothing Then
                return Query.<%= MethodPrefix %><%= suffix %>.Invoke(Context, <%= paramNames %>)
            Else
<% End If ' column count%>
                return Entity.Where(<%= GetLamba(method, 5) %>)
<% If (method.Columns.Count < 4) Then %>
            End If
<% End If%>
        End Function
<% End If ' if is key%>
<% Next ' foreach method%>

        #Region "Extensibility Method Definitions"
        ''' <summary>Called when the class is created.</summary>
        <%= GeneratedCodeAttribute %>
        Partial Private Sub OnCreated()
        End Sub
        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query
<% For Each method As ManagerMethod in EntityManager.Methods
    Dim parameters As String = GetParameters(method)
    Dim paramNames As String = GetParametersNames(method)
    Dim paramTypes As String = GetParametersTypes(method)
    Dim suffix As String = method.NameSuffix
    If suffix = MethodKeySuffix Then
	suffix += "Member"
    End If
%>
<% If method.Columns.Count < 4 Then %>
<% If method.IsKey Then %>

            <%= GeneratedCodeAttribute %>
            Friend Shared Readonly <%= MethodPrefix %><%= MethodKeySuffix %> As Func(Of <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= paramTypes %>, <%= safeName %>) = _
                CompiledQuery.Compile( _
                     Function(db As <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= parameters %>) _
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% Else If method.IsUnique Then %>

            <%= GeneratedCodeAttribute %>
            Friend Shared Readonly <%= MethodPrefix %><%= suffix %> As Func(Of <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= paramTypes %>, <%= safeName %>) = _
                CompiledQuery.Compile( _
                     Function(db As <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= parameters %>) _
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% Else %>

            <%= GeneratedCodeAttribute %>
            Friend Shared Readonly  <%= MethodPrefix %><%= suffix %> As Func(Of <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= paramTypes %>, IQueryable(Of <%= safeName %>)) = _
                CompiledQuery.Compile( _
                    Function( db As <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %> , <%= parameters %>) _
                        db.<%= EntityManager.PropertyName %>.Where(<%= GetLamba(method, 7) %>))
<% End If ' if is key%>
<% End If ' column count%>
<% Next ' foreach method%>

        End Class
        #End Region
    End Class
End Namespace
<script runat="template">
Public Function GetAlias() As String
    Return EntityManager.EntityName.Substring(0, 1).ToLowerInvariant()
End Function

Public Function CleanParamName(ByVal name As String) As String
    If name <> GetAlias() Then
        Return name
    End If

    Return "my" & StringUtil.ToPascalCase(name)
End Function

Public Function GetParameters(ByVal method As ManagerMethod) As String
    Dim args As New StringBuilder()
    For Each column As Column In method.Columns
        If args.Length > 0 Then
            args.Append(", ")
        End If

        Dim paramType As String = GetColumnType(column)
        Dim paramName As String = GetParamName(column.Member)
        paramName = CleanParamName(paramName)

        args.AppendFormat("ByVal {1} As {0}", paramType, paramName)
    Next

    Return args.ToString()
End Function

Public Function GetParametersNames(ByVal method As ManagerMethod) As String
    Dim args As New StringBuilder()
    For Each column As Column In method.Columns
        If args.Length > 0 Then
            args.Append(", ")
        End If

        Dim paramName As String = GetParamName(column.Member)
        paramName = CleanParamName(paramName)
        args.Append(paramName)
    Next

    Return args.ToString()
End Function

Public Function GetParametersTypes(ByVal method As ManagerMethod) As String
  Dim args As New StringBuilder()
  For Each column As Column In method.Columns
    If args.Length > 0 Then
      args.Append(", ")
    End If

    Dim paramType As String = GetColumnType(column)
    args.Append(paramType)
  Next

  Return args.ToString()
End Function

Public Function GetLamba(ByVal method As ManagerMethod, ByVal tabCount As Integer) As String
  Dim lamba As New StringBuilder()

  For Each column As Column In method.Columns
    Dim paramName As String = GetParamName(column.Member)
    paramName = CleanParamName(paramName)

    If lamba.Length = 0 Then
      lamba.AppendFormat("Function({0})", GetAlias())
    Else
      lamba.Append(" _" & Chr(13) & "" & Chr(10) & "")
      lamba.Append(Chr(9), tabCount)
      lamba.Append("AndAlso ")
    End If

    If column.CanBeNull.HasValue AndAlso column.CanBeNull.Value Then
        lamba.AppendFormat("Object.Equals({0}.{1}, {2})", GetAlias(), column.Member, paramName)
    Else
        lamba.AppendFormat("{0}.{1} = {2}", GetAlias(), column.Member, paramName)
    End If

  Next

  Return lamba.ToString()
End Function

Public Function GetParamName(ByVal name as String) As String
    Dim paramName As String = StringUtil.ToCamelCase(name)
    If String.IsNullOrEmpty(MethodPrefix) Then
        paramName = "my" + name
    End If
    paramName = VBKeywordEscape(paramName)
    Return paramName
End Function

Private Shared ReadOnly _sizeRegex As New Regex("(?<Size>\d+)", RegexOptions.Compiled)

Public Function GetSize(ByVal s As String) As Integer
    Dim size As Integer = 0

    Dim m As Match = _sizeRegex.Match(s)
    If Not m.Success Then
        Return size
    End If

    Dim temp As String = m.Groups("Size").Value
    Integer.TryParse(temp, size)
    Return size
End Function

Public Function GetColumnType(ByVal column As Column) As String
    Dim dataType As String = column.Type

    Dim enumType As LinqToSqlShared.Generator.DbmlEnum.Enum = If(EnumDatabase IsNot Nothing, EnumDatabase.Enums.FirstOrDefault(Function(e) e.Name = column.Type), Nothing)

    Dim isEnum As Boolean = enumType IsNot Nothing
    If isEnum AndAlso Not dataType.StartsWith(Database.EntityNamespace + ".") Then
        dataType = Database.EntityNamespace + "." & dataType
    End If

    If column.CanBeNull = True AndAlso (CommonUtility.IsNullableType(column.Type) OrElse isEnum) Then
        dataType = String.Format("{0}?", VBAlias(dataType))
    Else
        dataType = VBAlias(dataType)
    End If

    Return dataType
End Function

Private Shared ReadOnly GeneratedCodeAttribute As String = String.Format("<System.CodeDom.Compiler.GeneratedCode(""CodeSmith"", ""{0}"")> _", GetType(CodeTemplate).Assembly.GetName().Version.ToString())
</script>
