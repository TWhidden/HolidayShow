<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Manager Class." CompilerVersion="v3.5" %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.vb" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="3.Query" Name="DataManager"
    Type="Manager.DataManager" Optional="False"
    Description="Must be set by parent template" %>

<%@ Property Category="3.Query" Name="EntityManager"
    Type="Manager.EntityManager" Optional="False"
    Description="Must be set by parent template" %>

<%@ Property Category="2.Mapping" Name="Database"
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False"
    Description="Database schema instance. Must be set by parent template" %>

<%@ Property Category="3.Query" Name="MethodPrefix"
    Type="System.String" Default="By" Optional="True"
    Description="The prefix of query method names." %>

<%@ Property Category="3.Query" Name="UniqueMethodPrefix"
    Type="System.String" Default="GetBy" Optional="True"
    Description="The prefix of query method names." %>

<%@ Property Category="3.Query" Name="MethodKeySuffix"
    Type="System.String" Default="Key" Optional="False"
    Description="The suffix of the primary key query method names." %>
    
<%@ Property Category="3.Query" Name="QueryNamespace"
    Type="System.String" Default="" Optional="True"
    Description="The namespace for the interfaces.  Leave blank to not generate them." %>

<%@ Property Name="EnumDatabase"
    Type="LinqToSqlShared.Generator.DbmlEnum.Database" Optional="True"
    Description="Enum Collection for Database." %>

<%@ Map Name="VBKeywordEscape"
    Src="VBKeywordEscape.csmap" Reverse="False"
    Description="Mapping to escape VB keywords" %>

<%@ Map Name="VBAlias"
    Src="System-VBAlias.csmap" Reverse="False"
    Description="Convert system data types to VB alias" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
<%
Dim safeName as String = Database.EntityNamespace + "." + EntityManager.EntityName
%>

Imports System
Imports System.Collections.Generic
Imports System.Data.Linq
Imports System.Linq
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

<% If (String.IsNullOrEmpty(QueryNamespace)) %>
Namespace <%= Database.ContextNamespace %>
<% Else %>
Namespace <%= QueryNamespace %>
<% End If %>
    ''' <summary>
    ''' The query extension class for <%= EntityManager.EntityName %>.
    ''' </summary>
    Public Module <%= EntityManager.EntityName %>Extensions
<% For Each method As ManagerMethod In EntityManager.Methods %>
<% If (method.IsKey) Then %>
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <%= GeneratedCodeAttribute %>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function <%= UniqueMethodPrefix %><%= MethodKeySuffix %>(ByVal queryable As IQueryable(Of <%= safeName %>), <%= GetParameters(method) %>) As <%= safeName %>

<% If (method.Columns.Count < 4) Then %>
            Dim entity As System.Data.Linq.Table(Of <%= safeName %>) = CType(queryable, Table(Of <%= safeName %>))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.<%= UniqueMethodPrefix %><%= MethodKeySuffix %>.Invoke(DirectCast(entity.Context, <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>), <%= GetParametersNames(method) %>)
            End If
<% End If '' column count%>

            Return queryable.FirstOrDefault(<%= GetLamba(method, 5) %>)
        End Function

        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <%= GeneratedCodeAttribute %>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of <%= safeName %>), <%= GetParameters(method) %>) As Integer
            Return table.Delete(<%= GetLamba(method, 5) %>)
        End Function
<% Else If (method.IsUnique) Then
    uniqueMethods.Add(method.NameSuffix )
    Dim suffix As String = method.NameSuffix
    If suffix = MethodKeySuffix Then
	suffix += "Member"
    End If
%>

        ''' <summary>
        ''' Gets an instance by using a unique index.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        <%= GeneratedCodeAttribute %>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function <%= UniqueMethodPrefix %><%= method.NameSuffix %>(ByVal queryable As IQueryable(Of <%= safeName %>), <%= GetParameters(method) %>) As <%= safeName %>

<% If (method.Columns.Count < 4) Then %>
            Dim entity As Table(Of <%= safeName %>) = CType(queryable, Table(Of <%= safeName %>))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.<%= UniqueMethodPrefix %><%= method.NameSuffix %>.Invoke(DirectCast(entity.Context,<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>), <%= GetParametersNames(method) %>)
            End If
<% End If ' column count%>

            Return queryable.FirstOrDefault(<%= GetLamba(method, 5) %>)
        End Function
<% End If ' If is key%>
<% Next ' For Each method%>
<% For Each c As Column In Database.GetTypeByName(EntityManager.EntityName).Columns
    Dim paramName as string =  GetParamName(c.Member)
    paramName = CleanParamName(paramName)

    Dim columnType As String = GetColumnType(c)
    Dim myAlias As String = GetAlias()

    Dim functionName as String = MethodPrefix & c.Member
    If Not c.IsVersion.Value AndAlso c.Type <> "System.Data.Linq.Binary" Then
     %>

        ''' <summary>
        ''' Gets a query for <see cref="<%= safeName %>"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="<%= paramName %>"><%= c.Member %> to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function <%= VBKeywordEscape(functionName) %>(ByVal queryable As IQueryable(Of <%= safeName %>), ByVal <%= paramName %> As <%= columnType %>) As IQueryable(Of <%= safeName %>)
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
            Return queryable.Where(Function(<%= myAlias %>) Object.Equals(<%= myAlias %>.<%= c.Member %>, <%= paramName %>))
<% Else %>
            Return queryable.Where(Function(<%= myAlias %>)<%= myAlias %>.<%= c.Member %> = <%= paramName %>)
<% End If %>
        End Function


<% If (c.Type = "System.String") Then %>
        ''' <summary>
        ''' Gets a query for <see cref="<%= safeName %>"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="<%= paramName %>"><%= c.Member %> to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
	<System.Runtime.CompilerServices.Extension()> _
        Public Function <%= VBKeywordEscape(functionName) %>(ByVal queryable As IQueryable(Of <%= safeName %>), ByVal containment As ContainmentOperator, ByVal <%= paramName %> As <%= columnType %>) As IQueryable(Of <%= safeName %>)
            If <%= paramName %> Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("<%= paramName %>", "Parameter '<%= paramName %>' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
           
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %>.Contains(<%= paramName %>))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %>.StartsWith(<%= paramName %>))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %>.EndsWith(<%= paramName %>))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %>.Contains(<%= paramName %>) = False)
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(<%= myAlias %>) Object.Equals(<%= myAlias %>.<%= c.Member %>, <%= paramName %>) = False)
                Case Else
                    Return queryable.Where(Function(<%= myAlias %>) Object.Equals(<%= myAlias %>.<%= c.Member %>, <%= paramName %>))
<% Else 'CanBeNull %>
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> <> <%= paramName %>)
                Case Else
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> = <%= paramName %>)
<% End If 'CanBeNull %>
            End Select
        End Function

<% Else 'not string %>
        ''' <summary>
        ''' Gets a query for <see cref="<%= safeName %>"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="<%= paramName %>"><%= c.Member %> to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
	<System.Runtime.CompilerServices.Extension()> _
        Public Function <%= VBKeywordEscape(functionName) %>(ByVal queryable As IQueryable(Of <%= safeName %>), ByVal comparison As ComparisonOperator, ByVal <%= paramName %> As <%= columnType %>) As IQueryable(Of <%= safeName %>)
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
            If <%= paramName %> Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("<%= paramName %>", "Parameter '<%= paramName %>' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If

<% End If 'CanBeNull %>
            Select Case comparison
<% If (c.Type = "System.Object" OrElse c.Type = "System.Guid" OrElse c.Type = "System.Boolean" OrElse c.Type = "System.Xml.Linq.XElement") Then %>
                Case ComparisonOperator.GreaterThan, ComparisonOperator.GreaterThanOrEquals, ComparisonOperator.LessThan, ComparisonOperator.LessThanOrEquals
                    Throw New ArgumentException("Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support <%= columnType %> type.", "comparison")
<% Else %>
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> > <%= paramName %>)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> >= <%= paramName %>)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> < <%= paramName %>)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> <= <%= paramName %>)
<% End If 'type guid %>
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(<%= myAlias %>) Object.Equals(<%= myAlias %>.<%= c.Member %>, <%= paramName %>) = False)
                Case Else
                    Return queryable.Where(Function(<%= myAlias %>) Object.Equals(<%= myAlias %>.<%= c.Member %>, <%= paramName %>))
<% Else 'CanBeNull %>
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> <> <%= paramName %>)
                Case Else
                    Return queryable.Where(Function(<%= myAlias %>) <%= myAlias %>.<%= c.Member %> = <%= paramName %>)
<% End If 'CanBeNull %>
            End Select
        End Function
        ''' <summary>
        ''' Gets a query for <see cref="<%= safeName %>"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="<%= paramName %>"><%= c.Member %> to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
	<System.Runtime.CompilerServices.Extension()> _
        Public Function <%= VBKeywordEscape(functionName) %>(ByVal queryable As IQueryable(Of <%= safeName %>), ByVal <%= paramName %> As <%= columnType %>, ByVal ParamArray additionalValues As <%= columnType %>()) As IQueryable(Of <%= safeName %>)
            Dim values = New List(Of <%= columnType %>)()
            values.Add(<%= paramName %>)

            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
            Else
                values.Add(Nothing)
<% End If %>
            End If

            If values.Count = 1 Then
                Return queryable.<%= functionName %>(values(0))
            End If

            Return queryable.<%= functionName %>(values)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="<%= safeName %>"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
	<System.Runtime.CompilerServices.Extension()> _
        Public Function <%= VBKeywordEscape(functionName) %>(ByVal queryable As IQueryable(Of <%= safeName %>), ByVal values As IEnumerable(Of <%= columnType %>)) As IQueryable(Of <%= safeName %>)
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of <%= safeName %>, Boolean)("<%= c.Member %>", values)
                Return queryable.Where(expression)
<% Else %>
                Return queryable.Where(Function(<%= myAlias %>) values.Contains(<%= myAlias %>.<%= c.Member %>))
<% End If %>
        End Function

<% End If 'if type string %>
<% End If ' if is  not key
 Next ' foreach method%>

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query

<% For Each method As ManagerMethod In EntityManager.Methods %>
<% If method.Columns.Count < 4 Then %>
<% If (method.IsKey) Then %>

            <%= GeneratedCodeAttribute %>
            Friend Shared ReadOnly <%= UniqueMethodPrefix %><%= MethodKeySuffix %> As Func(Of <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, <%= safeName %>) = _
                CompiledQuery.Compile( _
                    Function(db As <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %> , <%= GetParameters(method) %>) _
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% Else If method.IsUnique Then %>
<%      Dim suffix As String = method.NameSuffix
	If suffix = MethodKeySuffix Then
	   suffix += "Member"
	End If
 %>

            <%= GeneratedCodeAttribute %>
            Friend Shared ReadOnly <%= UniqueMethodPrefix %><%= method.NameSuffix %> As Func(Of <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, <%= safeName %>) = _
                CompiledQuery.Compile( _
                    Function(db As <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %> , <%= GetParameters(method) %>) _
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% End If ' if is key%>
<% End If ' column count%>
<% Next ' foreach method%>

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace
<script runat="template">

Dim uniqueMethods As List(Of String) = New List(Of String)()

Public Function GetAlias() As String
    Dim a as String = EntityManager.EntityName.Substring(0, 1).ToLowerInvariant()
    If String.Equals(a, EntityManager.EntityName, StringComparison.OrdinalIgnoreCase) Then
        a = a & "1"
    End If
    Return a
End Function

Public Function CleanParamName(ByVal name As String) As String
    If name <> GetAlias() Then
        Return VBKeywordEscape(name)
    End If
    
    Return VBKeywordEscape("my" & StringUtil.ToPascalCase(name))
End Function

Public Function GetParameters(ByVal method As ManagerMethod) As String
    Dim args As New StringBuilder()
    For Each column As Column In method.Columns
        If args.Length > 0 Then
            args.Append(", ")
        End If

        Dim paramType As String = GetColumnType(column)
        Dim paramName As String = GetParamName(column.Member)
        paramName = CleanParamName(paramName)

        args.AppendFormat("ByVal {1} As {0}", paramType, paramName)
    Next

    Return args.ToString()
End Function

Public Function GetParametersNames(ByVal method As ManagerMethod) As String
  Dim args As New StringBuilder()
  For Each column As Column In method.Columns
    If args.Length > 0 Then
      args.Append(", ")
    End If

    Dim paramName As String = GetParamName(column.Member)
    paramName = CleanParamName(paramName)
    args.Append(paramName)
  Next

  Return args.ToString()
End Function

Public Function GetParametersTypes(ByVal method As ManagerMethod) As String
  Dim args As New StringBuilder()
  For Each column As Column In method.Columns
    If args.Length > 0 Then
      args.Append(", ")
    End If

    Dim paramType As String = GetColumnType(column)
    args.Append(paramType)
  Next

  Return args.ToString()
End Function

Public Function GetLamba(ByVal method As ManagerMethod, ByVal tabCount As Integer) As String
  Dim lamba As New StringBuilder()

  For Each column As Column In method.Columns
    Dim paramName As String = GetParamName(column.Member)
    paramName = CleanParamName(paramName)

    If lamba.Length = 0 Then
      lamba.AppendFormat("Function({0})", GetAlias())
    Else
      lamba.Append(" _" & Chr(13) & "" & Chr(10) & "")
      lamba.Append(Chr(9), tabCount)
      lamba.Append("AndAlso ")
    End If

    If column.CanBeNull.HasValue AndAlso column.CanBeNull.Value Then
        lamba.AppendFormat("Object.Equals({0}.{1}, {2})", GetAlias(), column.Member, paramName)
    Else
        lamba.AppendFormat("{0}.{1} = {2}", GetAlias(), column.Member, paramName)
    End If

  Next

  Return lamba.ToString()
End Function

Public Function GetParamName(ByVal name as String) As String
    Dim paramName As String = StringUtil.ToCamelCase(name)
    If String.IsNullOrEmpty(MethodPrefix) Then
        paramName = "my" + name
    End If
    If VBKeywordEscape.ContainsKey(paramName) Then
        paramName = "my" + name
    End If

    Return VBKeywordEscape(paramName)
End Function

Private Shared ReadOnly _sizeRegex As New Regex("(<Size>\d+)", RegexOptions.Compiled)

Public Function GetSize(ByVal s As String) As Integer
  Dim size As Integer = 0

  Dim m As Match = _sizeRegex.Match(s)
  If Not m.Success Then
    Return size
  End If

  Dim temp As String = m.Groups("Size").Value
  Integer.TryParse(temp, size)
  Return size
End Function

Public Function GetColumnType(ByVal column As Column) As String
    Dim dataType As String = column.Type
   
    Dim myEnumType As LinqToSqlShared.Generator.DbmlEnum.Enum = Nothing

    If EnumDatabase IsNot Nothing Then
        myEnumType = EnumDatabase.Enums.FirstOrDefault(Function(e) e.Name = column.Type)
    End If

    Dim isEnum As Boolean = myEnumType IsNot Nothing
    If isEnum AndAlso Not dataType.StartsWith(Database.EntityNamespace + ".") Then
        dataType = Database.EntityNamespace + "." & dataType
    End If

    If column.CanBeNull.HasValue AndAlso column.CanBeNull.Value AndAlso (CommonUtility.IsNullableType(column.Type) OrElse isEnum) Then
        dataType = String.Format("Nullable(Of {0})", VBAlias(dataType))
    Else
        dataType = VBAlias(dataType)
    End If
   
    Return dataType
End Function

Private Shared ReadOnly GeneratedCodeAttribute As String = String.Format("<System.CodeDom.Compiler.GeneratedCode(""CodeSmith"", ""{0}"")> _", GetType(CodeTemplate).Assembly.GetName().Version.ToString())
</script>
