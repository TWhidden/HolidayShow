<%@ CodeTemplate Language="VB" TargetLanguage="Text" 
    Description="Generate Linq to Sql Class File"
    Debug="True" OutputType="None" CompilerVersion="v3.5"%>

<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\Common" %>
<%@ Assembly Name="Generator" Path="..\Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Property Category="2.Class" Name="OutputDirectory"
    Type="System.String" Default="" Optional="True"
    Description="The folder to save the generated entity files."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="2.Class" Name="BaseDirectory"
    Type="System.String" Default="" Optional="True"
    Description="The folder to save the generated DataContext files."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="2.Class" Name="ModelDirectory"
    Type="System.String" Default="" Optional="True"
    Description="The folder to save the generated files for stored procedures."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="2.Class" Name="InterfaceDirectory"
    Type="System.String" Default="" Optional="True"
    Description="The folder to save the generated interface files."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="2.Class" Name="InterfaceNamespace"
    Type="System.String" Default="" Optional="True"
    Description="The namespace for the interfaces.  Leave blank to not generate them." %>

<%@ Property Category="1.Mapping" Name="DbmlFile"
    Type="System.String" Default="Database.dbml" Optional="False"
    Description="The full path to the mapping file."
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Register Name="DataContextGeneratedClass"
    Template="Internal\DataContext.Generated.cst"
    MergeProperties="True" ExcludeProperties="Database"%>

<%@ Register Name="DataContextEditableClass"
    Template="Internal\DataContext.Editable.cst"
    MergeProperties="False" %>

<%@ Register Name="EntityBaseGeneratedClass"
    Template="Internal\Entity.Base.Generated.cst"
    MergeProperties="False" %>

<%@ Register Name="EntityBaseEditableClass"
    Template="Internal\Entity.Base.Editable.cst"
    MergeProperties="False" %>

<%@ Register Name="EntityGeneratedClass"
    Template="Internal\Entity.Generated.cst"
    MergeProperties="True" ExcludeProperties="Database,TableName,Type, EntityBase" %>

<%@ Register Name="EntityEditableClass"
    Template="Internal\Entity.Editable.cst"
    MergeProperties="False" %>

<%@ Register Name="EntityInterface"
    Template="Internal\Entity.Interface.cst"
    MergeProperties="True" ExcludeProperties="Database,TableName,Type, EntityBase" %>

<%@ Register Name="EnumClass"
    Template="Internal\Enums.cst"
    MergeProperties="False" %>

<script runat="template">
Private generatedEntities As New List(Of String)()

Public Sub Generate()
    If Not Directory.Exists(Me.OutputDirectory) Then
        Directory.CreateDirectory(Me.OutputDirectory)
    End If
    
    Dim database As Database = Dbml.FromFile(Me.DbmlFile)
    If database Is Nothing Then
        Throw New Exception("Error loading Dbml file.")
    End If
    
    Dbml.FillInDefaults(database)
    
    Me.Progress.MaximumValue = (database.Tables.Count + 1) * 2
    Me.Progress.[Step] = 1
    
    CreateEntityBaseClass(database)
    CreateDataContextClass(database)
    CreateEntityClasses(database)
    CreateInterfaces(database)
    
    Me.RegisterReference("System.Data.Linq")
    Me.RegisterReference("System.Configuration")
    If Me.IncludeDataContract Then
        Me.RegisterReference("System.Runtime.Serialization")
    End If
    Me.RegisterReference("System.Web.DynamicData")
    Me.RegisterReference("System.ComponentModel.DataAnnotations")
    If IncludeDataServices Then
        Me.RegisterReference("System.Data.Services")
        Me.RegisterReference("System.Data.Services.Client")
    End If

    If (Me.Framework = FrameworkEnum.v40) Then
        Me.RegisterReference(Path.GetFullPath(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\v4.0\CodeSmith.Data.dll")))
        Me.RegisterReference(Path.GetFullPath(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\v4.0\CodeSmith.Data.LinqToSql.dll")))
    Else
        Me.RegisterReference(Path.GetFullPath(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\v3.5\CodeSmith.Data.dll")))
        Me.RegisterReference(Path.GetFullPath(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\v3.5\CodeSmith.Data.LinqToSql.dll")))
    End If
End Sub

Public Sub CreateEntityBaseClass(ByVal database As Database)
    Dim t As EntityBaseGeneratedClass = Me.Create(Of EntityBaseGeneratedClass)()
    Me.CopyPropertiesTo(t)
    t.ClassNamespace = database.EntityNamespace
    t.ClassName = database.EntityBase
    
    Dim p As EntityBaseEditableClass = Me.Create(Of EntityBaseEditableClass)()
    Me.CopyPropertiesTo(p)
    p.ClassNamespace = database.EntityNamespace
    p.ClassName = database.EntityBase
    
    Dim parentFileName As String = database.EntityBase & ".vb"
    Dim path As String = If(String.IsNullOrEmpty(BaseDirectory), OutputDirectory, BaseDirectory)
    parentFileName = IO.Path.Combine(path, parentFileName)
    
    If Not File.Exists(parentFileName) Then
        Response.WriteLine(parentFileName)
        p.RenderToFile(parentFileName, False)
    End If
    
    Dim fileName As String = database.EntityBase & ".Generated.vb"
    fileName = IO.Path.Combine(path, fileName)
    
    Response.WriteLine(fileName)
    t.RenderToFile(fileName, parentFileName, True)
End Sub

Public Sub CreateDataContextClass(ByVal database As Database)
    Dim t As DataContextGeneratedClass = Me.Create(Of DataContextGeneratedClass)()
    Me.CopyPropertiesTo(t)
    t.Database = database
    
    Dim p As DataContextEditableClass = Me.Create(Of DataContextEditableClass)()
    Me.CopyPropertiesTo(p)
    p.Database = database
    
    Dim contextClass As String = CommonUtility.GetClassName(database.[Class])
    
    Dim path As String = If(String.IsNullOrEmpty(BaseDirectory), OutputDirectory, BaseDirectory)
    Dim parentFileName As String = contextClass & ".vb"
    parentFileName = IO.Path.Combine(path, parentFileName)
    
    If Not File.Exists(parentFileName) Then
        Response.WriteLine(parentFileName)
        p.RenderToFile(parentFileName, True)
    End If
    
    Dim fileName As String = contextClass & ".Generated.vb"
    fileName = IO.Path.Combine(path, fileName)
    
    Debug.WriteLine(String.Format("Creating DataContext Class '{0}' ...", contextClass))
    
    Response.WriteLine(fileName)
    t.RenderToFile(fileName, parentFileName, True)
    
    Me.Progress.PerformStep()
    
    CreateEnums(database, parentFileName)
End Sub

Public Sub CreateEntityClasses(ByVal [database] As Database)
    Dim t As EntityGeneratedClass = Me.Create(Of EntityGeneratedClass)()
    Me.CopyPropertiesTo(t)
    t.Database = [database]
    t.EnumDatabase = Me.EnumDatabase

    Dim p As EntityEditableClass = Me.Create(Of EntityEditableClass)()
    Me.CopyPropertiesTo(p)
    p.Database = [database]
    
    For Each tableMap As Table In database.Tables
        Dim watch As Stopwatch = Stopwatch.StartNew()
        
        Debug.WriteLine(String.Format("Creating Entity Class '{0}' ...", tableMap.Type.Name))
        
        t.TableName = tableMap.Name
        t.EntityBase = [database].EntityBase
        p.EntityBase = [database].EntityBase
        
        CreateEntity(t, p, tableMap.Type, OutputDirectory)
        
        Debug.WriteLine(String.Format("Created '{0}' in {1} ms.", tableMap.Type.Name, watch.Elapsed.TotalMilliseconds.ToString()))
        
        Me.Progress.PerformStep()
    Next
   
    Dim viewPath As String = If(String.IsNullOrEmpty(ModelDirectory), OutputDirectory, ModelDirectory)
    For Each [function] As [Function] In [database].Functions
        For Each resultType As LinqToSqlShared.DbmlObjectModel.Type In [function].Types
            If Not generatedEntities.Contains(resultType.Name) Then
                t.TableName = String.Empty
                t.EntityBase = String.Empty
                t.Framework = Me.Framework
                p.EntityBase = String.Empty
                
                CreateEntity(t, p, resultType, viewPath)
            End If
        Next
    Next
End Sub

Public Sub CreateEntity(ByVal entityClass As EntityGeneratedClass, ByVal partialClass As EntityEditableClass, ByVal type As LinqToSqlShared.DbmlObjectModel.Type, ByVal rootDirectory As String)
    Dim className As String = type.Name
    generatedEntities.Add(className)
    
    Dim parentFileName As String = className & ".vb"
    parentFileName = Path.Combine(rootDirectory, parentFileName)
    
    If File.Exists(parentFileName) Then
        partialClass.ExistingFile = New CodeFileParser(parentFileName)
    End If
    
    Dim insertClassMergeStrategy__1 As New InsertClassMergeStrategy(ICSharpCode.NRefactory.SupportedLanguage.VBNet, "Metadata") With _
    { _
            .OnlyInsertMatchingClass = True, _
            .PreserveClassAttributes = True, _
            .NotFoundAction = InsertClassMergeStrategy.NotFoundActionEnum.InsertInParent, _
            .NotFoundParent = type.Name, _
            .MergeImports = True _
    }
    partialClass.Type = type
    Response.WriteLine(parentFileName)
    partialClass.RenderToFile(parentFileName, insertClassMergeStrategy__1)
    
    Dim fileName As String = className & ".Generated.vb"
    fileName = Path.Combine(rootDirectory, fileName)
    
    Response.WriteLine(fileName)
    entityClass.Type = type
    entityClass.RenderToFile(fileName, parentFileName, True)
    
    For Each childType As LinqToSqlShared.DbmlObjectModel.Type In type.SubTypes
        entityClass.TableName = String.Empty
        entityClass.EntityBase = type.Name
        entityClass.Framework = Framework
        partialClass.EntityBase = type.Name
        CreateEntity(entityClass, partialClass, childType, rootDirectory)
    Next
End Sub

Public Sub CreateInterfaces(database As Database)
	Dim t As EntityInterface = Me.Create(Of EntityInterface)()
	Me.CopyPropertiesTo(t)

	If String.IsNullOrEmpty(Me.InterfaceNamespace) Then
		Return
	End If

	t.Database = database
	t.EnumDatabase = Me.EnumDatabase

	Dim path As String = InterfaceDirectory

	If [String].IsNullOrEmpty(path) Then
		path = OutputDirectory
	End If

	For Each tableMap As Table In database.Tables
		Dim watch As Stopwatch = Stopwatch.StartNew()

		Debug.WriteLine(String.Format("Creating Interface '{0}' ...", tableMap.Type.Name))

		t.TableName = tableMap.Name

		CreateInterface(t, tableMap.Type, path)

		Debug.WriteLine(String.Format("Created '{0}' in {1} ms.", tableMap.Type.Name, watch.Elapsed.TotalMilliseconds.ToString()))

		Me.Progress.PerformStep()
	Next
End Sub

Public Sub CreateInterface(ByVal entityClass As EntityInterface, ByVal type As LinqToSqlShared.DbmlObjectModel.Type, ByVal directory As String)
	Dim className As String = "I" + type.Name
	generatedEntities.Add(className)

	Dim fileName As String = className + ".vb"
	fileName = Path.Combine(directory, fileName)

	Response.WriteLine(fileName)
	Debug.WriteLine(String.Format("Creating Interface Class '{0}' ...", className))

	entityClass.Type = type
	entityClass.RenderToFile(fileName, True)

	Me.Progress.PerformStep()
End Sub

Public Sub CreateEnums(ByVal database As Database, ByVal parentFile As String)
    If EnumDatabase IsNot Nothing Then
        Dim fileName As String = Path.ChangeExtension(parentFile, ".Enums.vb")
        Dim t As EnumClass = Me.Create(Of EnumClass)()
        t.[Namespace] = database.EntityNamespace
        t.Database = EnumDatabase
        t.RenderToFile(fileName, parentFile, True)
    End If
End Sub

Private _enumXmlFileName As String = Nothing
Private ReadOnly Property EnumXmlFileName() As String
    Get
        If [String].IsNullOrEmpty(_enumXmlFileName) Then
            _enumXmlFileName = DbmlGenerator.GetEnumXmlFileName(DbmlFile)
        End If
        Return _enumXmlFileName
    End Get
End Property

Private _enumDatabase As LinqToSqlShared.Generator.DbmlEnum.Database = Nothing
Private _isEnumDatabaseLoaded As Boolean = False
Private ReadOnly Property EnumDatabase() As LinqToSqlShared.Generator.DbmlEnum.Database
    Get
        If Not _isEnumDatabaseLoaded Then
            _enumDatabase = LinqToSqlShared.Generator.DbmlEnum.Database.DeserializeFromFile(EnumXmlFileName)
            _isEnumDatabaseLoaded = True
        End If
        Return _enumDatabase
    End Get
End Property

</script>
Generating Linq to Sql Entities ...
<% Generate() %>
