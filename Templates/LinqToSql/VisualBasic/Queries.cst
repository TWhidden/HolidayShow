<%@ CodeTemplate Language="VB" TargetLanguage="XML"
    Description="Generate Linq to Sql Query Extension Class File" 
    Debug="true" OutputType="None" CompilerVersion="v3.5" %>

<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\Common" %>
<%@ Assembly Name="Generator" Path="..\Common" %>
<%@ Assembly Src="Internal\Manager.vb" %>

<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="1.Database" Name="SourceDatabase" 
    Type="SchemaExplorer.DatabaseSchema"  Optional="False"
    Description="The source database for Linq to Sql." %>

<%@ Property Category="2.Mapping" Name="DbmlFile" 
    Type="System.String" Default="Database.dbml" Optional="False" 
    Description="The full path to the mapping file." 
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="3.Query" Name="QueryDirectory" 
    Type="System.String" Default="Queries" Optional="false" 
    Description="The folder to save the generated query extension files." 
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Register Name="QueryExtensionGeneratedClass" 
    Template="Internal\QueryExtension.Generated.cst" 
    MergeProperties="true" ExcludeProperties="Database, DataManager,EntityManager,Table" %>

<script runat="template">
Public Sub Generate()
  If Not Directory.Exists(Me.QueryDirectory) Then
    Directory.CreateDirectory(Me.QueryDirectory)
  End If

  If SourceDatabase IsNot Nothing Then
    Me.Progress.MaximumValue = (SourceDatabase.Tables.Count + 2)
    Me.Progress.[Step] = 1
  End If

  Dim database As Database = Dbml.FromFile(Me.DbmlFile)
  If database Is Nothing Then
    Throw New Exception("Error loading Dbml file.")
  End If

  Dbml.FillInDefaults(database)

  Dim mgrMap As DataManager = ManagerGenerator.Create(SourceDatabase, database)

  CreateQueryClasses(database, mgrMap)
End Sub

Public Sub CreateQueryClasses(ByVal databaseMap As Database, ByVal dataManager As DataManager)
  Dim ns As String = If(String.IsNullOrEmpty(QueryNamespace), databaseMap.ContextNamespace, QueryNamespace)
  Dim t As QueryExtensionGeneratedClass = Me.Create(Of QueryExtensionGeneratedClass)()
  Me.CopyPropertiesTo(t)
  t.DataManager = dataManager
  t.Database = databaseMap
  t.EnumDatabase = EnumDatabase

  For Each manager As EntityManager In dataManager.Managers
    Dim watch As Stopwatch = Stopwatch.StartNew()

    Dim className As String = manager.EntityName + "Extensions"

    Dim fileName As String = className + ".vb"
    fileName = Path.Combine(QueryDirectory, fileName)

    Dim strategy As PreserveRegionsMergeStrategy = New PreserveRegionsMergeStrategy("^[ \t]*(?i:User)", "VB")

    Debug.WriteLine(String.Format("Creating Entity Query Extension Class '{0}' ...", className))
    t.EntityManager = manager
    t.RenderToFile(  fileName, strategy)

    Debug.WriteLine(String.Format("Created '{0}' in {1} ms.", className, watch.Elapsed.TotalMilliseconds.ToString()))

    Me.Progress.PerformStep()
  Next
End Sub

Private _enumXmlFileName As String = Nothing

Private ReadOnly Property EnumXmlFileName() As String
    Get
        If [String].IsNullOrEmpty(_enumXmlFileName) Then
            _enumXmlFileName = DbmlGenerator.GetEnumXmlFileName(DbmlFile)
        End If
        Return _enumXmlFileName
    End Get
End Property

Private _enumDatabase As LinqToSqlShared.Generator.DbmlEnum.Database = Nothing
Private _isEnumDatabaseLoaded As Boolean = False

Private ReadOnly Property EnumDatabase() As LinqToSqlShared.Generator.DbmlEnum.Database
    Get
        If Not _isEnumDatabaseLoaded Then
            _enumDatabase = LinqToSqlShared.Generator.DbmlEnum.Database.DeserializeFromFile(EnumXmlFileName)
            _isEnumDatabaseLoaded = True
        End If
        Return _enumDatabase
    End Get
End Property

</script>
Generating Linq to Sql Queries ...
<% Generate() %>
