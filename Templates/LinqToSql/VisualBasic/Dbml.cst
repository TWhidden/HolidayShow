<%@ CodeTemplate Language="VB" TargetLanguage="XML"
    Description="Generate Linq to Sql Dbml File"
    Debug="true" OutputType="None" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\Common" %>
<%@ Assembly Name="Generator" Path="..\Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Database" Name="SourceDatabase"
    Type="SchemaExplorer.DatabaseSchema" Optional="False"
    OnChanged="OnSourceDatabaseChanged" DeepLoad="true" IncludeFunctions="true"
    Description="The source database for Linq to Sql." %>

<%@ Property Category="1.Database" Name="IncludeViews"
    Type="System.Boolean" Default="False" Optional="False"
    Description="Include views in mapping." %>

<%@ Property Category="1.Database" Name="IncludeFunctions"
    Type="System.Boolean" Default="False" Optional="False"
    Description="Include stored procedures and user functions in mapping." %>

<%@ Property Category="1.Database" Name="IgnoreList"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to ignore tables, views and commands when generating mapping."
    Default="sysdiagrams$" %>

<%@ Property Category="1.Database" Name="IncludeList"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to include tables and views when generating mapping."
    Default="" %>

<%@ Property Category="1.Database" Name="CleanExpression"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to clean table, view and column names."
    Default="^(sp|tbl|udf|vw)_" %>

<%@ Property Category="1.Database" Name="EnumList"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to identify an Enum Table."
    Default="(E|e)num$" %>

<%@ Property Category="2.Class" Name="EntityBase"
    Type="System.String" Default="LinqEntityBase" Optional="True"
    Description="The base class for the entity." %>

<%@ Property Category="2.Class" Name="EntityNamespace"
    Type="System.String" Default="" Optional="False"
    OnChanged="OnEntityNamespaceChanged"
    Description="The namespace to use for the entity class files."%>

<%@ Property Category="2.Class" Name="ContextNamespace"
    Type="System.String" Default="" Optional="False"
    OnChanged="OnContextNamespaceChanged"
    Description="The namespace to use for the context class files."%>

<%@ Property Category="2.Class" Name="DataContextName"
    Type="System.String" Default="" Optional="True"
    Description="The name of the DataContext."%>

<%@ Property Category="2.Class" Name="IncludeDeleteOnNull"
    Type="System.Boolean" Default="True" Optional="False"
    Description="Templates will generated DeleteOnNull Attribute for Associations." %>

<%@ Property Category="3.Enum" Name="NameColumn"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to identify an Enum Table's Name Column."
    Default="((N|n)ame)|((T|t)ype(C|c)ode)" %>

<%@ Property Category="3.Enum" Name="DescriptionColumm"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to identify an Enum Table's Description Column."
    Default="(D|d)esc" %>

<%@ Property Category="4.Mapping" Name="DbmlFile"
    Type="System.String" Default="" Optional="False"
    Description="The full path to the dbml file."
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="4.Mapping" Name="UserAssociations"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of user defined associations that will not be removed when syncing to the database."%>


<script runat="template">
Private _namingConventions As NamingProperty = Nothing
<Category("2.Class"), Description("Specify naming conventions for DB and Entities.")> _
Public Property NamingConventions() As NamingProperty
    Get
        If _namingConventions Is Nothing Then
            _namingConventions = New NamingProperty()
        End If
        Return _namingConventions
    End Get
    Set
        _namingConventions = value
    End Set
End Property

Public Sub Generate()
    Dim watch As Stopwatch = Stopwatch.StartNew()
    Dim filePath As String = Path.GetFullPath(DbmlFile)
    Dim outputDirectory As String = Path.GetDirectoryName(filePath)

    If Not Directory.Exists(outputDirectory) Then
        Directory.CreateDirectory(outputDirectory)
    End If

    If SourceDatabase IsNot Nothing Then
        Me.Progress.MaximumValue = (SourceDatabase.Tables.Count + 1)
        If IncludeViews Then
            Me.Progress.MaximumValue += SourceDatabase.Views.Count
        End If
        If IncludeFunctions Then
            Me.Progress.MaximumValue += SourceDatabase.Commands.Count
        End If
        Me.Progress.[Step] = 1
    End If

    OnPreOutputWritten(Me.DbmlFile)

    Dim settings As New GeneratorSettings()
    settings.MappingFile = filePath
    settings.ContextNamespace = ContextNamespace
    settings.DataContextName = DataContextName
    settings.EntityNamespace = EntityNamespace
    settings.EntityBase = EntityBase
    settings.IncludeViews = IncludeViews
    settings.IncludeFunctions = IncludeFunctions
    settings.IncludeDeleteOnNull = IncludeDeleteOnNull
    settings.TableNaming = NamingConventions.TableNaming
    settings.EntityNaming = NamingConventions.EntityNaming
    settings.AssociationNaming = NamingConventions.AssociationNaming

    For Each clean As String In CleanExpression
        If Not String.IsNullOrEmpty(clean)
            settings.CleanExpressions.Add(New Regex(clean))
        End If
    Next
    For Each ignore As String In IgnoreList
        If Not String.IsNullOrEmpty(ignore)
            settings.IgnoreExpressions.Add(New Regex(ignore))
        End If
    Next

    If IncludeList IsNot Nothing
        For Each include As String In IncludeList
            If Not String.IsNullOrEmpty(include)
                settings.IncludeExpressions.Add(New Regex(include))
            End If
        Next
    End If
    If settings.IncludeExpressions.Count = 0 Then
        settings.IncludeExpressions.Add(New Regex(".*"))
    End If

    For Each enumRegex As String in EnumList
        If Not String.IsNullOrEmpty(enumRegex) Then
            settings.EnumExpressions.Add(New Regex(enumRegex))
        End IF
    Next

    For Each name As String In NameColumn
        If Not String.IsNullOrEmpty(name) Then
            settings.EnumNameExpressions.Add(New Regex(name))
        End IF
    Next
    
    For Each description As String In DescriptionColumm
        If Not String.IsNullOrEmpty(description) Then
            settings.EnumDescriptionExpressions.Add(New Regex(description))
        End IF
    Next

    If UserAssociations IsNot Nothing Then
        For Each userAssociation As String In Me.UserAssociations
            If Not String.IsNullOrEmpty(userAssociation) Then
                settings.UserDefinedAssociations.Add(userAssociation)
            End If
        Next
    End If
    
    Dim generator As New DbmlGenerator(settings)
    AddHandler generator.SchemaItemProcessed, AddressOf OnSchemaItemProcessed
    Dim db As Database = generator.Create(SourceDatabase)

    Dim outputFile As New OutputFile(Me.DbmlFile)
    outputFile.Metadata.Add("CustomTool", String.Empty)
    Me.RegisterOutput(outputFile)

    Dim enumXmlFileName As String = DbmlGenerator.GetEnumXmlFileName(DbmlFile)
    If System.IO.File.Exists(enumXmlFileName) Then
        Dim enumOutputFile As New OutputFile(enumXmlFileName, Me.DbmlFile)
        Me.RegisterOutput(enumOutputFile)
    End If

    watch.[Stop]()
    Response.WriteLine("Generate Time: " + watch.ElapsedMilliseconds.ToString() + " ms")
End Sub

Private Sub OnSchemaItemProcessed(ByVal sender As Object, ByVal e As SchemaItemProcessedEventArgs)
    Me.Progress.PerformStep()
    Response.WriteLine(e.Name)
End Sub

Private Sub OnSourceDatabaseChanged(ByVal sender As Object, ByVal e As EventArgs)
    If SourceDatabase Is Nothing Then
        Return
    End If
    
    Dim name as String = StringUtil.ToPascalCase(SourceDatabase.Database.Name)
    
    If String.IsNullOrEmpty(DbmlFile) OrElse DbmlFile.Equals("Database.dbml") Then
        DbmlFile = name + ".dbml"
    End If

    If String.IsNullOrEmpty(ContextNamespace) Then
        ContextNamespace = name + ".Data"
    End If

End Sub
Private Sub OnEntityNamespaceChanged(ByVal sender As Object, ByVal e As EventArgs)
    If String.IsNullOrEmpty(EntityNamespace) Then
        Return
    End If

    If String.IsNullOrEmpty(ContextNamespace) Then
        ContextNamespace = EntityNamespace
    End If
End Sub
Private Sub OnContextNamespaceChanged(ByVal sender As Object, ByVal e As EventArgs)
    If String.IsNullOrEmpty(ContextNamespace) Then
        Return
    End If

    If String.IsNullOrEmpty(EntityNamespace) Then
        EntityNamespace = ContextNamespace
    End If
End Sub

</script>
Generating Linq to Sql Dbml File ...
<% Generate() %>
