<%@ CodeTemplate Language="C#" TargetLanguage="XML"
    Description="Generate Linq to Sql Dbml File"
    Debug="true" OutputType="None" %>

<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\Common" %>
<%@ Assembly Name="Generator" Path="..\Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Database" Name="SourceDatabase"
    Type="SchemaExplorer.DatabaseSchema" Optional="False"
    OnChanged="OnSourceDatabaseChanged" DeepLoad="true" IncludeFunctions="true"
    Description="The source database for Linq to Sql." %>

<%@ Property Category="1.Database" Name="IncludeViews"
    Type="System.Boolean" Default="False" Optional="False"
    Description="Include views in mapping." %>

<%@ Property Category="1.Database" Name="IncludeFunctions"
    Type="System.Boolean" Default="False" Optional="False"
    Description="Include stored procedures and user functions in mapping." %>

<%@ Property Category="1.Database" Name="IgnoreList"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to ignore tables, views and commands when generating mapping."
    Default="sysdiagrams$" %>

<%@ Property Category="1.Database" Name="IncludeList"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to include tables and views when generating mapping."
    Default="" %>

<%@ Property Category="1.Database" Name="CleanExpression"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to clean table, view and column names."
    Default="^(sp|tbl|udf|vw)_" %>

<%@ Property Category="1.Database" Name="EnumList"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to identify an Enum Table."
    Default="(E|e)num$" %>

<%@ Property Category="2.Class" Name="EntityBase"
    Type="System.String" Default="LinqEntityBase" Optional="True"
    Description="The base class for the entity." %>

<%@ Property Category="2.Class" Name="EntityNamespace"
    Type="System.String" Default="" Optional="False"
    OnChanged="OnEntityNamespaceChanged"
    Description="The namespace to use for the entity class files."%>

<%@ Property Category="2.Class" Name="ContextNamespace"
    Type="System.String" Default="" Optional="False"
    OnChanged="OnContextNamespaceChanged"
    Description="The namespace to use for the context class files."%>

<%@ Property Category="2.Class" Name="DataContextName"
    Type="System.String" Default="" Optional="True"
    Description="The name of the DataContext."%>

<%@ Property Category="2.Class" Name="IncludeDeleteOnNull"
    Type="System.Boolean" Default="True" Optional="False"
    Description="Templates will generated DeleteOnNull Attribute for Associations." %>

<%@ Property Category="3.Enum" Name="NameColumn"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to identify an Enum Table's Name Column."
    Default="((N|n)ame)|((T|t)ype(C|c)ode)" %>

<%@ Property Category="3.Enum" Name="DescriptionColumm"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of regular expressions to identify an Enum Table's Description Column."
    Default="(D|d)esc" %>

<%@ Property Category="4.Mapping" Name="DbmlFile"
    Type="System.String" Default="" Optional="False"
    Description="The full path to the dbml file."
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="4.Mapping" Name="UserAssociations"
    Type="CodeSmith.CustomProperties.StringCollection" Optional="True"
    Description="List of user defined associations that will not be removed when syncing to the database."%>


<script runat="template">
    private NamingProperty _namingConventions = null;
    [Category("2.Class"), Description("Specify naming conventions for DB and Entities.")]
    public NamingProperty NamingConventions
    {
        get
        {
            if ( _namingConventions == null )
                _namingConventions = new NamingProperty();
            return _namingConventions;
        }
        set { _namingConventions = value; }
    }
    
    public void Generate()
    {
        Stopwatch watch = Stopwatch.StartNew();
        string filePath = Path.GetFullPath(DbmlFile);
        string outputDirectory = Path.GetDirectoryName(filePath);
        
        if (!Directory.Exists(outputDirectory))
            Directory.CreateDirectory(outputDirectory);

        if (SourceDatabase != null)
        {
            this.Progress.MaximumValue = (SourceDatabase.Tables.Count + 1);
            if (IncludeViews)
                this.Progress.MaximumValue += SourceDatabase.Views.Count;
            if (IncludeFunctions)
                this.Progress.MaximumValue += SourceDatabase.Commands.Count;
            this.Progress.Step = 1;
        }
        
        OnPreOutputWritten(this.DbmlFile);
        
        GeneratorSettings settings = new GeneratorSettings();
        settings.MappingFile = filePath;
        settings.ContextNamespace = ContextNamespace;
        settings.DataContextName = DataContextName;
        settings.EntityNamespace = EntityNamespace;
        settings.EntityBase = EntityBase;
        settings.IncludeViews = IncludeViews;
        settings.IncludeFunctions = IncludeFunctions;
        settings.IncludeDeleteOnNull = IncludeDeleteOnNull;
        settings.TableNaming = this.NamingConventions.TableNaming;
        settings.EntityNaming = this.NamingConventions.EntityNaming;
        settings.AssociationNaming = this.NamingConventions.AssociationNaming;
        
        foreach(string clean in CleanExpression)
            if (!string.IsNullOrEmpty(clean))
                settings.CleanExpressions.Add(new Regex(clean));
        
        foreach(string ignore in IgnoreList)
            if (!string.IsNullOrEmpty(ignore))
                settings.IgnoreExpressions.Add(new Regex(ignore));

        if (IncludeList != null)
            foreach(string include in IncludeList)
                if (!string.IsNullOrEmpty(include))
                    settings.IncludeExpressions.Add(new Regex(include));
        if (settings.IncludeExpressions.Count == 0)
            settings.IncludeExpressions.Add(new Regex(".*"));
                
        foreach(string enumRegex in EnumList)
            if (!string.IsNullOrEmpty(enumRegex))
                settings.EnumExpressions.Add(new Regex(enumRegex));
        
        foreach(string name in this.NameColumn)
            if (!string.IsNullOrEmpty(name))
                settings.EnumNameExpressions.Add(new Regex(name));
                
        foreach(string description in this.DescriptionColumm)
            if (!string.IsNullOrEmpty(description))
                settings.EnumDescriptionExpressions.Add(new Regex(description));
        
        if (UserAssociations != null)
            foreach(string userAssociation in this.UserAssociations)
                if (!string.IsNullOrEmpty(userAssociation))
                    settings.UserDefinedAssociations.Add(userAssociation);
        
        DbmlGenerator generator = new DbmlGenerator(settings);
        generator.SchemaItemProcessed += new EventHandler<SchemaItemProcessedEventArgs>(OnSchemaItemProcessed);
        Database db = generator.Create(SourceDatabase);
        
        OutputFile dbmlOutputFile = new OutputFile(this.DbmlFile);
        dbmlOutputFile.Metadata.Add("CustomTool", string.Empty);
        this.RegisterOutput(dbmlOutputFile);
        
        string enumXmlFileName = DbmlGenerator.GetEnumXmlFileName(DbmlFile);
        if(System.IO.File.Exists(enumXmlFileName))
        {
            OutputFile enumOutputFile = new OutputFile(enumXmlFileName, this.DbmlFile);
            this.RegisterOutput(enumOutputFile);
        }
        
        watch.Stop();
        Response.WriteLine("Generate Time: " + watch.ElapsedMilliseconds + " ms");
    }
    
    private void OnSchemaItemProcessed(object sender, SchemaItemProcessedEventArgs e)
    {
        this.Progress.PerformStep();
        Response.WriteLine(e.Name);
    }

    private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;
        
        string name = StringUtil.ToPascalCase(SourceDatabase.Database.Name);
        
        if(string.IsNullOrEmpty(DbmlFile) || DbmlFile.Equals("Database.dbml"))
            DbmlFile = name + ".dbml";

        if (string.IsNullOrEmpty(ContextNamespace))
            ContextNamespace = name + ".Data";

    }
    private void OnEntityNamespaceChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(EntityNamespace))
            return;
            
        if (string.IsNullOrEmpty(ContextNamespace))
            ContextNamespace = EntityNamespace;
    }
    private void OnContextNamespaceChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(ContextNamespace))
            return;
            
        if (string.IsNullOrEmpty(EntityNamespace))
            EntityNamespace = ContextNamespace;
    }

</script>
Generating Linq to Sql Dbml File ...
<% Generate(); %>