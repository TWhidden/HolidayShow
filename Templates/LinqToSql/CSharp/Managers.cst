<%@ CodeTemplate Language="C#" TargetLanguage="XML" 
    Description="Generate Linq to Sql Class File" 
    Debug="true" OutputType="None" CompilerVersion="v3.5" %>

<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\Common" %>
<%@ Assembly Name="Generator" Path="..\Common" %>
<%@ Assembly Src="Internal\Manager.cs" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="1.Database" Name="SourceDatabase" DeepLoad="true"
    Type="SchemaExplorer.DatabaseSchema"  Optional="False"
    Description="The source database for Linq to Sql." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>
    
<%@ Property Category="2.Mapping" Name="DbmlFile" 
    Type="System.String" Default="Database.dbml" Optional="False" 
    Description="The full path to the mapping file." 
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="3.Manager" Name="ManagerDirectory" 
    Type="System.String" Default="Managers" Optional="false" 
    Description="The folder to save the generated manager files." 
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="3.Manager" Name="DataContextFile" 
    Type="System.String" Default="" Optional="True" 
    Description="The path to the DataContext file to add managers to." 
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="3.Manager" Name="DataManagerName" 
    Type="System.String" Default="" Optional="True" 
    Description="The name of the data manager class." %>

<%@ Register Name="EntityManagerEditableClass" 
    Template="Internal\EntityManager.Editable.cst" 
    MergeProperties="False" %>

<%@ Register Name="DataManagerClass" 
    Template="Internal\DataManager.cst" 
    MergeProperties="True" ExcludeProperties="Database, DataManager" %>

<%@ Register Name="DataContextManagerClass" 
    Template="Internal\DataContext.Manager.cst" 
    MergeProperties="True" ExcludeProperties="Database, DataManager" %>

<%@ Register Name="EntityManagerGeneratedClass" 
    Template="Internal\EntityManager.Generated.cst" 
    MergeProperties="True" ExcludeProperties="Database, DataManager,EntityManager,Table" %>

<script runat="template">
    public void Generate()
    {
        if (!Directory.Exists(this.ManagerDirectory))
            Directory.CreateDirectory(this.ManagerDirectory);

        //if (ImplementManagers && string.IsNullOrEmpty(this.ManagerNamespace))
        //    this.ManagerNamespace = this.ClassNamespace + ".Managers";

        if (SourceDatabase != null)
        {    
            this.Progress.MaximumValue = (SourceDatabase.Tables.Count + 2);
                
            this.Progress.Step = 1;
        }
        
        Database database = Dbml.FromFile(this.DbmlFile);
        if (database == null)
            throw new Exception("Error loading Dbml file.");
            
        Dbml.FillInDefaults(database);
        
        DataManager databaseManager = ManagerGenerator.Create(SourceDatabase, database);
        //override the default name
        if (!string.IsNullOrEmpty(DataManagerName))
            databaseManager.DataManagerName = DataManagerName;
            
        CreateDataManagerClass(database, databaseManager);
        CreateDataContextManagerClass(database, databaseManager);
        CreateEntityManagerClasses(database, databaseManager);
        
        if (this.Framework == FrameworkEnum.v40)
            this.RegisterReference(Path.GetFullPath(Path.Combine(
                this.CodeTemplateInfo.DirectoryName,
                "..\\Common\\v4.0\\CodeSmith.Data.dll")));
        else
            this.RegisterReference(Path.GetFullPath(Path.Combine(
                this.CodeTemplateInfo.DirectoryName,
                "..\\Common\\v3.5\\CodeSmith.Data.dll")));
    }
    
    public void CreateEntityManagerClasses(Database database, DataManager dataManager)
    {
        EntityManagerGeneratedClass t = this.Create<EntityManagerGeneratedClass>();
        this.CopyPropertiesTo(t);
        t.DataManager = dataManager;
        t.Database = database;
        t.Framework = Framework;
        t.EnumDatabase = this.EnumDatabase;

        EntityManagerEditableClass p = this.Create<EntityManagerEditableClass>();
        this.CopyPropertiesTo(p);
        p.ClassNamespace = this.ManagerNamespace;
        
        foreach(EntityManager manager in dataManager.Managers)
        {
            Stopwatch watch = Stopwatch.StartNew();

            string className = manager.ManagerName;
            Table table = database.Tables[manager.TableName];

            string parentFileName = className + ".cs";
            parentFileName = Path.Combine(ManagerDirectory, parentFileName);

            if (!File.Exists(parentFileName))
            {
                p.ClassName = className;
                p.Table = table;
                Response.WriteLine(parentFileName);
                p.RenderToFile(parentFileName, false);
            }
            
            string fileName = className + ".Generated.cs";
            fileName = Path.Combine(ManagerDirectory, fileName);
            
            Debug.WriteLine(string.Format("Creating Entity Manager Class '{0}' ...", className));
            t.EntityManager = manager;
            t.Table = table;
            t.RenderToFile(fileName, parentFileName, true);
            
            Debug.WriteLine(string.Format("Created '{0}' in {1} ms.", 
                className,
                watch.Elapsed.TotalMilliseconds.ToString()));
            
            this.Progress.PerformStep();
        }
    }
    
    public void CreateDataManagerClass(Database database, DataManager dataManager)
    {
        string fileName = dataManager.DataManagerName + ".cs";
        fileName = Path.Combine(ManagerDirectory, fileName);
        
        DataManagerClass t = this.Create<DataManagerClass>();
        this.CopyPropertiesTo(t);
        t.DataManager = dataManager;
        t.Database = database;
        
        t.RenderToFile(fileName, true);
        
        this.Progress.PerformStep();
    }
    
    public void CreateDataContextManagerClass(Database database, DataManager dataManager)
    {
        string fileName = database.Class + ".Manager.cs";
        string parentFile = DataContextFile;
        
        string dataFolder;
        
        if (string.IsNullOrEmpty(parentFile))
        {
            parentFile = Path.Combine(ManagerDirectory, database.Class + ".cs");
            dataFolder = ManagerDirectory;
        }
        else
        {
            dataFolder = Path.GetDirectoryName(parentFile);
        }
        
        fileName = Path.Combine(dataFolder, fileName);
        
        DataContextManagerClass t = this.Create<DataContextManagerClass>();
        this.CopyPropertiesTo(t);
        t.DataManager = dataManager;
        t.Database = database;
        
        t.RenderToFile(fileName, parentFile, true);
        
        this.Progress.PerformStep();

    }
    
    private string _enumXmlFileName = null;
    private string EnumXmlFileName
    {
        get
        {
            if(String.IsNullOrEmpty(_enumXmlFileName))
                _enumXmlFileName = DbmlGenerator.GetEnumXmlFileName(DbmlFile);
            return _enumXmlFileName;
        }
    }

    
    private LinqToSqlShared.Generator.DbmlEnum.Database _enumDatabase = null;
    private bool _isEnumDatabaseLoaded = false;
    private LinqToSqlShared.Generator.DbmlEnum.Database EnumDatabase
    {
        get
        {
            if(!_isEnumDatabaseLoaded)
            {
                _enumDatabase = LinqToSqlShared.Generator.DbmlEnum.Database.DeserializeFromFile(EnumXmlFileName);
                _isEnumDatabaseLoaded = true;
            }
            return _enumDatabase;
        }
    }

</script>
Generating Linq to Sql Entities ...
<% Generate(); %>