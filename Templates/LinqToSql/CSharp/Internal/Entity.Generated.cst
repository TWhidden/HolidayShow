<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Class." CompilerVersion="v3.5" %>

<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database"
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False"
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type"
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False"
    Description="The Type instance for this entity. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="TableName"
    Type="System.String" Default="" Optional="True"
    Description="The name of the table this class is mapped to." %>

<%@ Property Category="2.Class" Name="InterfaceNamespace" 
    Type="System.String" Default="" Optional="True" 
    Description="The namespace for the interfaces.  Leave blank to not generate them." %>

<%@ Property Category="2.Class" Name="EntityBase"
    Type="System.String" Default="LinqEntityBase" Optional="True"
    Description="The base class for the entity." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="LinqToSqlShared.Generator.FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Which version of the .Net Framework is being generated for." %>

<%@ Property Category="2.Class" Name="IncludeDataContract"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include WCF DataContract attributes." %>

<%@ Property Category="2.Class" Name="IncludeDataServices"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include ADO.Net DataServices attributes." %>

<%@ Property Category="2.Class" Name="IncludeDataRules"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include CodeSmith.Data rules." %>

<%@ Property Category="2.Class" Name="IncludeXmlSerialization"
    Type="System.Boolean" Default="false" Optional="False"
    Description="Include Xml serialization support." %>

<%@ Property Category="2.Class" Name="IncludeManyToMany"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Generate ManyToMany Associations." %>

<%@ Property Name="AssociationNamingSuffix"
    Type="AssociationNamingEnum" Default="ListSuffix" Optional="False"
    Description="Suffix for Many To Many Associations" %>

<%@ Property Name="EnumDatabase"
    Type="LinqToSqlShared.Generator.DbmlEnum.Database" Optional="True"
    Description="Enum Collection for Database." %>

<%@ Map Name="CSharpKeyWordEscape"
    Src="CSharpKeyWordEscape.csmap" Reverse="False"
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="CSharpAlias"
    Src="System-CSharpAlias.csmap" Reverse="False"
    Description="Convert system data types to c# alias" %>
#pragma warning disable 1591
#pragma warning disable 0414        
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace <%= Database.EntityNamespace %>
{
    /// <summary>
<% if (!string.IsNullOrEmpty(TableName)) { %>
    /// The class representing the <%= TableName %> table.
<% } else { %>
    /// Class representing <%= Type.Name %> data.
<% } %>
    /// </summary>
<% if (IncludeXmlSerialization) { %>
    [System.Serializable]
<% } %>
    <%= GetClassAttributes() %>
<% if (IncludeDataContract) { %>
    [System.Runtime.Serialization.DataContract(IsReference = true)]
<% } %>
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(<%= Database.EntityNamespace %>.<%= Type.Name %>.Metadata))]
    <% if(IncludeDataServices) { %>
    <%
    StringBuilder dataServiceKey = new StringBuilder();
    foreach(Column column in Type.PrimaryKeyColumns)
    {
        if(dataServiceKey.Length > 0)
            dataServiceKey.Append(", ");
        dataServiceKey.AppendFormat("\"{0}\"", column.Member);
    }
    %>
<% if (dataServiceKey.Length > 0) { %>
    [System.Data.Services.Common.DataServiceKey(<%= dataServiceKey.ToString() %>)]
<% } %>
    <% } %>
<%
    StringBuilder sb = new StringBuilder();
    foreach(Column column in Type.PrimaryKeyColumns)
    {
        if(sb.Length > 0)
            sb.Append(", ");

        sb.Append(column.Member);
        sb.Append(": {");
        sb.Append(column.Member);
        sb.Append("}");
    }
%>
<% if (sb.Length > 0) { %>
    [System.Diagnostics.DebuggerDisplay("<%= sb.ToString() %>")]
<% } %>
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> partial class <%= Type.Name %>
<% if (!string.IsNullOrEmpty(EntityBase)) { %>
        : <%= EntityBase %><% if (IncludeDataContract) { %>, ICloneable<% } %><% if(!string.IsNullOrEmpty(this.InterfaceNamespace)) { %>, <% =this.InterfaceNamespace %>.I<%=Type.Name%> <%}%> 
<% } %>
    {
<% if (IncludeDataRules) { %>
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="<%= Type.Name %>"/> class.
        /// </summary>
        <%= GeneratedCodeAttribute %>
        static <%= Type.Name %>()
        {
            AddSharedRules();
        }
        #endregion
<% } // IncludeDataRules %>

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Type.Name %>"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        <%= GeneratedCodeAttribute %>
        public <%= Type.Name %>()
        {
<% if (IncludeDataContract) { %>
            Initialize();
        }

        <%= GeneratedCodeAttribute %>
        private void Initialize()
        {
<% } %>
<% foreach(Association a in Type.EntityRefAssociations) { %>
            <%= a.Storage %> = default(System.Data.Linq.EntityRef<<%= a.Type %>>);
<% } // foreach Association%>
<% foreach(Association a in Type.EntitySetAssociations) { %>
            <%= a.Storage %> = new System.Data.Linq.EntitySet<<%= a.Type %>>(On<%= a.Member %>Add, On<%= a.Member %>Remove);
<% } // foreach Association%>
<% foreach(Column c in Type.Columns) { %>
<% if (c.IsDelayLoaded == true) { %>
            <%= c.Storage %> = default(System.Data.Linq.Link<<%= c.Type %>>);
<% } // IsDelayLoaded%>
<% } // foreach Column%>
            OnCreated();
        }
        #endregion

        #region Column Mapped Properties
<% DataMemberCount = 0;
foreach(Column column in Type.Columns) {
    string dataType = column.Type;
    string fieldType = column.Type;
    string storageGet = column.Storage;
    string storageSet = column.Storage;
    string valueConvert = "value";
    bool isVersion = column.IsVersion == true && dataType.Equals("System.Data.Linq.Binary");
    bool useByteArray = IncludeXmlSerialization && dataType.Equals("System.Data.Linq.Binary");
    
    if (useByteArray)
        dataType = "byte[]";
        
    LinqToSqlShared.Generator.DbmlEnum.Enum enumType = EnumDatabase != null
        ? EnumDatabase.Enums.FirstOrDefault(e => e.Name == column.Type) : null;

    if (column.IsDelayLoaded == true && column.IsPrimaryKey == false)
    {
        dataType = CSharpAlias[dataType];
        fieldType = string.Format("System.Data.Linq.Link<{0}>", dataType);
        storageGet = storageGet + ".Value";
        storageSet = storageGet;
    }
    else if (column.CanBeNull == true && (CommonUtility.IsNullableType(dataType) || enumType != null))
    {
        dataType = string.Format("Nullable<{0}>", CSharpAlias[dataType]);
        fieldType = dataType;
    }
    else
    {
        dataType = CSharpAlias[dataType];
        fieldType = dataType;
    }

    Association a = Type.GetForeignKeyAssociation(column);
%>

<% if (column.IsDbGenerated == true) { %>
        <%= GeneratedCodeAttribute %>
        private <%= fieldType %> <%= column.Storage %> = default(<%= fieldType %>);
<% } else { %>
        <%= GeneratedCodeAttribute %>
        private <%= fieldType %> <%= column.Storage %>;
<% } %>

        /// <summary>
<% if (!column.IsDbGenerated == true && column.IsReadOnly == false) { %>
        /// Gets or sets the <%= column.Name %> column value.
<% } else { %>
        /// Gets the <%= column.Name %> column value.
<% } %>
        /// </summary>
<% if (isVersion) { %>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
<% } %>
<% if (column.IsDelayLoaded == true) { %>
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
<% } %>
        <%= CreateAttributes(column) %>
<% if (IncludeDataContract) { %>
        [System.Runtime.Serialization.DataMember(Order = <%= ++DataMemberCount %>)]
<% } %>
<% if(enumType != null) { %>
        [System.ComponentModel.DataAnnotations.UIHint("Enumeration")]
<% } %>
        <%= GeneratedCodeAttribute %>
        <%= Naming.GetModifier(column.AccessModifier, column.Modifier) %> <%= dataType %> <%= column.Member %>
        {
            get { return <%= storageGet %>; }
<% if (!column.IsReadOnly == true) { %>
            set
            {
                if (<%= storageSet %> != <%= valueConvert %>)
                {
<% if (a != null) { %>
                    if (<%= a.Storage %>.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
<% } %>
                    On<%= column.Member %>Changing(<%= valueConvert %>);
<% if (!string.IsNullOrEmpty(EntityBase)) { %>
                    SendPropertyChanging("<%= column.Member %>");
<% } %>
                    <%= storageSet %> = <%= valueConvert %>;
<% if (!string.IsNullOrEmpty(EntityBase)) { %>
                    SendPropertyChanged("<%= column.Member %>");
<% } %>
                    On<%= column.Member %>Changed();
                }
            }
<% } // if IsReadOnly %>
        }
<% } // foreach column%>
        #endregion

        #region Association Mapped Properties
<%  foreach(Association a in Type.EntityRefAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>

        <%= GeneratedCodeAttribute %>
        private System.Data.Linq.EntityRef<<%= a.Type %>> <%= a.Storage %>;

        /// <summary>
        /// Gets or sets the <see cref="<%= a.Type %>"/> association.
        /// </summary>
        <%= CreateAttribute(a) %>
<% if (IncludeDataContract) { %>
        [System.Runtime.Serialization.DataMember(Order = <%= ++DataMemberCount %>, EmitDefaultValue = false)]
<% } %>
        <%= GeneratedCodeAttribute %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> <%= a.Type %> <%= a.Member %>
        {
<% if (IncludeDataContract) { %>
            get { return (serializing && !<%= a.Storage %>.HasLoadedOrAssignedValue) ? null : <%= a.Storage %>.Entity; }
<% } else { %>
            get { return <%= a.Storage %>.Entity; }
<% } %>
            set
            {
<% if (info.HasOtherAssociation) { %>
                <%= a.Type %> previousValue = <%= a.Storage %>.Entity;
                if (previousValue != value || <%= a.Storage %>.HasLoadedOrAssignedValue == false)
                {
                    On<%= a.Member %>Changing(value);
                    SendPropertyChanging("<%= a.Member %>");
                    if (previousValue != null)
                    {
                        <%= a.Storage %>.Entity = null;
                        previousValue.<%= info.OtherAssociation.Member %><%= info.RemoveSyntax %>;
                    }
                    <%= a.Storage %>.Entity = value;
                    if (value != null)
                    {
                        value.<%= info.OtherAssociation.Member %><%= info.AddSyntax %>;
<% if (a.IsForeignKey == true) { %>
<% for(int i = 0; i < info.AssignColumns.Count; i++) { %>
<% if (info.AssignColumns[i].CanBeNull == false && info.OtherColumns[i].CanBeNull == true && CommonUtility.IsNullableType(info.OtherColumns[i].Type)) { %>
                        <%= info.AssignColumns[i].Storage %> = value.<%= info.OtherColumns[i].Member %>.HasValue
                            ? value.<%= info.OtherColumns[i].Member %>.Value
                            : default(<%= GetColumnType(info.AssignColumns[i]) %>);
<% } else { %>
                        <%= info.AssignColumns[i].Storage %> = value.<%= info.OtherColumns[i].Member %>;
<% } %>
<% } %>
                    }
                    else
                    {
<% for(int i = 0; i < info.AssignColumns.Count; i++) { %>
                        <%= info.AssignColumns[i].Storage %> = default(<%= GetColumnType(info.AssignColumns[i]) %>);
<% } %>
<% } // IsForeignKey %>
                    }
                    SendPropertyChanged("<%= a.Member %>");
                    On<%= a.Member %>Changed();
                }
<% } else { %>
                if (<%= a.Storage %>.Entity != value)
                {
                    SendPropertyChanging("<%= a.Member %>");
                    <%= a.Storage %>.Entity = value;
                    SendPropertyChanged("<%= a.Member %>");
                }
<% } // HasOtherAssociation %>
            }
        }
        
        <% if(!string.IsNullOrEmpty(this.InterfaceNamespace)) { %>
        <%= this.InterfaceNamespace %>.I<%= a.Type %> <%= this.InterfaceNamespace %>.I<%= this.Type.Name %>.<%= a.Member %>
        {
            get { return this.<%= a.Member %>; }
            set { this.<%= a.Member %> = value as <%= Database.EntityNamespace %>.<%= a.Type %>; }
        }
        <% } %>
        
<% if (IncludeXmlSerialization) { %>

        /// <summary>
        /// Used by the <see cref="System.Xml.Serialization.XmlSerializer"/> to determine if <see cref="<%= a.Member %>"/> should be serialized.
        /// </summary>
        /// <returns><c>true</c> if <see cref="<%= a.Member %>"/> should be serialized; otherwise, <c>false</c>.</returns>
        <%= GeneratedCodeAttribute %>
        public bool ShouldSerialize<%= a.Member %>()
        {
            return <%= a.Storage %>.HasLoadedOrAssignedValue;
        }
<% } %>
        
<% } %>
<% hasSelfAssociation = false; // reset flag %>
<% foreach(Association a in Type.EntitySetAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>

        <%= GeneratedCodeAttribute %>
        private System.Data.Linq.EntitySet<<%= a.Type %>> <%= a.Storage %>;

        /// <summary>
        /// Gets or sets the <see cref="<%= a.Type %>"/> association.
        /// </summary>
        <%= CreateAttribute(a) %>
<% if (IncludeDataContract) { %>
        [System.Runtime.Serialization.DataMember(Order=<%= ++DataMemberCount %>, EmitDefaultValue=false)]
<% } %>
        <%= GeneratedCodeAttribute %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> System.Data.Linq.EntitySet<<%= a.Type %>> <%= a.Member %>
        {
<% if (IncludeDataContract) { %>
            get { return (serializing && !<%= a.Storage %>.HasLoadedOrAssignedValues) ? null : <%= a.Storage %>; }
<% } else { %>
            get { return <%= a.Storage %>; }
<% } %>
            set { <%= a.Storage %>.Assign(value); }
        }
        
        <% if(!string.IsNullOrEmpty(this.InterfaceNamespace)) { %>
        System.Collections.Generic.IEnumerable<<%= this.InterfaceNamespace %>.I<%= a.Type %>> <%= this.InterfaceNamespace %>.I<%= this.Type.Name %>.<%= a.Member %>
        {
            get
            {
                return this.<%= a.Member %>.Cast<<%= this.InterfaceNamespace %>.I<%= a.Type %>>();
            }
            set
            {
                if (value == null)
                    this.<%= a.Member %>.Clear();
                else
                    this.<%= a.Member %>.SetSource(value.Cast<<%= Database.EntityNamespace %>.<%= a.Type %>>());
            }
        }
        <% } %>
        
<% if (IncludeXmlSerialization) { %>

        /// <summary>
        /// Used by the <see cref="System.Xml.Serialization.XmlSerializer"/> to determine if <see cref="<%= a.Member %>"/> should be serialized.
        /// </summary>
        /// <returns><c>true</c> if <see cref="<%= a.Member %>"/> should be serialized; otherwise, <c>false</c>.</returns>
        <%= GeneratedCodeAttribute %>
        public bool ShouldSerialize<%= a.Member %>()
        {
            return <%= a.Storage %>.HasLoadedOrAssignedValues;
        }
<% } %>

        [System.Diagnostics.DebuggerNonUserCode]
        <%= GeneratedCodeAttribute %>
        private void On<%= a.Member %>Add(<%= a.Type %> entity)
        {
            SendPropertyChanging(null);
            entity.<%= info.OtherAssociation.Member %> = this;
            SendPropertyChanged(null);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        <%= GeneratedCodeAttribute %>
        private void On<%= a.Member %>Remove(<%= a.Type %> entity)
        {
            SendPropertyChanging(null);
            entity.<%= info.OtherAssociation.Member %> = null;
            SendPropertyChanged(null);
        }
<% if(IncludeManyToMany && info.OtherType.IsManyToMany())
    {
        ManyToManyInfo manyMany = GetManyToManyInfo(info.OtherType);
        if (manyMany.Skip || manyMany.RightType == null || manyMany.LeftType == null)
            continue;

        string memberName = StringUtil.ToCamelCase(manyMany.PropertyName);
%>

        <%= GeneratedCodeAttribute %>
        private System.Data.Linq.EntitySet<<%=manyMany.RightType.Name%>> _<%=memberName%>;

        /// <summary>
        /// Gets or sets the Many To Many <%=manyMany.PropertyName%> list.
        /// </summary>
        /// <value>The <%=manyMany.PropertyName%> list.</value>
        <%= GeneratedCodeAttribute %>
        public System.Data.Linq.EntitySet<<%=manyMany.RightType.Name%>> <%=manyMany.PropertyName%>
        {
            get
            {
<% if (IncludeDataContract) { %>
                if (serializing)
                    return null;
<% } %>

                if (_<%=memberName%> == null)
                {
                    _<%=memberName%> = new System.Data.Linq.EntitySet<<%=manyMany.RightType.Name%>>(On<%=manyMany.PropertyName%>Add, On<%=manyMany.PropertyName%>Remove);
                    _<%=memberName%>.SetSource(<%=a.Member %>.Select(c => c.<%=manyMany.JoinRightAssociation.Member%>));
                }
                return _<%=memberName%>;
            }
            set
            {
                _<%=memberName%>.Assign(value);
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        <%= GeneratedCodeAttribute %>
        private void On<%=manyMany.PropertyName%>Add(<%=manyMany.RightType.Name%> entity)
        {
            SendPropertyChanging(null);
            <%= a.Member %>.Add(new <%=manyMany.JoinType.Name%> { <%=manyMany.JoinLeftAssociation.Member%> = this, <%=manyMany.JoinRightAssociation.Member%> = entity });
            SendPropertyChanged(null);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        <%= GeneratedCodeAttribute %>
        private void On<%=manyMany.PropertyName%>Remove(<%=manyMany.RightType.Name%> entity)
        {
            SendPropertyChanging(null);
            var <%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%> = <%= a.Member %>.FirstOrDefault(<%= BuildManyToManyRemoveLamba(manyMany) %>);
            <%= a.Member %>.Remove( <%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%>);
            SendPropertyChanged(null);
        }

<%      } // many to many%>
<% } // foreach Association%>
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        <%= GeneratedCodeAttribute %>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        <%= GeneratedCodeAttribute %>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        <%= GeneratedCodeAttribute %>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        <%= GeneratedCodeAttribute %>
        partial void OnCreated();
<% foreach(Column column in Type.Columns) {
    string dataType = CSharpAlias[column.Type];
    
    LinqToSqlShared.Generator.DbmlEnum.Enum enumType = EnumDatabase != null
        ? EnumDatabase.Enums.FirstOrDefault(e => e.Name == column.Type) : null;

    if (column.CanBeNull == true && (CommonUtility.IsNullableType(column.Type) || enumType != null))
        dataType = string.Format("Nullable<{0}>", dataType);
%>
        /// <summary>Called when <see cref="<%= column.Member %>"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        <%= GeneratedCodeAttribute %>
        partial void On<%= column.Member %>Changing(<%= dataType %> value);
        /// <summary>Called after <see cref="<%= column.Member %>"/> has Changed.</summary>
        <%= GeneratedCodeAttribute %>
        partial void On<%= column.Member %>Changed();
<% } // foreach %>
<% foreach(Association a in Type.EntityRefAssociations) { %>
        /// <summary>Called when <see cref="<%= a.Member %>"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        <%= GeneratedCodeAttribute %>
        partial void On<%= a.Member %>Changing(<%= a.Type %> value);
        /// <summary>Called after <see cref="<%= a.Member %>"/> has Changed.</summary>
        <%= GeneratedCodeAttribute %>
        partial void On<%= a.Member %>Changed();
<% } // foreach Association%>

        #endregion

<% if (IncludeDataContract) { %>
        #region Serialization
        <%= GeneratedCodeAttribute %>
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        <%= GeneratedCodeAttribute %>
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        <%= GeneratedCodeAttribute %>
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        <%= GeneratedCodeAttribute %>
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }

        /// <summary>
        /// Deserializes an instance of <see cref="<%= Type.Name %>"/> from XML.
        /// </summary>
        /// <param name="xml">The XML string representing a <see cref="<%= Type.Name %>"/> instance.</param>
        /// <returns>An instance of <see cref="<%= Type.Name %>"/> that is deserialized from the XML string.</returns>
        <%= GeneratedCodeAttribute %>
        public static <%= Type.Name %> FromXml(string xml)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(<%= Type.Name %>));

            using (var sr = new System.IO.StringReader(xml))
            using (var reader = System.Xml.XmlReader.Create(sr))
            {
                return deserializer.ReadObject(reader) as <%= Type.Name %>;
            }
        }

        /// <summary>
        /// Deserializes an instance of <see cref="<%= Type.Name %>"/> from a byte array.
        /// </summary>
        /// <param name="buffer">The byte array representing a <see cref="<%= Type.Name %>"/> instance.</param>
        /// <returns>An instance of <see cref="<%= Type.Name %>"/> that is deserialized from the byte array.</returns>
        <%= GeneratedCodeAttribute %>
        public static <%= Type.Name %> FromBinary(byte[] buffer)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(<%= Type.Name %>));

            using (var ms = new System.IO.MemoryStream(buffer))
            using (var reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max))
            {
                return deserializer.ReadObject(reader) as <%= Type.Name %>;
            }
        }
        
        #endregion
<% if (!string.IsNullOrEmpty(EntityBase)) { %>

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        <%= GeneratedCodeAttribute %>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        <%= GeneratedCodeAttribute %>
        public <%= Type.Name %> Clone()
        {
            return (<%= Type.Name %>)((ICloneable)this).Clone();
        }
        #endregion
 <% } %>
<% } %>
<% if (!string.IsNullOrEmpty(EntityBase)) { %>

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        <%= GeneratedCodeAttribute %>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
<%  foreach(Association a in Type.EntityRefAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>
            <%=a.Storage%> = Detach(<%=a.Storage%>);
<%  }
    foreach(Association a in Type.EntitySetAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>
            <%=a.Storage%> = Detach(<%=a.Storage%>, On<%=a.Member%>Add, On<%=a.Member%>Remove);
<% } %>
<% foreach(Column c in Type.Columns) { %>
<% if (c.IsDelayLoaded == true) { %>
            <%= c.Storage %> = Detach(<%=c.Storage%>);
<% } // IsDelayLoaded%>
<% } // foreach Column%>
        }
        #endregion
   <% } %>
    }
}
#pragma warning restore 1591
#pragma warning restore 0414

<script runat="template">

    private int DataMemberCount = 0;
    private List<string> manyToManyNames = new List<string>();
    private bool hasSelfAssociation = false; // only need one version of a self many to many

    public string BuildManyToManyRemoveLamba(ManyToManyInfo info)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("c => ");

        string[] leftThisKey = info.JoinLeftAssociation.GetThisKey();
        string[] leftKey = Dbml.ParseKeyField(info.LeftKey);

        for(int i = 0; i < leftThisKey.Length; i++)
        {
            if (i > 0)
            {
                sb.AppendLine();
                sb.Append("                && ");
            }

            sb.AppendFormat("c.{0} == {1}", leftThisKey[i], leftKey[i]);
        }

        string[] rightThisKey = info.JoinRightAssociation.GetThisKey();
        string[] rightKey = Dbml.ParseKeyField(info.RightKey);

        for(int i = 0; i < rightThisKey.Length; i++)
        {
            sb.AppendLine();
            sb.Append("                && ");
            sb.AppendFormat("c.{0} == entity.{1}", rightThisKey[i], rightKey[i]);
        }

        return sb.ToString();
    }

    public string ApplyAssociationSuffix(string associationName)
    {
        return AssociationNamingSuffix == AssociationNamingEnum.ListSuffix ?
                associationName + "List" :
                StringUtil.ToPlural(associationName);
    }

    private static readonly Regex _sizeRegex = new Regex(@"(?<Size>\d+)", RegexOptions.Compiled);

    public int GetSize(string s)
    {
        int size = 0;

        Match m = _sizeRegex.Match(s);
        if (!m.Success)
            return size;

        string temp = m.Groups["Size"].Value;
        int.TryParse(temp, out size);
        return size;
    }

    public string GetColumnType(Column column)
    {
        string dataType = column.Type;

        if (column.CanBeNull == true && CommonUtility.IsNullableType(dataType))
            dataType = string.Format("Nullable<{0}>", CSharpAlias[dataType]);
        else
            dataType = CSharpAlias[dataType];

        return dataType;
    }

    public string GetClassAttributes()
    {
        StringBuilder s = new StringBuilder();
        if (!string.IsNullOrEmpty(TableName))
        {
            s.AppendFormat("[System.Data.Linq.Mapping.Table(Name=\"{0}\")]", TableName);
            AppendInheritanceAttribute(this.Type, s);
        }

        return s.ToString();
    }

    private void AppendInheritanceAttribute(LinqToSqlShared.DbmlObjectModel.Type t, StringBuilder s)
    {
        if (!string.IsNullOrEmpty(t.InheritanceCode))
        {
            s.AppendLine();
            if (t.IsInheritanceDefault == true)
                s.AppendFormat(
                    "    [System.Data.Linq.Mapping.InheritanceMapping(Code = \"{0}\", Type = typeof({1}), IsDefault=true)]",
                    t.InheritanceCode, t.Name);
            else
                s.AppendFormat(
                    "    [System.Data.Linq.Mapping.InheritanceMapping(Code = \"{0}\", Type = typeof({1}))]",
                    t.InheritanceCode, t.Name);
        }

        foreach(LinqToSqlShared.DbmlObjectModel.Type d in t.SubTypes)
            AppendInheritanceAttribute(d, s);
    }

    public AssociationInfo GetAssociationInfo(Association a)
    {
        AssociationInfo info = new AssociationInfo();
        info.OtherType = Database.GetTypeByName(a.Type);
        if (info.OtherType == null)
            throw new Exception("Invaild Type for Association: " + a.Name);

        info.HasOtherAssociation = info.OtherType.Associations.Contains(a.ToOtherKey());
        if (info.HasOtherAssociation)
            info.OtherAssociation = info.OtherType.Associations[a.ToOtherKey()];
        else
            return info; // no more work needed

        if (string.IsNullOrEmpty(a.OtherKey))
        {
            info.OtherColumns = new List<Column>(info.OtherType.PrimaryKeyColumns);
        }
        else
        {
            string[] members = a.OtherKey.Split(new char[] { ',' });
            info.OtherColumns = info.OtherType.GetColumnsByMembers(members);
        }

        if (info.OtherColumns == null || info.OtherColumns.Count == 0)
            throw new Exception("Invaild OtherKey for Association: " + a.Name);

        if (string.IsNullOrEmpty(a.ThisKey))
        {
            info.AssignColumns = new List<Column>(Type.PrimaryKeyColumns);
        }
        else
        {
            string[] members = a.ThisKey.Split(new char[] { ',' });
            info.AssignColumns = Type.GetColumnsByMembers(members);
        }

        if (info.AssignColumns == null || info.AssignColumns.Count == 0)
            throw new Exception("Invaild ThisKey for Association: " + a.Name);

        info.IsOneToOne = (a.IsForeignKey == true
            && a.Cardinality == Cardinality.One
            && info.OtherAssociation.IsForeignKey == false
            && info.OtherAssociation.Cardinality == Cardinality.One)
            || (a.IsForeignKey == false
            && a.Cardinality == Cardinality.One
            && info.OtherAssociation.IsForeignKey == true
            && info.OtherAssociation.Cardinality == Cardinality.One);

        if (info.IsOneToOne)
        {
            info.AddSyntax = " = this";
            info.RemoveSyntax = " = null";
        }
        else
        {
            info.AddSyntax = ".Add(this)";
            info.RemoveSyntax = ".Remove(this)";
        }

        return info;
    }

    public string CreateAttributes(Column c)
    {
        StringBuilder s = new StringBuilder();
        s.Append("[System.Data.Linq.Mapping.Column(");
        s.AppendFormat("Name = \"{0}\"", c.Name);
        s.AppendFormat(", Storage = \"{0}\"", c.Storage);
        s.AppendFormat(", DbType = \"{0}\"", c.DbType);
        if (c.IsPrimaryKey == true)
            s.Append(", IsPrimaryKey = true");
        if (c.IsDbGenerated == true)
            s.Append(", IsDbGenerated = true");
        if (c.IsVersion == true)
            s.Append(", IsVersion = true");
        if (c.IsDiscriminator == true)
            s.Append(", IsDiscriminator = true");
        if (c.CanBeNull == false)
            s.Append(", CanBeNull = false");
        if (c.UpdateCheck != UpdateCheck.Always)
            s.AppendFormat(", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.{0}", c.UpdateCheck.ToString());
        if (!string.IsNullOrEmpty(c.Expression))
            s.AppendFormat(", Expression = \"{0}\"", c.Expression);
        s.Append(")]");

        string prefix = String.Concat(Environment.NewLine, "        ");

        if (c.Type.Contains("String"))
        {
            int size = LinqToSqlShared.Generator.CommonUtility.GetColumnSize(c.DbType);
            if (0 < size && size < 8000)
                s.AppendFormat("{0}[System.ComponentModel.DataAnnotations.StringLength({1})]", prefix, size);
        }

        return s.ToString();
    }

    public string CreateAttribute(Association a)
    {
        StringBuilder s = new StringBuilder();
        s.Append("[System.Data.Linq.Mapping.Association(");
        s.AppendFormat("Name = \"{0}\"", a.Name);
        s.AppendFormat(", Storage = \"{0}\"", a.Storage);
        if (!string.IsNullOrEmpty(a.ThisKey))
            s.AppendFormat(", ThisKey = \"{0}\"", a.ThisKey);
        if (!string.IsNullOrEmpty(a.OtherKey))
            s.AppendFormat(", OtherKey = \"{0}\"", a.OtherKey);
        if (a.Cardinality == Cardinality.One && a.IsForeignKey != true)
            s.Append(", IsUnique = true");
        if (a.IsForeignKey == true)
            s.Append(", IsForeignKey = true");
        if (a.DeleteOnNull == true)
            s.Append(", DeleteOnNull = true");
        if (!string.IsNullOrEmpty(a.DeleteRule))
            s.AppendFormat(", DeleteRule = \"{0}\"", a.DeleteRule);

        s.Append(")]");

        return s.ToString();
    }

    public struct AssociationInfo
    {
        public bool HasOtherAssociation;
        public Association OtherAssociation;

        public LinqToSqlShared.DbmlObjectModel.Type OtherType;

        public List<Column> OtherColumns;
        public List<Column> AssignColumns;

        public bool IsOneToOne;
        public string AddSyntax;
        public string RemoveSyntax;
    }

    public ManyToManyInfo GetManyToManyInfo(LinqToSqlShared.DbmlObjectModel.Type type)
    {
        bool leftKeyPicked = false;

        ManyToManyInfo manyMany = new ManyToManyInfo();

        manyMany.LeftType = Type;
        manyMany.JoinType = type;

        manyMany.LeftKey = Dbml.BuildKeyField(manyMany.LeftType.PrimaryKeyColumns);

        foreach(Association association in type.EntityRefAssociations)
        {
            if(association.Type != Type.Name || leftKeyPicked)
            {
                manyMany.RightType = Database.GetTypeByName(association.Type);
                manyMany.JoinRightAssociation = association;
                manyMany.RightKey = Dbml.BuildKeyField(manyMany.RightType.PrimaryKeyColumns);
            }
            else
            {
                manyMany.JoinLeftAssociation = association;
                leftKeyPicked = true;
            }
        }

        //For those who think a Self-Associating Many To Many Table is a good idea
        if(manyMany.LeftType == manyMany.RightType)
        {
            if (hasSelfAssociation)
            {
                manyMany.Skip = true;
                return manyMany;
            }

            manyMany.PropertyName = manyMany.RightType.Name + "By" + manyMany.JoinRightAssociation.ThisKey;
            hasSelfAssociation = true;
        }
        else
            manyMany.PropertyName = manyMany.RightType.Name;

        manyMany.PropertyName = ApplyAssociationSuffix(manyMany.PropertyName);
        string original = manyMany.PropertyName;
        int count = 1;

        while(Type.IsUniqueMember(manyMany.PropertyName) == false
            || manyToManyNames.Contains(manyMany.PropertyName))
        {
            manyMany.PropertyName = original + (count++).ToString();
        }

        manyToManyNames.Add(manyMany.PropertyName);
        return manyMany;
    }

    public struct ManyToManyInfo
    {
        public LinqToSqlShared.DbmlObjectModel.Type LeftType;
        public LinqToSqlShared.DbmlObjectModel.Type RightType;
        public LinqToSqlShared.DbmlObjectModel.Type JoinType;
        public string RightKey;
        public string LeftKey;
        public Association JoinRightAssociation;
        public Association JoinLeftAssociation;
        public string PropertyName;
        public bool Skip;
    }
    
    private static readonly string GeneratedCodeAttribute =  string.Format(
        "[System.CodeDom.Compiler.GeneratedCode(\"CodeSmith\", \"{0}\")]",
        typeof(CodeTemplate).Assembly.GetName().Version.ToString());
        
</script>