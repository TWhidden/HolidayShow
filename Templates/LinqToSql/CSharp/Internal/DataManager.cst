<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql DataManager Class." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.cs" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="3.Manager" Name="ManagerNamespace" 
    Type="System.String" Optional="False" 
    Description="The namespace to use for the generated manager class files."%>

<%@ Property Category="3.Manager" Name="DataManager" 
    Type="Manager.DataManager" Optional="False" 
    Description="DatabaseMapping instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;

namespace <%= ManagerNamespace %>
{
    /// <summary>
    /// The data manager for a DataContext.
    /// </summary>
    public class <%= DataManager.DataManagerName %> : CodeSmith.Data.DataManagerBase<<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Database.ContextNamespace %>.<%= DataManager.DataManagerName %>"/> class.
        /// </summary>
        /// <param name="context">An instance of <see cref="<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>"/> DataContext.</param>
        public <%= DataManager.DataManagerName %>(<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %> context) : base(context)
        { }
        
        #region Managers
<% foreach (EntityManager m in DataManager.Managers) { %>
<%      Table table = Database.Tables[m.TableName];%>        
        private <%= m.ManagerName %> <%= m.FieldName %>;

        /// <summary>
        /// Gets the manager for <%= m.PropertyName %>.
        /// </summary>
        <%= Naming.GetModifier(table.AccessModifier, table.Modifier) %> <%= m.ManagerName %> <%= m.PropertyName %>
        {
            get
            {
                if (<%= m.FieldName %> == null)
                    <%= m.FieldName %> = new <%= m.ManagerName %>(this);

                return <%= m.FieldName %>;
            }
        }
<% } %>
        #endregion
    }
}