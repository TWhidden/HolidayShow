<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Manager Class." CompilerVersion="v3.5" %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.cs" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="3.Query" Name="DataManager"
    Type="Manager.DataManager" Optional="False"
    Description="Must be set by parent template" %>

<%@ Property Category="3.Query" Name="EntityManager"
    Type="Manager.EntityManager" Optional="False"
    Description="Must be set by parent template" %>

<%@ Property Category="2.Mapping" Name="Database"
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False"
    Description="Database schema instance. Must be set by parent template" %>

<%@ Property Category="3.Query" Name="MethodPrefix"
    Type="System.String" Default="By" Optional="True"
    Description="The prefix of query method names." %>

<%@ Property Category="3.Query" Name="UniqueMethodPrefix"
    Type="System.String" Default="GetBy" Optional="True"
    Description="The prefix of query method names." %>

<%@ Property Category="3.Query" Name="MethodKeySuffix"
    Type="System.String" Default="Key" Optional="False"
    Description="The suffix of the primary key query method names." %>
    
<%@ Property Category="3.Query" Name="QueryNamespace"
    Type="System.String" Default="" Optional="True"
    Description="The namespace for the interfaces.  Leave blank to not generate them." %>

<%@ Property Name="EnumDatabase"
    Type="LinqToSqlShared.Generator.DbmlEnum.Database" Optional="True"
    Description="Enum Collection for Database." %>

<%@ Map Name="CSharpKeyWordEscape"
    Src="CSharpKeyWordEscape.csmap" Reverse="False"
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="CSharpAlias"
    Src="System-CSharpAlias.csmap" Reverse="False"
    Description="Convert system data types to c# alias" %>
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
<%
string safeName =Database.EntityNamespace + "." + EntityManager.EntityName;
%>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

<% if (string.IsNullOrEmpty(QueryNamespace)) { %>
namespace <%= Database.ContextNamespace %>
<% } else { %>
namespace <%= QueryNamespace %>
<% } %>
{
    /// <summary>
    /// The query extension class for <%= EntityManager.EntityName %>.
    /// </summary>
    public static partial class <%= EntityManager.EntityName %>Extensions
    {
<% foreach(ManagerMethod method in EntityManager.Methods) { %>
<% if (method.IsKey) { %>

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        <%= GeneratedCodeAttribute %>
        public static <%= safeName %> <%= UniqueMethodPrefix %><%= MethodKeySuffix %>(this IQueryable<<%= safeName %>> queryable, <%= GetParameters(method) %>)
        {
<% if (method.Columns.Count < 4) { %>
            var entity = queryable as System.Data.Linq.Table<<%= safeName %>>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.<%= UniqueMethodPrefix %><%= MethodKeySuffix %>.Invoke((<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>)entity.Context, <%= GetParametersNames(method) %>);
<% } // column count%>

            return queryable.FirstOrDefault(<%= GetLamba(method, 5) %>);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        <%= GeneratedCodeAttribute %>
        public static int Delete(this System.Data.Linq.Table<<%= safeName %>> table, <%= GetParameters(method) %>)
        {
            return table.Delete(<%= GetLamba(method, 5) %>);
        }
<%
} else if (method.IsUnique) {
        uniqueMethods.Add(method.NameSuffix );
        string suffix = method.NameSuffix;
        if (suffix == MethodKeySuffix)
            suffix += "Member";
%>

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        <%= GeneratedCodeAttribute %>
        public static <%= safeName %> <%= UniqueMethodPrefix %><%= suffix %>(this IQueryable<<%= safeName %>> queryable, <%= GetParameters(method) %>)
        {
<% if (method.Columns.Count < 4) { %>
            var entity = queryable as System.Data.Linq.Table<<%= safeName %>>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.<%= UniqueMethodPrefix %><%= suffix %>.Invoke((<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>)entity.Context, <%= GetParametersNames(method) %>);
<% } // column count%>

            return queryable.FirstOrDefault(<%= GetLamba(method, 5) %>);
        }
<% } // if is key%>
<% } // foreach method%>
<% foreach(Column column in Database.GetTypeByName(EntityManager.EntityName).Columns)
{
    string paramName = CSharpKeyWordEscape[StringUtil.ToCamelCase(column.Member)];
    paramName = CleanParamName(paramName);

    string columnType = GetColumnType(column);
    string alias =  GetAlias();

    if(!column.IsVersion.Value && column.Type != "System.Data.Linq.Binary")
    { %>

        /// <summary>
        /// Gets a query for <see cref="<%= safeName %>.<%= column.Member %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= paramName %>"><%= column.Member %> to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= safeName %>> <%= MethodPrefix %><%= column.Member %>(this IQueryable<<%= safeName %>> queryable, <%= columnType %> <%= paramName %>)
        {
<% if (column.CanBeNull == true) { %>
            // support nulls
            return <%= paramName %> == null 
                ? queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == null) 
                : queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == <%= paramName %>);
<% } else { %>
            return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == <%= paramName %>);
<% } %>
        }
<% if (columnType == "string") { %>

        /// <summary>
        /// Gets a query for <see cref="<%= safeName %>.<%= column.Member %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= paramName %>"><%= column.Member %> to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= safeName %>> <%= MethodPrefix %><%= column.Member %>(this IQueryable<<%= safeName %>> queryable, ContainmentOperator containmentOperator, <%= columnType %> <%= paramName %>)
        {
            if (<%= paramName %> == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("<%= paramName %>", "Parameter '<%= paramName %>' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %>.Contains(<%= paramName %>));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %>.StartsWith(<%= paramName %>));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %>.EndsWith(<%= paramName %>));
                case ContainmentOperator.NotContains:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %>.Contains(<%= paramName %>) == false);
<% if (column.CanBeNull == true) { %>
                case ContainmentOperator.NotEquals:
                    return <%= paramName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> != null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> != <%= paramName %>);
                default:
                    return <%= paramName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == <%= paramName %>);
<% } else { %>
                case ContainmentOperator.NotEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> != <%= paramName %>);
                default:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == <%= paramName %>);
<% } %>
            }
        }
<% } else { %>

        /// <summary>
        /// Gets a query for <see cref="<%= safeName %>.<%= column.Member %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= paramName %>"><%= column.Member %> to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= safeName %>> <%= MethodPrefix %><%= column.Member %>(this IQueryable<<%= safeName %>> queryable, ComparisonOperator comparisonOperator, <%= columnType %> <%= paramName %>)
        {
<% if (column.CanBeNull == true) { %>
            if (<%= paramName %> == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("<%= paramName %>", "Parameter '<%= paramName %>' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

<% } %>
            switch (comparisonOperator)
            {
<% if (column.Type == "System.Object" || column.Type == "System.Guid" || column.Type == "System.Boolean" || column.Type == "System.Xml.Linq.XElement" ) { %>
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support <%= columnType %> type.", "comparisonOperator");
<% } else { %>
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> > <%= paramName %>);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> >= <%= paramName %>);
                case ComparisonOperator.LessThan:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> < <%= paramName %>);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> <= <%= paramName %>);
<% } %>
<% if (column.CanBeNull == true) { %>
                case ComparisonOperator.NotEquals:
                    return <%= paramName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> != null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> != <%= paramName %>);
                default:
                    return <%= paramName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == <%= paramName %>);
<% } else { %>
                case ComparisonOperator.NotEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> != <%= paramName %>);
                default:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= column.Member %> == <%= paramName %>);
<% } %>
            }
        }
<% } %>

        /// <summary>
        /// Gets a query for <see cref="<%= safeName %>.<%= column.Member %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= paramName %>"><%= column.Member %> to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= safeName %>> <%= MethodPrefix %><%= column.Member %>(this IQueryable<<%= safeName %>> queryable, <%= columnType %> <%= paramName %>, params <%= columnType %>[] additionalValues)
        {
            var <%= paramName %>List = new List<<%= columnType %>> { <%= paramName %> };

            if (additionalValues != null)
                <%= paramName %>List.AddRange(additionalValues);
<% if (column.CanBeNull == true) { %>
            else
                <%= paramName %>List.Add(null);
<% } %>

            if (<%= paramName %>List.Count == 1)
                return queryable.<%= MethodPrefix %><%= column.Member %>(<%= paramName %>List[0]);

            return queryable.<%= MethodPrefix %><%= column.Member %>(<%= paramName %>List);
        }

        /// <summary>
        /// Gets a query for <see cref="<%= safeName %>.<%= column.Member %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= safeName %>> <%= MethodPrefix %><%= column.Member %>(this IQueryable<<%= safeName %>> queryable, IEnumerable<<%= columnType %>> values)
        {
<% if (column.CanBeNull == true) { %>
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<<%= safeName %>, bool>("<%= column.Member %>", values);
            return queryable.Where(expression);
<% } else { %>
            return queryable.Where(<%= alias %> => values.Contains(<%= alias %>.<%= column.Member %>));
<% } %>
        }
<% } // if is  not key
 } // foreach method%>

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
<% foreach(ManagerMethod method in EntityManager.Methods) { %>
<% if (method.Columns.Count < 4) { %>
<% if (method.IsKey) { %>

            <%= GeneratedCodeAttribute %>
            internal static readonly Func<<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, <%= safeName %>> <%= UniqueMethodPrefix %><%= MethodKeySuffix %> =
                System.Data.Linq.CompiledQuery.Compile(
                    (<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %> db, <%= GetParameters(method) %>) =>
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>));
<% } else if (method.IsUnique) { %>
<%      string suffix = method.NameSuffix;
        if (suffix == MethodKeySuffix)
            suffix += "Member";
 %>
            <%= GeneratedCodeAttribute %>
            internal static readonly Func<<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, <%= safeName %>> <%= UniqueMethodPrefix %><%= suffix %> =
                System.Data.Linq.CompiledQuery.Compile(
                    (<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %> db, <%= GetParameters(method) %>) =>
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>));
<% } // if is key%>
<% } // column count%>
<% } // foreach method%>

        }
        #endregion
    }
}
#pragma warning restore 1591

<script runat="template">

    List<string> uniqueMethods = new List<string>();

    public string GetAlias()
    {
        return EntityManager.EntityName.Substring(0, 1).ToLowerInvariant();
    }

    public string CleanParamName(string name)
    {
        if (name != GetAlias())
            return name;

        return "my" + StringUtil.ToPascalCase(name);
    }

    public string GetParameters(ManagerMethod method)
    {
        StringBuilder args = new StringBuilder();
        foreach(Column column in method.Columns)
        {
            if (args.Length > 0)
                args.Append(", ");

            string paramName = StringUtil.ToCamelCase(column.Member);
            paramName = CleanParamName(paramName);

            string paramType = GetColumnType(column);

            args.AppendFormat("{0} {1}",
                paramType,
                CSharpKeyWordEscape[paramName]);
        }

        return args.ToString();
    }

    public string GetParametersNames(ManagerMethod method)
    {
        StringBuilder args = new StringBuilder();
        foreach(Column column in method.Columns)
        {
            if (args.Length > 0)
                args.Append(", ");

            string paramName = StringUtil.ToCamelCase(column.Member);
            paramName = CleanParamName(paramName);
            args.Append(CSharpKeyWordEscape[paramName]);
        }

        return args.ToString();
    }

    public string GetParametersTypes(ManagerMethod method)
    {
        StringBuilder args = new StringBuilder();
        foreach(Column column in method.Columns)
        {
            if (args.Length > 0)
                args.Append(", ");

            string paramType = GetColumnType(column);
            args.Append(paramType);
        }

        return args.ToString();
    }

    public string GetLamba(ManagerMethod method, int tabCount)
    {
        StringBuilder lamba = new StringBuilder();
        string alias = GetAlias();

        foreach(Column column in method.Columns)
        {
            string paramName = StringUtil.ToCamelCase(column.Member);
            paramName = CSharpKeyWordEscape[paramName];
            paramName = CleanParamName(paramName);

            if (lamba.Length == 0)
            {
                lamba.AppendFormat("{0} => ", alias);
            }
            else
            {
                lamba.Append(" \r\n");
                lamba.Append('\t', tabCount);
                lamba.Append("&& ");
            }

            if (column.CanBeNull == true)
                lamba.AppendFormat("object.Equals({0}.{1}, {2})",
                    alias, column.Member, paramName);
            else
                lamba.AppendFormat("{0}.{1} == {2}",
                    alias, column.Member, paramName);
        }

        return lamba.ToString();
    }

    private static readonly Regex _sizeRegex = new Regex(@"(?<Size>\d+)", RegexOptions.Compiled);

    public int GetSize(string s)
    {
        int size = 0;

        Match m = _sizeRegex.Match(s);
        if (!m.Success)
            return size;

        string temp = m.Groups["Size"].Value;
        int.TryParse(temp, out size);
        return size;
    }

    public string GetColumnType(Column column)
    {
        string dataType = column.Type;

        LinqToSqlShared.Generator.DbmlEnum.Enum enumType = EnumDatabase != null
            ? EnumDatabase.Enums.FirstOrDefault(e => e.Name == column.Type) : null;

        bool isEnum = enumType != null;
        if (isEnum && !dataType.StartsWith(Database.EntityNamespace + "."))
            dataType = Database.EntityNamespace + "." + dataType;
        
        if (column.CanBeNull == true && (CommonUtility.IsNullableType(column.Type) || isEnum))
            dataType = string.Format("{0}?", CSharpAlias[dataType]);
        else
            dataType = CSharpAlias[dataType];

        return dataType;
    }
    
    private static readonly string GeneratedCodeAttribute =  string.Format(
        "[System.CodeDom.Compiler.GeneratedCode(\"CodeSmith\", \"{0}\")]",
        typeof(CodeTemplate).Assembly.GetName().Version.ToString());

</script>