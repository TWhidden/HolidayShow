<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates Enum file for Plinqo DataContext." Encoding="UTF-8" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Property Name="Database" Type="LinqToSqlShared.Generator.DbmlEnum.Database" Optional="False" Category="Strings" Description="" %>
<%@ Property Name="Namespace" Type="System.String" Optional="False" Category="Strings" Description="" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
//
//     To make updates to Enums, please use the *.Enum.xml
//     file, hidded behind the *.dbml file.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace <%= Namespace %>
{
<%    foreach(LinqToSqlShared.Generator.DbmlEnum.Enum myEnum in Database.Enums) {
        if (myEnum.Flags) { %>
    [Flags]
<%        }
        if (myEnum.IncludeDataContract) { %>
    [DataContract]
<%      } %>
    <%= System.Enum.GetName(typeof(LinqToSqlShared.Generator.DbmlEnum.AccessModifier), myEnum.AccessModifier).ToLower() %> enum <%= myEnum.Name %> : <%= CSharpAlias[myEnum.Type] %>
    {
<%        for(int x=0; x < myEnum.Items.Count; x++) {
            if (!String.IsNullOrEmpty(myEnum.Items[x].Description)) { %>
        /// <summary>
        /// <%= myEnum.Items[x].Description %>
        /// </summary>
        [Description("<%= myEnum.Items[x].Description %>")]
<%             }
            if (myEnum.IncludeDataContract && myEnum.Items[x].DataContractMember) { %>
        [EnumMember]
<%            } %>
        <%= myEnum.Items[x].Name %> = <%= myEnum.Items[x].Value %><% if (x != myEnum.Items.Count - 1) { %>,<% } %>
<%        } %>
    }
    
<%    } %>
}
