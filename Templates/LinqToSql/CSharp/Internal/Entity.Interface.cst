<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Class." CompilerVersion="v3.5" %>

<%@ Assembly Name="ICSharpCode.NRefactory, Version=4.0.0.9999, Culture=neutral, PublicKeyToken=efe927acf176eea2, processorArchitecture=MSIL" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.InsertClassMergeStrategy" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.CodeParser" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database"
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False"
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type"
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False"
    Description="The Type instance for this entity. Must be set by parent template" %>
    
<%@ Property Category="1.Mapping" Name="TableName"
    Type="System.String" Default="" Optional="True"
    Description="The name of the table this class is mapped to." %>

<%@ Property Name="EnumDatabase"
    Type="LinqToSqlShared.Generator.DbmlEnum.Database" Optional="True"
    Description="Enum Collection for Database." %>
    
<%@ Property Category="2.Class" Name="IncludeXmlSerialization"
    Type="System.Boolean" Default="false" Optional="False"
    Description="Include Xml serialization support." %>

<%@ Property Category="2.Class" Name="InterfaceNamespace" 
    Type="System.String" Default="" Optional="True" 
    Description="The namespace for the interfaces.  Leave blank to not generate them." %>

<%@ Map Name="CSharpAlias"
    Src="System-CSharpAlias.csmap" Reverse="False"
    Description="Convert system data types to c# alias" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace <%= this.InterfaceNamespace %>
{
    /// <summary>
<% if (!string.IsNullOrEmpty(TableName)) { %>
    /// Interface representing the <%= TableName %> table.
<% } else { %>
    /// Interface representing <%= Type.Name %> data.
<% } %>
    /// </summary>
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> interface I<%= Type.Name %>
    {
<% foreach(Column column in Type.Columns) {
    string dataType = column.Type;
    
    bool useByteArray = IncludeXmlSerialization && dataType.Equals("System.Data.Linq.Binary");
    
    if (useByteArray)
        dataType = "byte[]";
        
    LinqToSqlShared.Generator.DbmlEnum.Enum enumType = EnumDatabase != null
        ? EnumDatabase.Enums.FirstOrDefault(e => e.Name == column.Type) : null;

    if (column.IsDelayLoaded == true && column.IsPrimaryKey == false)
        dataType = CSharpAlias[dataType];
    else if (column.CanBeNull == true && (CommonUtility.IsNullableType(dataType) || enumType != null))
        dataType = string.Format("Nullable<{0}>", CSharpAlias[dataType]);
    else
        dataType = CSharpAlias[dataType];

%>
        /// <summary>
<% if (!column.IsDbGenerated == true && column.IsReadOnly == false) { %>
        /// Gets or sets the <%= column.Name %> column value.
<% } else { %>
        /// Gets the <%= column.Name %> column value.
<% } %>
        /// </summary>
        <%= dataType %> <%=column.Member%> { get; <% if (!column.IsReadOnly == true) { %>set; <% } %>}
<% } %>
<% foreach(Association association in Type.EntityRefAssociations) { %>
        /// <summary>
        /// Gets or sets the <see cref="T:<%= this.InterfaceNamespace %>.I<%= association.Type %>"/> association.
        /// </summary>
        <%= this.InterfaceNamespace %>.I<%= association.Type %> <%=association.Member%> { get; set; }
<% } %>
<% foreach(Association association in Type.EntitySetAssociations) { %>
        /// <summary>
        /// Gets or sets the <see cref="T:<%= this.InterfaceNamespace %>.I<%= association.Type %>"/> association.
        /// </summary>
        System.Collections.Generic.IEnumerable<<%= this.InterfaceNamespace %>.I<%= association.Type %>> <%=association.Member%> { get; set; }
<% } %>
    }
}
