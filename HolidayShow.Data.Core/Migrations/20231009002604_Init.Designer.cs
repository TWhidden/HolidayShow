// <auto-generated />
using System;
using HolidayShow.Data.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HolidayShow.Data.Core.Migrations
{
    [DbContext(typeof(EfHolidayContext))]
    [Migration("20231009002604_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HolidayShow.Data.Core.AudioOptions", b =>
                {
                    b.Property<int>("AudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AudioId"));

                    b.Property<int>("AudioDuration")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsNotVisable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AudioId");

                    b.ToTable("AudioOptions");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DeviceEffects", b =>
                {
                    b.Property<int>("EffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EffectId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("EffectInstructionId")
                        .HasColumnType("int");

                    b.Property<string>("EffectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstructionMetaData")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TimeOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeOn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EffectId");

                    b.HasIndex("EffectInstructionId");

                    b.ToTable("DeviceEffects");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DeviceIoPorts", b =>
                {
                    b.Property<int>("DeviceIoPortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceIoPortId"));

                    b.Property<int>("CommandPin")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDanger")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotVisable")
                        .HasColumnType("bit");

                    b.HasKey("DeviceIoPortId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceIoPorts");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DevicePatternSequences", b =>
                {
                    b.Property<int>("DevicePatternSeqenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DevicePatternSeqenceId"));

                    b.Property<int>("AudioId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceIoPortId")
                        .HasColumnType("int");

                    b.Property<int>("DevicePatternId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("OnAt")
                        .HasColumnType("int");

                    b.HasKey("DevicePatternSeqenceId");

                    b.HasIndex("AudioId");

                    b.HasIndex("DeviceIoPortId");

                    b.HasIndex("DevicePatternId");

                    b.ToTable("DevicePatternSequences");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DevicePatterns", b =>
                {
                    b.Property<int>("DevicePatternId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DevicePatternId"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("PatternName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DevicePatternId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DevicePatterns");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.Devices", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('NONAME')");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.EffectInstructionsAvailable", b =>
                {
                    b.Property<int>("EffectInstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EffectInstructionId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstructionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstructionsForUse")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.HasKey("EffectInstructionId");

                    b.ToTable("EffectInstructionsAvailable");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.SetSequences", b =>
                {
                    b.Property<int>("SetSequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetSequenceId"));

                    b.Property<int?>("DevicePatternId")
                        .HasColumnType("int");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<int>("OnAt")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.HasKey("SetSequenceId");

                    b.HasIndex("DevicePatternId");

                    b.HasIndex("EffectId");

                    b.HasIndex("SetId");

                    b.ToTable("SetSequences");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.Sets", b =>
                {
                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetId"));

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("SetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SetId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.Settings", b =>
                {
                    b.Property<string>("SettingName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("ValueDouble")
                        .HasColumnType("float");

                    b.Property<string>("ValueString")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("SettingName");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DeviceEffects", b =>
                {
                    b.HasOne("HolidayShow.Data.Core.EffectInstructionsAvailable", "EffectInstructionsAvailable")
                        .WithMany("DeviceEffects")
                        .HasForeignKey("EffectInstructionId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceEffects_EffectInstructionsAvailable");

                    b.Navigation("EffectInstructionsAvailable");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DeviceIoPorts", b =>
                {
                    b.HasOne("HolidayShow.Data.Core.Devices", "Devices")
                        .WithMany("DeviceIoPorts")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceIoPorts_Devices");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DevicePatternSequences", b =>
                {
                    b.HasOne("HolidayShow.Data.Core.AudioOptions", "AudioOptions")
                        .WithMany("DevicePatternSequences")
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DevicePatternSequences_AudioOptions1");

                    b.HasOne("HolidayShow.Data.Core.DeviceIoPorts", "DeviceIoPorts")
                        .WithMany("DevicePatternSequences")
                        .HasForeignKey("DeviceIoPortId")
                        .IsRequired()
                        .HasConstraintName("FK_DevicePatternSequences_DeviceIoPorts");

                    b.HasOne("HolidayShow.Data.Core.DevicePatterns", "DevicePatterns")
                        .WithMany("DevicePatternSequences")
                        .HasForeignKey("DevicePatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DevicePatternSequences_DevicePatterns");

                    b.Navigation("AudioOptions");

                    b.Navigation("DeviceIoPorts");

                    b.Navigation("DevicePatterns");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DevicePatterns", b =>
                {
                    b.HasOne("HolidayShow.Data.Core.Devices", "Devices")
                        .WithMany("DevicePatterns")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DevicePatterns_Devices");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.SetSequences", b =>
                {
                    b.HasOne("HolidayShow.Data.Core.DevicePatterns", "DevicePatterns")
                        .WithMany("SetSequences")
                        .HasForeignKey("DevicePatternId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SetSequences_DevicePatterns");

                    b.HasOne("HolidayShow.Data.Core.DeviceEffects", "DeviceEffects")
                        .WithMany("SetSequences")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SetSequences_DeviceEffects");

                    b.HasOne("HolidayShow.Data.Core.Sets", "Sets")
                        .WithMany("SetSequences")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SetSequences_Sets");

                    b.Navigation("DeviceEffects");

                    b.Navigation("DevicePatterns");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.AudioOptions", b =>
                {
                    b.Navigation("DevicePatternSequences");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DeviceEffects", b =>
                {
                    b.Navigation("SetSequences");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DeviceIoPorts", b =>
                {
                    b.Navigation("DevicePatternSequences");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.DevicePatterns", b =>
                {
                    b.Navigation("DevicePatternSequences");

                    b.Navigation("SetSequences");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.Devices", b =>
                {
                    b.Navigation("DeviceIoPorts");

                    b.Navigation("DevicePatterns");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.EffectInstructionsAvailable", b =>
                {
                    b.Navigation("DeviceEffects");
                });

            modelBuilder.Entity("HolidayShow.Data.Core.Sets", b =>
                {
                    b.Navigation("SetSequences");
                });
#pragma warning restore 612, 618
        }
    }
}
