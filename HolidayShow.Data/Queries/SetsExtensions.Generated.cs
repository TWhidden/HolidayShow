#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HolidayShow.Data
{
    /// <summary>
    /// The query extension class for Sets.
    /// </summary>
    public static partial class SetsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HolidayShow.Data.Sets GetByKey(this IQueryable<HolidayShow.Data.Sets> queryable, int setId)
        {
            var entity = queryable as System.Data.Linq.Table<HolidayShow.Data.Sets>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((HolidayShow.Data.HolidayShowDataContext)entity.Context, setId);

            return queryable.FirstOrDefault(s => s.SetId == setId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<HolidayShow.Data.Sets> table, int setId)
        {
            return table.Delete(s => s.SetId == setId);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="setId">SetId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetId(this IQueryable<HolidayShow.Data.Sets> queryable, int setId)
        {
            return queryable.Where(s => s.SetId == setId);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="setId">SetId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetId(this IQueryable<HolidayShow.Data.Sets> queryable, ComparisonOperator comparisonOperator, int setId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.SetId > setId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.SetId >= setId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.SetId < setId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.SetId <= setId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.SetId != setId);
                default:
                    return queryable.Where(s => s.SetId == setId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="setId">SetId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetId(this IQueryable<HolidayShow.Data.Sets> queryable, int setId, params int[] additionalValues)
        {
            var setIdList = new List<int> { setId };

            if (additionalValues != null)
                setIdList.AddRange(additionalValues);

            if (setIdList.Count == 1)
                return queryable.BySetId(setIdList[0]);

            return queryable.BySetId(setIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetId(this IQueryable<HolidayShow.Data.Sets> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.SetId));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="setName">SetName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetName(this IQueryable<HolidayShow.Data.Sets> queryable, string setName)
        {
            return queryable.Where(s => s.SetName == setName);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="setName">SetName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetName(this IQueryable<HolidayShow.Data.Sets> queryable, ContainmentOperator containmentOperator, string setName)
        {
            if (setName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("setName", "Parameter 'setName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.SetName.Contains(setName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.SetName.StartsWith(setName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.SetName.EndsWith(setName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.SetName.Contains(setName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.SetName != setName);
                default:
                    return queryable.Where(s => s.SetName == setName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="setName">SetName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetName(this IQueryable<HolidayShow.Data.Sets> queryable, string setName, params string[] additionalValues)
        {
            var setNameList = new List<string> { setName };

            if (additionalValues != null)
                setNameList.AddRange(additionalValues);

            if (setNameList.Count == 1)
                return queryable.BySetName(setNameList[0]);

            return queryable.BySetName(setNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.SetName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> BySetName(this IQueryable<HolidayShow.Data.Sets> queryable, IEnumerable<string> values)
        {
            return queryable.Where(s => values.Contains(s.SetName));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.IsDisabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDisabled">IsDisabled to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> ByIsDisabled(this IQueryable<HolidayShow.Data.Sets> queryable, bool isDisabled)
        {
            return queryable.Where(s => s.IsDisabled == isDisabled);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.IsDisabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDisabled">IsDisabled to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> ByIsDisabled(this IQueryable<HolidayShow.Data.Sets> queryable, ComparisonOperator comparisonOperator, bool isDisabled)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.IsDisabled != isDisabled);
                default:
                    return queryable.Where(s => s.IsDisabled == isDisabled);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.IsDisabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDisabled">IsDisabled to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> ByIsDisabled(this IQueryable<HolidayShow.Data.Sets> queryable, bool isDisabled, params bool[] additionalValues)
        {
            var isDisabledList = new List<bool> { isDisabled };

            if (additionalValues != null)
                isDisabledList.AddRange(additionalValues);

            if (isDisabledList.Count == 1)
                return queryable.ByIsDisabled(isDisabledList[0]);

            return queryable.ByIsDisabled(isDisabledList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Sets.IsDisabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Sets> ByIsDisabled(this IQueryable<HolidayShow.Data.Sets> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(s => values.Contains(s.IsDisabled));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<HolidayShow.Data.HolidayShowDataContext, int, HolidayShow.Data.Sets> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (HolidayShow.Data.HolidayShowDataContext db, int setId) =>
                        db.Sets.FirstOrDefault(s => s.SetId == setId));

        }
        #endregion
    }
}
#pragma warning restore 1591
