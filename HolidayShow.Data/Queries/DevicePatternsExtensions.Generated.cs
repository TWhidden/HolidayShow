#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HolidayShow.Data
{
    /// <summary>
    /// The query extension class for DevicePatterns.
    /// </summary>
    public static partial class DevicePatternsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HolidayShow.Data.DevicePatterns GetByKey(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, int devicePatternId)
        {
            var entity = queryable as System.Data.Linq.Table<HolidayShow.Data.DevicePatterns>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((HolidayShow.Data.HolidayShowDataContext)entity.Context, devicePatternId);

            return queryable.FirstOrDefault(d => d.DevicePatternId == devicePatternId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<HolidayShow.Data.DevicePatterns> table, int devicePatternId)
        {
            return table.Delete(d => d.DevicePatternId == devicePatternId);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DevicePatternId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="devicePatternId">DevicePatternId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDevicePatternId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, int devicePatternId)
        {
            return queryable.Where(d => d.DevicePatternId == devicePatternId);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DevicePatternId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="devicePatternId">DevicePatternId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDevicePatternId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, ComparisonOperator comparisonOperator, int devicePatternId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.DevicePatternId > devicePatternId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.DevicePatternId >= devicePatternId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.DevicePatternId < devicePatternId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.DevicePatternId <= devicePatternId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.DevicePatternId != devicePatternId);
                default:
                    return queryable.Where(d => d.DevicePatternId == devicePatternId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DevicePatternId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="devicePatternId">DevicePatternId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDevicePatternId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, int devicePatternId, params int[] additionalValues)
        {
            var devicePatternIdList = new List<int> { devicePatternId };

            if (additionalValues != null)
                devicePatternIdList.AddRange(additionalValues);

            if (devicePatternIdList.Count == 1)
                return queryable.ByDevicePatternId(devicePatternIdList[0]);

            return queryable.ByDevicePatternId(devicePatternIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DevicePatternId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDevicePatternId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, IEnumerable<int> values)
        {
            return queryable.Where(d => values.Contains(d.DevicePatternId));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DeviceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="deviceId">DeviceId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDeviceId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, int deviceId)
        {
            return queryable.Where(d => d.DeviceId == deviceId);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DeviceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="deviceId">DeviceId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDeviceId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, ComparisonOperator comparisonOperator, int deviceId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.DeviceId > deviceId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.DeviceId >= deviceId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.DeviceId < deviceId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.DeviceId <= deviceId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.DeviceId != deviceId);
                default:
                    return queryable.Where(d => d.DeviceId == deviceId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DeviceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="deviceId">DeviceId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDeviceId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, int deviceId, params int[] additionalValues)
        {
            var deviceIdList = new List<int> { deviceId };

            if (additionalValues != null)
                deviceIdList.AddRange(additionalValues);

            if (deviceIdList.Count == 1)
                return queryable.ByDeviceId(deviceIdList[0]);

            return queryable.ByDeviceId(deviceIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.DeviceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByDeviceId(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, IEnumerable<int> values)
        {
            return queryable.Where(d => values.Contains(d.DeviceId));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.PatternName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="patternName">PatternName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByPatternName(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, string patternName)
        {
            return queryable.Where(d => d.PatternName == patternName);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.PatternName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="patternName">PatternName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByPatternName(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, ContainmentOperator containmentOperator, string patternName)
        {
            if (patternName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("patternName", "Parameter 'patternName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.PatternName.Contains(patternName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.PatternName.StartsWith(patternName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.PatternName.EndsWith(patternName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.PatternName.Contains(patternName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.PatternName != patternName);
                default:
                    return queryable.Where(d => d.PatternName == patternName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.PatternName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="patternName">PatternName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByPatternName(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, string patternName, params string[] additionalValues)
        {
            var patternNameList = new List<string> { patternName };

            if (additionalValues != null)
                patternNameList.AddRange(additionalValues);

            if (patternNameList.Count == 1)
                return queryable.ByPatternName(patternNameList[0]);

            return queryable.ByPatternName(patternNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.DevicePatterns.PatternName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.DevicePatterns> ByPatternName(this IQueryable<HolidayShow.Data.DevicePatterns> queryable, IEnumerable<string> values)
        {
            return queryable.Where(d => values.Contains(d.PatternName));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<HolidayShow.Data.HolidayShowDataContext, int, HolidayShow.Data.DevicePatterns> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (HolidayShow.Data.HolidayShowDataContext db, int devicePatternId) =>
                        db.DevicePatterns.FirstOrDefault(d => d.DevicePatternId == devicePatternId));

        }
        #endregion
    }
}
#pragma warning restore 1591
