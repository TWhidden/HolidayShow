#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HolidayShow.Data
{
    /// <summary>
    /// The query extension class for Settings.
    /// </summary>
    public static partial class SettingsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HolidayShow.Data.Settings GetByKey(this IQueryable<HolidayShow.Data.Settings> queryable, string settingName)
        {
            var entity = queryable as System.Data.Linq.Table<HolidayShow.Data.Settings>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((HolidayShow.Data.HolidayShowDataContext)entity.Context, settingName);

            return queryable.FirstOrDefault(s => s.SettingName == settingName);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<HolidayShow.Data.Settings> table, string settingName)
        {
            return table.Delete(s => s.SettingName == settingName);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.SettingName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="settingName">SettingName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> BySettingName(this IQueryable<HolidayShow.Data.Settings> queryable, string settingName)
        {
            return queryable.Where(s => s.SettingName == settingName);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.SettingName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="settingName">SettingName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> BySettingName(this IQueryable<HolidayShow.Data.Settings> queryable, ContainmentOperator containmentOperator, string settingName)
        {
            if (settingName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("settingName", "Parameter 'settingName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.SettingName.Contains(settingName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.SettingName.StartsWith(settingName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.SettingName.EndsWith(settingName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.SettingName.Contains(settingName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.SettingName != settingName);
                default:
                    return queryable.Where(s => s.SettingName == settingName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.SettingName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="settingName">SettingName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> BySettingName(this IQueryable<HolidayShow.Data.Settings> queryable, string settingName, params string[] additionalValues)
        {
            var settingNameList = new List<string> { settingName };

            if (additionalValues != null)
                settingNameList.AddRange(additionalValues);

            if (settingNameList.Count == 1)
                return queryable.BySettingName(settingNameList[0]);

            return queryable.BySettingName(settingNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.SettingName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> BySettingName(this IQueryable<HolidayShow.Data.Settings> queryable, IEnumerable<string> values)
        {
            return queryable.Where(s => values.Contains(s.SettingName));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueString"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="valueString">ValueString to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueString(this IQueryable<HolidayShow.Data.Settings> queryable, string valueString)
        {
            return queryable.Where(s => s.ValueString == valueString);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueString"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="valueString">ValueString to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueString(this IQueryable<HolidayShow.Data.Settings> queryable, ContainmentOperator containmentOperator, string valueString)
        {
            if (valueString == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("valueString", "Parameter 'valueString' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.ValueString.Contains(valueString));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.ValueString.StartsWith(valueString));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.ValueString.EndsWith(valueString));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.ValueString.Contains(valueString) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.ValueString != valueString);
                default:
                    return queryable.Where(s => s.ValueString == valueString);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueString"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="valueString">ValueString to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueString(this IQueryable<HolidayShow.Data.Settings> queryable, string valueString, params string[] additionalValues)
        {
            var valueStringList = new List<string> { valueString };

            if (additionalValues != null)
                valueStringList.AddRange(additionalValues);

            if (valueStringList.Count == 1)
                return queryable.ByValueString(valueStringList[0]);

            return queryable.ByValueString(valueStringList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueString"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueString(this IQueryable<HolidayShow.Data.Settings> queryable, IEnumerable<string> values)
        {
            return queryable.Where(s => values.Contains(s.ValueString));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueDouble"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="valueDouble">ValueDouble to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueDouble(this IQueryable<HolidayShow.Data.Settings> queryable, double valueDouble)
        {
            return queryable.Where(s => s.ValueDouble == valueDouble);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueDouble"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="valueDouble">ValueDouble to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueDouble(this IQueryable<HolidayShow.Data.Settings> queryable, ComparisonOperator comparisonOperator, double valueDouble)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.ValueDouble > valueDouble);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.ValueDouble >= valueDouble);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.ValueDouble < valueDouble);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.ValueDouble <= valueDouble);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.ValueDouble != valueDouble);
                default:
                    return queryable.Where(s => s.ValueDouble == valueDouble);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueDouble"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="valueDouble">ValueDouble to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueDouble(this IQueryable<HolidayShow.Data.Settings> queryable, double valueDouble, params double[] additionalValues)
        {
            var valueDoubleList = new List<double> { valueDouble };

            if (additionalValues != null)
                valueDoubleList.AddRange(additionalValues);

            if (valueDoubleList.Count == 1)
                return queryable.ByValueDouble(valueDoubleList[0]);

            return queryable.ByValueDouble(valueDoubleList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.Settings.ValueDouble"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.Settings> ByValueDouble(this IQueryable<HolidayShow.Data.Settings> queryable, IEnumerable<double> values)
        {
            return queryable.Where(s => values.Contains(s.ValueDouble));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<HolidayShow.Data.HolidayShowDataContext, string, HolidayShow.Data.Settings> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (HolidayShow.Data.HolidayShowDataContext db, string settingName) =>
                        db.Settings.FirstOrDefault(s => s.SettingName == settingName));

        }
        #endregion
    }
}
#pragma warning restore 1591
