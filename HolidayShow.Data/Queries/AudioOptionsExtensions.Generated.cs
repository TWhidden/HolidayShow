#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HolidayShow.Data
{
    /// <summary>
    /// The query extension class for AudioOptions.
    /// </summary>
    public static partial class AudioOptionsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HolidayShow.Data.AudioOptions GetByKey(this IQueryable<HolidayShow.Data.AudioOptions> queryable, int audioId)
        {
            var entity = queryable as System.Data.Linq.Table<HolidayShow.Data.AudioOptions>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((HolidayShow.Data.HolidayShowDataContext)entity.Context, audioId);

            return queryable.FirstOrDefault(a => a.AudioId == audioId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<HolidayShow.Data.AudioOptions> table, int audioId)
        {
            return table.Delete(a => a.AudioId == audioId);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="audioId">AudioId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioId(this IQueryable<HolidayShow.Data.AudioOptions> queryable, int audioId)
        {
            return queryable.Where(a => a.AudioId == audioId);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="audioId">AudioId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioId(this IQueryable<HolidayShow.Data.AudioOptions> queryable, ComparisonOperator comparisonOperator, int audioId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.AudioId > audioId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.AudioId >= audioId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.AudioId < audioId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.AudioId <= audioId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.AudioId != audioId);
                default:
                    return queryable.Where(a => a.AudioId == audioId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="audioId">AudioId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioId(this IQueryable<HolidayShow.Data.AudioOptions> queryable, int audioId, params int[] additionalValues)
        {
            var audioIdList = new List<int> { audioId };

            if (additionalValues != null)
                audioIdList.AddRange(additionalValues);

            if (audioIdList.Count == 1)
                return queryable.ByAudioId(audioIdList[0]);

            return queryable.ByAudioId(audioIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioId(this IQueryable<HolidayShow.Data.AudioOptions> queryable, IEnumerable<int> values)
        {
            return queryable.Where(a => values.Contains(a.AudioId));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, string name)
        {
            return queryable.Where(a => a.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, ContainmentOperator containmentOperator, string name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Name != name);
                default:
                    return queryable.Where(a => a.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, string name, params string[] additionalValues)
        {
            var nameList = new List<string> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileName">FileName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByFileName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, string fileName)
        {
            return queryable.Where(a => a.FileName == fileName);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileName">FileName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByFileName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, ContainmentOperator containmentOperator, string fileName)
        {
            if (fileName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("fileName", "Parameter 'fileName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FileName.Contains(fileName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FileName.StartsWith(fileName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FileName.EndsWith(fileName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FileName.Contains(fileName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.FileName != fileName);
                default:
                    return queryable.Where(a => a.FileName == fileName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileName">FileName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByFileName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, string fileName, params string[] additionalValues)
        {
            var fileNameList = new List<string> { fileName };

            if (additionalValues != null)
                fileNameList.AddRange(additionalValues);

            if (fileNameList.Count == 1)
                return queryable.ByFileName(fileNameList[0]);

            return queryable.ByFileName(fileNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByFileName(this IQueryable<HolidayShow.Data.AudioOptions> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.FileName));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="audioDuration">AudioDuration to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioDuration(this IQueryable<HolidayShow.Data.AudioOptions> queryable, int audioDuration)
        {
            return queryable.Where(a => a.AudioDuration == audioDuration);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="audioDuration">AudioDuration to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioDuration(this IQueryable<HolidayShow.Data.AudioOptions> queryable, ComparisonOperator comparisonOperator, int audioDuration)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.AudioDuration > audioDuration);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.AudioDuration >= audioDuration);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.AudioDuration < audioDuration);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.AudioDuration <= audioDuration);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.AudioDuration != audioDuration);
                default:
                    return queryable.Where(a => a.AudioDuration == audioDuration);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="audioDuration">AudioDuration to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioDuration(this IQueryable<HolidayShow.Data.AudioOptions> queryable, int audioDuration, params int[] additionalValues)
        {
            var audioDurationList = new List<int> { audioDuration };

            if (additionalValues != null)
                audioDurationList.AddRange(additionalValues);

            if (audioDurationList.Count == 1)
                return queryable.ByAudioDuration(audioDurationList[0]);

            return queryable.ByAudioDuration(audioDurationList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.AudioDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByAudioDuration(this IQueryable<HolidayShow.Data.AudioOptions> queryable, IEnumerable<int> values)
        {
            return queryable.Where(a => values.Contains(a.AudioDuration));
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.IsNotVisable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isNotVisable">IsNotVisable to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByIsNotVisable(this IQueryable<HolidayShow.Data.AudioOptions> queryable, bool isNotVisable)
        {
            return queryable.Where(a => a.IsNotVisable == isNotVisable);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.IsNotVisable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isNotVisable">IsNotVisable to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByIsNotVisable(this IQueryable<HolidayShow.Data.AudioOptions> queryable, ComparisonOperator comparisonOperator, bool isNotVisable)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.IsNotVisable != isNotVisable);
                default:
                    return queryable.Where(a => a.IsNotVisable == isNotVisable);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.IsNotVisable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isNotVisable">IsNotVisable to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByIsNotVisable(this IQueryable<HolidayShow.Data.AudioOptions> queryable, bool isNotVisable, params bool[] additionalValues)
        {
            var isNotVisableList = new List<bool> { isNotVisable };

            if (additionalValues != null)
                isNotVisableList.AddRange(additionalValues);

            if (isNotVisableList.Count == 1)
                return queryable.ByIsNotVisable(isNotVisableList[0]);

            return queryable.ByIsNotVisable(isNotVisableList);
        }

        /// <summary>
        /// Gets a query for <see cref="HolidayShow.Data.AudioOptions.IsNotVisable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HolidayShow.Data.AudioOptions> ByIsNotVisable(this IQueryable<HolidayShow.Data.AudioOptions> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(a => values.Contains(a.IsNotVisable));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<HolidayShow.Data.HolidayShowDataContext, int, HolidayShow.Data.AudioOptions> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (HolidayShow.Data.HolidayShowDataContext db, int audioId) =>
                        db.AudioOptions.FirstOrDefault(a => a.AudioId == audioId));

        }
        #endregion
    }
}
#pragma warning restore 1591
