#pragma warning disable 1591
#pragma warning disable 0414        
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace HolidayShow.Data
{
    /// <summary>
    /// The class representing the dbo.SetSequences table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.SetSequences")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(HolidayShow.Data.SetSequences.Metadata))]
    [System.Data.Services.Common.DataServiceKey("SetId", "SetSequenceId")]
    [System.Diagnostics.DebuggerDisplay("SetId: {SetId}, SetSequenceId: {SetSequenceId}")]
    public partial class SetSequences
        : LinqEntityBase, ICloneable 
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="SetSequences"/> class.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        static SetSequences()
        {
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="SetSequences"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public SetSequences()
        {
            Initialize();
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void Initialize()
        {
            _devicePatterns = default(System.Data.Linq.EntityRef<DevicePatterns>);
            _sets = default(System.Data.Linq.EntityRef<Sets>);
            OnCreated();
        }
        #endregion

        #region Column Mapped Properties

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private int _setId;

        /// <summary>
        /// Gets or sets the SetId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "SetId", Storage = "_setId", DbType = "int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public int SetId
        {
            get { return _setId; }
            set
            {
                if (_setId != value)
                {
                    if (_sets.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnSetIdChanging(value);
                    SendPropertyChanging("SetId");
                    _setId = value;
                    SendPropertyChanged("SetId");
                    OnSetIdChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private int _onAt;

        /// <summary>
        /// Gets or sets the OnAt column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "OnAt", Storage = "_onAt", DbType = "int NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public int OnAt
        {
            get { return _onAt; }
            set
            {
                if (_onAt != value)
                {
                    OnOnAtChanging(value);
                    SendPropertyChanging("OnAt");
                    _onAt = value;
                    SendPropertyChanged("OnAt");
                    OnOnAtChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private int _devicePatternId;

        /// <summary>
        /// Gets or sets the DevicePatternId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "DevicePatternId", Storage = "_devicePatternId", DbType = "int NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public int DevicePatternId
        {
            get { return _devicePatternId; }
            set
            {
                if (_devicePatternId != value)
                {
                    if (_devicePatterns.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnDevicePatternIdChanging(value);
                    SendPropertyChanging("DevicePatternId");
                    _devicePatternId = value;
                    SendPropertyChanged("DevicePatternId");
                    OnDevicePatternIdChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private int _setSequenceId = default(int);

        /// <summary>
        /// Gets the SetSequenceId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "SetSequenceId", Storage = "_setSequenceId", DbType = "int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public int SetSequenceId
        {
            get { return _setSequenceId; }
            set
            {
                if (_setSequenceId != value)
                {
                    OnSetSequenceIdChanging(value);
                    SendPropertyChanging("SetSequenceId");
                    _setSequenceId = value;
                    SendPropertyChanged("SetSequenceId");
                    OnSetSequenceIdChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntityRef<DevicePatterns> _devicePatterns;

        /// <summary>
        /// Gets or sets the <see cref="DevicePatterns"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "DevicePatterns_SetSequences", Storage = "_devicePatterns", ThisKey = "DevicePatternId", OtherKey = "DevicePatternId", IsForeignKey = true, DeleteRule = "CASCADE")]
        [System.Runtime.Serialization.DataMember(Order = 5, EmitDefaultValue = false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public DevicePatterns DevicePatterns
        {
            get { return (serializing && !_devicePatterns.HasLoadedOrAssignedValue) ? null : _devicePatterns.Entity; }
            set
            {
                DevicePatterns previousValue = _devicePatterns.Entity;
                if (previousValue != value || _devicePatterns.HasLoadedOrAssignedValue == false)
                {
                    OnDevicePatternsChanging(value);
                    SendPropertyChanging("DevicePatterns");
                    if (previousValue != null)
                    {
                        _devicePatterns.Entity = null;
                        previousValue.SetSequencesList.Remove(this);
                    }
                    _devicePatterns.Entity = value;
                    if (value != null)
                    {
                        value.SetSequencesList.Add(this);
                        _devicePatternId = value.DevicePatternId;
                    }
                    else
                    {
                        _devicePatternId = default(int);
                    }
                    SendPropertyChanged("DevicePatterns");
                    OnDevicePatternsChanged();
                }
            }
        }
        
        
        

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntityRef<Sets> _sets;

        /// <summary>
        /// Gets or sets the <see cref="Sets"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "Sets_SetSequences", Storage = "_sets", ThisKey = "SetId", OtherKey = "SetId", IsForeignKey = true, DeleteRule = "CASCADE")]
        [System.Runtime.Serialization.DataMember(Order = 6, EmitDefaultValue = false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public Sets Sets
        {
            get { return (serializing && !_sets.HasLoadedOrAssignedValue) ? null : _sets.Entity; }
            set
            {
                Sets previousValue = _sets.Entity;
                if (previousValue != value || _sets.HasLoadedOrAssignedValue == false)
                {
                    OnSetsChanging(value);
                    SendPropertyChanging("Sets");
                    if (previousValue != null)
                    {
                        _sets.Entity = null;
                        previousValue.SetSequencesList.Remove(this);
                    }
                    _sets.Entity = value;
                    if (value != null)
                    {
                        value.SetSequencesList.Add(this);
                        _setId = value.SetId;
                    }
                    else
                    {
                        _setId = default(int);
                    }
                    SendPropertyChanged("Sets");
                    OnSetsChanged();
                }
            }
        }
        
        
        
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnCreated();
        /// <summary>Called when <see cref="SetId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSetIdChanging(int value);
        /// <summary>Called after <see cref="SetId"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSetIdChanged();
        /// <summary>Called when <see cref="OnAt"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnOnAtChanging(int value);
        /// <summary>Called after <see cref="OnAt"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnOnAtChanged();
        /// <summary>Called when <see cref="DevicePatternId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDevicePatternIdChanging(int value);
        /// <summary>Called after <see cref="DevicePatternId"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDevicePatternIdChanged();
        /// <summary>Called when <see cref="SetSequenceId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSetSequenceIdChanging(int value);
        /// <summary>Called after <see cref="SetSequenceId"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSetSequenceIdChanged();
        /// <summary>Called when <see cref="DevicePatterns"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDevicePatternsChanging(DevicePatterns value);
        /// <summary>Called after <see cref="DevicePatterns"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDevicePatternsChanged();
        /// <summary>Called when <see cref="Sets"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSetsChanging(Sets value);
        /// <summary>Called after <see cref="Sets"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSetsChanged();

        #endregion

        #region Serialization
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }

        /// <summary>
        /// Deserializes an instance of <see cref="SetSequences"/> from XML.
        /// </summary>
        /// <param name="xml">The XML string representing a <see cref="SetSequences"/> instance.</param>
        /// <returns>An instance of <see cref="SetSequences"/> that is deserialized from the XML string.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SetSequences FromXml(string xml)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(SetSequences));

            using (var sr = new System.IO.StringReader(xml))
            using (var reader = System.Xml.XmlReader.Create(sr))
            {
                return deserializer.ReadObject(reader) as SetSequences;
            }
        }

        /// <summary>
        /// Deserializes an instance of <see cref="SetSequences"/> from a byte array.
        /// </summary>
        /// <param name="buffer">The byte array representing a <see cref="SetSequences"/> instance.</param>
        /// <returns>An instance of <see cref="SetSequences"/> that is deserialized from the byte array.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SetSequences FromBinary(byte[] buffer)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(SetSequences));

            using (var ms = new System.IO.MemoryStream(buffer))
            using (var reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max))
            {
                return deserializer.ReadObject(reader) as SetSequences;
            }
        }
        
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public SetSequences Clone()
        {
            return (SetSequences)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _devicePatterns = Detach(_devicePatterns);
            _sets = Detach(_sets);
        }
        #endregion
    }
}
#pragma warning restore 1591
#pragma warning restore 0414
