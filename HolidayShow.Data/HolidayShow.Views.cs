//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(HolidayShow.Data.EfHolidayContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsd33d54b582f357f7cb942e8ef0acf2cc9c5a4f9ab88bfb445c8937803bf6f0eb))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsd33d54b582f357f7cb942e8ef0acf2cc9c5a4f9ab88bfb445c8937803bf6f0eb : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "d33d54b582f357f7cb942e8ef0acf2cc9c5a4f9ab88bfb445c8937803bf6f0eb"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "HolidayShowDataStoreContainer.AudioOptions")
            {
                return GetView0();
            }

            if (extentName == "HolidayShowDataStoreContainer.DeviceIoPorts")
            {
                return GetView1();
            }

            if (extentName == "HolidayShowDataStoreContainer.DevicePatterns")
            {
                return GetView2();
            }

            if (extentName == "HolidayShowDataStoreContainer.DevicePatternSequences")
            {
                return GetView3();
            }

            if (extentName == "HolidayShowDataStoreContainer.Devices")
            {
                return GetView4();
            }

            if (extentName == "HolidayShowDataStoreContainer.Sets")
            {
                return GetView5();
            }

            if (extentName == "HolidayShowDataStoreContainer.DeviceEffects")
            {
                return GetView6();
            }

            if (extentName == "HolidayShowDataStoreContainer.EffectInstructionsAvailable")
            {
                return GetView7();
            }

            if (extentName == "HolidayShowDataStoreContainer.SetSequences")
            {
                return GetView8();
            }

            if (extentName == "EfHolidayContext.AudioOptions")
            {
                return GetView9();
            }

            if (extentName == "EfHolidayContext.DeviceIoPorts")
            {
                return GetView10();
            }

            if (extentName == "EfHolidayContext.DevicePatterns")
            {
                return GetView11();
            }

            if (extentName == "EfHolidayContext.DevicePatternSequences")
            {
                return GetView12();
            }

            if (extentName == "EfHolidayContext.Devices")
            {
                return GetView13();
            }

            if (extentName == "EfHolidayContext.Sets")
            {
                return GetView14();
            }

            if (extentName == "EfHolidayContext.DeviceEffects")
            {
                return GetView15();
            }

            if (extentName == "EfHolidayContext.EffectInstructionsAvailable")
            {
                return GetView16();
            }

            if (extentName == "EfHolidayContext.SetSequences")
            {
                return GetView17();
            }

            if (extentName == "HolidayShowDataStoreContainer.Settings")
            {
                return GetView18();
            }

            if (extentName == "EfHolidayContext.Settings")
            {
                return GetView19();
            }

            if (extentName == "HolidayShowDataStoreContainer.Versions")
            {
                return GetView20();
            }

            if (extentName == "EfHolidayContext.Versions")
            {
                return GetView21();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.AudioOptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AudioOptions
        [HolidayShow.Data.Store.AudioOptions](T1.AudioOptions_AudioId, T1.AudioOptions_Name, T1.AudioOptions_FileName, T1.AudioOptions_AudioDuration, T1.AudioOptions_IsNotVisable)
    FROM (
        SELECT 
            T.AudioId AS AudioOptions_AudioId, 
            T.Name AS AudioOptions_Name, 
            T.FileName AS AudioOptions_FileName, 
            T.AudioDuration AS AudioOptions_AudioDuration, 
            T.IsNotVisable AS AudioOptions_IsNotVisable, 
            True AS _from0
        FROM EfHolidayContext.AudioOptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.DeviceIoPorts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceIoPorts
        [HolidayShow.Data.Store.DeviceIoPorts](T1.DeviceIoPorts_DeviceIoPortId, T1.DeviceIoPorts_DeviceId, T1.DeviceIoPorts_CommandPin, T1.DeviceIoPorts_Description, T1.DeviceIoPorts_IsNotVisable, T1.DeviceIoPorts_IsDanger)
    FROM (
        SELECT 
            T.DeviceIoPortId AS DeviceIoPorts_DeviceIoPortId, 
            T.DeviceId AS DeviceIoPorts_DeviceId, 
            T.CommandPin AS DeviceIoPorts_CommandPin, 
            T.Description AS DeviceIoPorts_Description, 
            T.IsNotVisable AS DeviceIoPorts_IsNotVisable, 
            T.IsDanger AS DeviceIoPorts_IsDanger, 
            True AS _from0
        FROM EfHolidayContext.DeviceIoPorts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.DevicePatterns.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DevicePatterns
        [HolidayShow.Data.Store.DevicePatterns](T1.DevicePatterns_DevicePatternId, T1.DevicePatterns_DeviceId, T1.DevicePatterns_PatternName)
    FROM (
        SELECT 
            T.DevicePatternId AS DevicePatterns_DevicePatternId, 
            T.DeviceId AS DevicePatterns_DeviceId, 
            T.PatternName AS DevicePatterns_PatternName, 
            True AS _from0
        FROM EfHolidayContext.DevicePatterns AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.DevicePatternSequences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DevicePatternSequences
        [HolidayShow.Data.Store.DevicePatternSequences](T1.DevicePatternSequences_DevicePatternSeqenceId, T1.DevicePatternSequences_DevicePatternId, T1.DevicePatternSequences_OnAt, T1.DevicePatternSequences_Duration, T1.DevicePatternSequences_AudioId, T1.DevicePatternSequences_DeviceIoPortId)
    FROM (
        SELECT 
            T.DevicePatternSeqenceId AS DevicePatternSequences_DevicePatternSeqenceId, 
            T.DevicePatternId AS DevicePatternSequences_DevicePatternId, 
            T.OnAt AS DevicePatternSequences_OnAt, 
            T.Duration AS DevicePatternSequences_Duration, 
            T.AudioId AS DevicePatternSequences_AudioId, 
            T.DeviceIoPortId AS DevicePatternSequences_DeviceIoPortId, 
            True AS _from0
        FROM EfHolidayContext.DevicePatternSequences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.Devices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Devices
        [HolidayShow.Data.Store.Devices](T1.Devices_DeviceId, T1.Devices_Name)
    FROM (
        SELECT 
            T.DeviceId AS Devices_DeviceId, 
            T.Name AS Devices_Name, 
            True AS _from0
        FROM EfHolidayContext.Devices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.Sets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sets
        [HolidayShow.Data.Store.Sets](T1.Sets_SetId, T1.Sets_SetName, T1.Sets_IsDisabled)
    FROM (
        SELECT 
            T.SetId AS Sets_SetId, 
            T.SetName AS Sets_SetName, 
            T.IsDisabled AS Sets_IsDisabled, 
            True AS _from0
        FROM EfHolidayContext.Sets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.DeviceEffects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceEffects
        [HolidayShow.Data.Store.DeviceEffects](T1.DeviceEffects_EffectId, T1.DeviceEffects_EffectName, T1.DeviceEffects_InstructionMetaData, T1.DeviceEffects_Duration, T1.DeviceEffects_EffectInstructionId)
    FROM (
        SELECT 
            T.EffectId AS DeviceEffects_EffectId, 
            T.EffectName AS DeviceEffects_EffectName, 
            T.InstructionMetaData AS DeviceEffects_InstructionMetaData, 
            T.Duration AS DeviceEffects_Duration, 
            T.EffectInstructionId AS DeviceEffects_EffectInstructionId, 
            True AS _from0
        FROM EfHolidayContext.DeviceEffects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.EffectInstructionsAvailable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EffectInstructionsAvailable
        [HolidayShow.Data.Store.EffectInstructionsAvailable](T1.EffectInstructionsAvailable_EffectInstructionId, T1.EffectInstructionsAvailable_DisplayName, T1.EffectInstructionsAvailable_InstructionName, T1.EffectInstructionsAvailable_InstructionsForUse, T1.EffectInstructionsAvailable_IsDisabled)
    FROM (
        SELECT 
            T.EffectInstructionId AS EffectInstructionsAvailable_EffectInstructionId, 
            T.DisplayName AS EffectInstructionsAvailable_DisplayName, 
            T.InstructionName AS EffectInstructionsAvailable_InstructionName, 
            T.InstructionsForUse AS EffectInstructionsAvailable_InstructionsForUse, 
            T.IsDisabled AS EffectInstructionsAvailable_IsDisabled, 
            True AS _from0
        FROM EfHolidayContext.EffectInstructionsAvailable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.SetSequences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SetSequences
        [HolidayShow.Data.Store.SetSequences](T1.SetSequences_SetSequenceId, T1.SetSequences_SetId, T1.SetSequences_OnAt, T1.SetSequences_DevicePatternId, T1.SetSequences_EffectId)
    FROM (
        SELECT 
            T.SetSequenceId AS SetSequences_SetSequenceId, 
            T.SetId AS SetSequences_SetId, 
            T.OnAt AS SetSequences_OnAt, 
            T.DevicePatternId AS SetSequences_DevicePatternId, 
            T.EffectId AS SetSequences_EffectId, 
            True AS _from0
        FROM EfHolidayContext.SetSequences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.AudioOptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AudioOptions
        [HolidayShow.Data.AudioOptions](T1.AudioOptions_AudioId, T1.AudioOptions_Name, T1.AudioOptions_FileName, T1.AudioOptions_AudioDuration, T1.AudioOptions_IsNotVisable)
    FROM (
        SELECT 
            T.AudioId AS AudioOptions_AudioId, 
            T.Name AS AudioOptions_Name, 
            T.FileName AS AudioOptions_FileName, 
            T.AudioDuration AS AudioOptions_AudioDuration, 
            T.IsNotVisable AS AudioOptions_IsNotVisable, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.AudioOptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.DeviceIoPorts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceIoPorts
        [HolidayShow.Data.DeviceIoPorts](T1.DeviceIoPorts_DeviceIoPortId, T1.DeviceIoPorts_DeviceId, T1.DeviceIoPorts_CommandPin, T1.DeviceIoPorts_Description, T1.DeviceIoPorts_IsNotVisable, T1.DeviceIoPorts_IsDanger)
    FROM (
        SELECT 
            T.DeviceIoPortId AS DeviceIoPorts_DeviceIoPortId, 
            T.DeviceId AS DeviceIoPorts_DeviceId, 
            T.CommandPin AS DeviceIoPorts_CommandPin, 
            T.Description AS DeviceIoPorts_Description, 
            T.IsNotVisable AS DeviceIoPorts_IsNotVisable, 
            T.IsDanger AS DeviceIoPorts_IsDanger, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.DeviceIoPorts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.DevicePatterns.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DevicePatterns
        [HolidayShow.Data.DevicePatterns](T1.DevicePatterns_DevicePatternId, T1.DevicePatterns_DeviceId, T1.DevicePatterns_PatternName)
    FROM (
        SELECT 
            T.DevicePatternId AS DevicePatterns_DevicePatternId, 
            T.DeviceId AS DevicePatterns_DeviceId, 
            T.PatternName AS DevicePatterns_PatternName, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.DevicePatterns AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.DevicePatternSequences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DevicePatternSequences
        [HolidayShow.Data.DevicePatternSequences](T1.DevicePatternSequences_DevicePatternSeqenceId, T1.DevicePatternSequences_DevicePatternId, T1.DevicePatternSequences_OnAt, T1.DevicePatternSequences_Duration, T1.DevicePatternSequences_AudioId, T1.DevicePatternSequences_DeviceIoPortId)
    FROM (
        SELECT 
            T.DevicePatternSeqenceId AS DevicePatternSequences_DevicePatternSeqenceId, 
            T.DevicePatternId AS DevicePatternSequences_DevicePatternId, 
            T.OnAt AS DevicePatternSequences_OnAt, 
            T.Duration AS DevicePatternSequences_Duration, 
            T.AudioId AS DevicePatternSequences_AudioId, 
            T.DeviceIoPortId AS DevicePatternSequences_DeviceIoPortId, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.DevicePatternSequences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.Devices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Devices
        [HolidayShow.Data.Devices](T1.Devices_DeviceId, T1.Devices_Name)
    FROM (
        SELECT 
            T.DeviceId AS Devices_DeviceId, 
            T.Name AS Devices_Name, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.Devices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.Sets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sets
        [HolidayShow.Data.Sets](T1.Sets_SetId, T1.Sets_SetName, T1.Sets_IsDisabled)
    FROM (
        SELECT 
            T.SetId AS Sets_SetId, 
            T.SetName AS Sets_SetName, 
            T.IsDisabled AS Sets_IsDisabled, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.Sets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.DeviceEffects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceEffects
        [HolidayShow.Data.DeviceEffects](T1.DeviceEffects_EffectId, T1.DeviceEffects_EffectName, T1.DeviceEffects_InstructionMetaData, T1.DeviceEffects_Duration, T1.DeviceEffects_EffectInstructionId)
    FROM (
        SELECT 
            T.EffectId AS DeviceEffects_EffectId, 
            T.EffectName AS DeviceEffects_EffectName, 
            T.InstructionMetaData AS DeviceEffects_InstructionMetaData, 
            T.Duration AS DeviceEffects_Duration, 
            T.EffectInstructionId AS DeviceEffects_EffectInstructionId, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.DeviceEffects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.EffectInstructionsAvailable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EffectInstructionsAvailable
        [HolidayShow.Data.EffectInstructionsAvailable](T1.EffectInstructionsAvailable_EffectInstructionId, T1.EffectInstructionsAvailable_DisplayName, T1.EffectInstructionsAvailable_InstructionName, T1.EffectInstructionsAvailable_InstructionsForUse, T1.EffectInstructionsAvailable_IsDisabled)
    FROM (
        SELECT 
            T.EffectInstructionId AS EffectInstructionsAvailable_EffectInstructionId, 
            T.DisplayName AS EffectInstructionsAvailable_DisplayName, 
            T.InstructionName AS EffectInstructionsAvailable_InstructionName, 
            T.InstructionsForUse AS EffectInstructionsAvailable_InstructionsForUse, 
            T.IsDisabled AS EffectInstructionsAvailable_IsDisabled, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.EffectInstructionsAvailable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.SetSequences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SetSequences
        [HolidayShow.Data.SetSequences](T1.SetSequences_SetSequenceId, T1.SetSequences_SetId, T1.SetSequences_OnAt, T1.SetSequences_DevicePatternId, T1.SetSequences_EffectId)
    FROM (
        SELECT 
            T.SetSequenceId AS SetSequences_SetSequenceId, 
            T.SetId AS SetSequences_SetId, 
            T.OnAt AS SetSequences_OnAt, 
            T.DevicePatternId AS SetSequences_DevicePatternId, 
            T.EffectId AS SetSequences_EffectId, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.SetSequences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.Settings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Settings
        [HolidayShow.Data.Store.Settings](T1.Settings_SettingName, T1.Settings_ValueString, T1.Settings_ValueDouble)
    FROM (
        SELECT 
            T.SettingName AS Settings_SettingName, 
            T.ValueString AS Settings_ValueString, 
            T.ValueDouble AS Settings_ValueDouble, 
            True AS _from0
        FROM EfHolidayContext.Settings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.Settings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Settings
        [HolidayShow.Data.Settings](T1.Settings_SettingName, T1.Settings_ValueString, T1.Settings_ValueDouble)
    FROM (
        SELECT 
            T.SettingName AS Settings_SettingName, 
            T.ValueString AS Settings_ValueString, 
            T.ValueDouble AS Settings_ValueDouble, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.Settings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HolidayShowDataStoreContainer.Versions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Versions
        [HolidayShow.Data.Store.Versions](T1.Versions_VersionNumber, T1.Versions_DateUpdated)
    FROM (
        SELECT 
            T.VersionNumber AS Versions_VersionNumber, 
            T.DateUpdated AS Versions_DateUpdated, 
            True AS _from0
        FROM EfHolidayContext.Versions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EfHolidayContext.Versions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Versions
        [HolidayShow.Data.Versions](T1.Versions_VersionNumber, T1.Versions_DateUpdated)
    FROM (
        SELECT 
            T.VersionNumber AS Versions_VersionNumber, 
            T.DateUpdated AS Versions_DateUpdated, 
            True AS _from0
        FROM HolidayShowDataStoreContainer.Versions AS T
    ) AS T1");
        }
    }
}
